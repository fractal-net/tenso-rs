#[allow(dead_code, unused_imports, non_camel_case_types)]
#[allow(clippy::all)]
#[allow(rustdoc::broken_intra_doc_links)]
pub mod api {
    #[allow(unused_imports)]
    mod root_mod {
        pub use super::*;
    }
    pub static PALLETS: [&str; 19usize] = [
        "System",
        "RandomnessCollectiveFlip",
        "Timestamp",
        "Aura",
        "Grandpa",
        "Balances",
        "TransactionPayment",
        "SubtensorModule",
        "Triumvirate",
        "TriumvirateMembers",
        "SenateMembers",
        "Utility",
        "Sudo",
        "Multisig",
        "Preimage",
        "Scheduler",
        "Registry",
        "Commitments",
        "AdminUtils",
    ];
    pub static RUNTIME_APIS: [&str; 0usize] = [];
    #[doc = r" The error type returned when there is a runtime issue."]
    pub type DispatchError = runtime_types::sp_runtime::DispatchError;
    #[doc = r" The outer event enum."]
    pub type Event = runtime_types::node_subtensor_runtime::RuntimeEvent;
    #[doc = r" The outer extrinsic enum."]
    pub type Call = runtime_types::node_subtensor_runtime::RuntimeCall;
    #[doc = r" The outer error enum representing the DispatchError's Module variant."]
    pub type Error = runtime_types::node_subtensor_runtime::RuntimeError;
    pub fn constants() -> ConstantsApi {
        ConstantsApi
    }
    pub fn storage() -> StorageApi {
        StorageApi
    }
    pub fn tx() -> TransactionApi {
        TransactionApi
    }
    pub fn apis() -> runtime_apis::RuntimeApi {
        runtime_apis::RuntimeApi
    }
    pub mod runtime_apis {
        use super::root_mod;
        use super::runtime_types;
        use subxt::ext::codec::Encode;
        pub struct RuntimeApi;
        impl RuntimeApi {}
    }
    pub fn custom() -> CustomValuesApi {
        CustomValuesApi
    }
    pub struct CustomValuesApi;
    impl CustomValuesApi {}
    pub struct ConstantsApi;
    impl ConstantsApi {
        pub fn system(&self) -> system::constants::ConstantsApi {
            system::constants::ConstantsApi
        }
        pub fn timestamp(&self) -> timestamp::constants::ConstantsApi {
            timestamp::constants::ConstantsApi
        }
        pub fn grandpa(&self) -> grandpa::constants::ConstantsApi {
            grandpa::constants::ConstantsApi
        }
        pub fn balances(&self) -> balances::constants::ConstantsApi {
            balances::constants::ConstantsApi
        }
        pub fn transaction_payment(&self) -> transaction_payment::constants::ConstantsApi {
            transaction_payment::constants::ConstantsApi
        }
        pub fn subtensor_module(&self) -> subtensor_module::constants::ConstantsApi {
            subtensor_module::constants::ConstantsApi
        }
        pub fn utility(&self) -> utility::constants::ConstantsApi {
            utility::constants::ConstantsApi
        }
        pub fn multisig(&self) -> multisig::constants::ConstantsApi {
            multisig::constants::ConstantsApi
        }
        pub fn scheduler(&self) -> scheduler::constants::ConstantsApi {
            scheduler::constants::ConstantsApi
        }
        pub fn registry(&self) -> registry::constants::ConstantsApi {
            registry::constants::ConstantsApi
        }
        pub fn commitments(&self) -> commitments::constants::ConstantsApi {
            commitments::constants::ConstantsApi
        }
    }
    pub struct StorageApi;
    impl StorageApi {
        pub fn system(&self) -> system::storage::StorageApi {
            system::storage::StorageApi
        }
        pub fn randomness_collective_flip(
            &self,
        ) -> randomness_collective_flip::storage::StorageApi {
            randomness_collective_flip::storage::StorageApi
        }
        pub fn timestamp(&self) -> timestamp::storage::StorageApi {
            timestamp::storage::StorageApi
        }
        pub fn aura(&self) -> aura::storage::StorageApi {
            aura::storage::StorageApi
        }
        pub fn grandpa(&self) -> grandpa::storage::StorageApi {
            grandpa::storage::StorageApi
        }
        pub fn balances(&self) -> balances::storage::StorageApi {
            balances::storage::StorageApi
        }
        pub fn transaction_payment(&self) -> transaction_payment::storage::StorageApi {
            transaction_payment::storage::StorageApi
        }
        pub fn subtensor_module(&self) -> subtensor_module::storage::StorageApi {
            subtensor_module::storage::StorageApi
        }
        pub fn triumvirate(&self) -> triumvirate::storage::StorageApi {
            triumvirate::storage::StorageApi
        }
        pub fn triumvirate_members(&self) -> triumvirate_members::storage::StorageApi {
            triumvirate_members::storage::StorageApi
        }
        pub fn senate_members(&self) -> senate_members::storage::StorageApi {
            senate_members::storage::StorageApi
        }
        pub fn sudo(&self) -> sudo::storage::StorageApi {
            sudo::storage::StorageApi
        }
        pub fn multisig(&self) -> multisig::storage::StorageApi {
            multisig::storage::StorageApi
        }
        pub fn preimage(&self) -> preimage::storage::StorageApi {
            preimage::storage::StorageApi
        }
        pub fn scheduler(&self) -> scheduler::storage::StorageApi {
            scheduler::storage::StorageApi
        }
        pub fn registry(&self) -> registry::storage::StorageApi {
            registry::storage::StorageApi
        }
        pub fn commitments(&self) -> commitments::storage::StorageApi {
            commitments::storage::StorageApi
        }
    }
    pub struct TransactionApi;
    impl TransactionApi {
        pub fn system(&self) -> system::calls::TransactionApi {
            system::calls::TransactionApi
        }
        pub fn timestamp(&self) -> timestamp::calls::TransactionApi {
            timestamp::calls::TransactionApi
        }
        pub fn grandpa(&self) -> grandpa::calls::TransactionApi {
            grandpa::calls::TransactionApi
        }
        pub fn balances(&self) -> balances::calls::TransactionApi {
            balances::calls::TransactionApi
        }
        pub fn subtensor_module(&self) -> subtensor_module::calls::TransactionApi {
            subtensor_module::calls::TransactionApi
        }
        pub fn triumvirate(&self) -> triumvirate::calls::TransactionApi {
            triumvirate::calls::TransactionApi
        }
        pub fn triumvirate_members(&self) -> triumvirate_members::calls::TransactionApi {
            triumvirate_members::calls::TransactionApi
        }
        pub fn senate_members(&self) -> senate_members::calls::TransactionApi {
            senate_members::calls::TransactionApi
        }
        pub fn utility(&self) -> utility::calls::TransactionApi {
            utility::calls::TransactionApi
        }
        pub fn sudo(&self) -> sudo::calls::TransactionApi {
            sudo::calls::TransactionApi
        }
        pub fn multisig(&self) -> multisig::calls::TransactionApi {
            multisig::calls::TransactionApi
        }
        pub fn preimage(&self) -> preimage::calls::TransactionApi {
            preimage::calls::TransactionApi
        }
        pub fn scheduler(&self) -> scheduler::calls::TransactionApi {
            scheduler::calls::TransactionApi
        }
        pub fn registry(&self) -> registry::calls::TransactionApi {
            registry::calls::TransactionApi
        }
        pub fn commitments(&self) -> commitments::calls::TransactionApi {
            commitments::calls::TransactionApi
        }
        pub fn admin_utils(&self) -> admin_utils::calls::TransactionApi {
            admin_utils::calls::TransactionApi
        }
    }
    #[doc = r" check whether the metadata provided is aligned with this statically generated code."]
    pub fn is_codegen_valid_for(metadata: &::subxt::Metadata) -> bool {
        let runtime_metadata_hash = metadata
            .hasher()
            .only_these_pallets(&PALLETS)
            .only_these_runtime_apis(&RUNTIME_APIS)
            .hash();
        runtime_metadata_hash
            == [
                169u8, 83u8, 242u8, 171u8, 80u8, 244u8, 36u8, 201u8, 28u8, 251u8, 104u8, 37u8,
                72u8, 87u8, 37u8, 32u8, 226u8, 250u8, 114u8, 162u8, 121u8, 192u8, 130u8, 136u8,
                23u8, 200u8, 203u8, 254u8, 173u8, 23u8, 202u8, 157u8,
            ]
    }
    pub mod system {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "Error for the System pallet"]
        pub type Error = runtime_types::frame_system::pallet::Error;
        #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
        pub type Call = runtime_types::frame_system::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Make some on-chain remark."]
                #[doc = ""]
                #[doc = "## Complexity"]
                #[doc = "- `O(1)`"]
                pub struct Remark {
                    pub remark: remark::Remark,
                }
                pub mod remark {
                    use super::runtime_types;
                    pub type Remark = ::std::vec::Vec<::core::primitive::u8>;
                }
                impl ::subxt::blocks::StaticExtrinsic for Remark {
                    const PALLET: &'static str = "System";
                    const CALL: &'static str = "remark";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Set the number of pages in the WebAssembly environment's heap."]
                pub struct SetHeapPages {
                    pub pages: set_heap_pages::Pages,
                }
                pub mod set_heap_pages {
                    use super::runtime_types;
                    pub type Pages = ::core::primitive::u64;
                }
                impl ::subxt::blocks::StaticExtrinsic for SetHeapPages {
                    const PALLET: &'static str = "System";
                    const CALL: &'static str = "set_heap_pages";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Set the new runtime code."]
                #[doc = ""]
                #[doc = "## Complexity"]
                #[doc = "- `O(C + S)` where `C` length of `code` and `S` complexity of `can_set_code`"]
                pub struct SetCode {
                    pub code: set_code::Code,
                }
                pub mod set_code {
                    use super::runtime_types;
                    pub type Code = ::std::vec::Vec<::core::primitive::u8>;
                }
                impl ::subxt::blocks::StaticExtrinsic for SetCode {
                    const PALLET: &'static str = "System";
                    const CALL: &'static str = "set_code";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Set the new runtime code without doing any checks of the given `code`."]
                #[doc = ""]
                #[doc = "## Complexity"]
                #[doc = "- `O(C)` where `C` length of `code`"]
                pub struct SetCodeWithoutChecks {
                    pub code: set_code_without_checks::Code,
                }
                pub mod set_code_without_checks {
                    use super::runtime_types;
                    pub type Code = ::std::vec::Vec<::core::primitive::u8>;
                }
                impl ::subxt::blocks::StaticExtrinsic for SetCodeWithoutChecks {
                    const PALLET: &'static str = "System";
                    const CALL: &'static str = "set_code_without_checks";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Set some items of storage."]
                pub struct SetStorage {
                    pub items: set_storage::Items,
                }
                pub mod set_storage {
                    use super::runtime_types;
                    pub type Items = ::std::vec::Vec<(
                        ::std::vec::Vec<::core::primitive::u8>,
                        ::std::vec::Vec<::core::primitive::u8>,
                    )>;
                }
                impl ::subxt::blocks::StaticExtrinsic for SetStorage {
                    const PALLET: &'static str = "System";
                    const CALL: &'static str = "set_storage";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Kill some items from storage."]
                pub struct KillStorage {
                    pub keys: kill_storage::Keys,
                }
                pub mod kill_storage {
                    use super::runtime_types;
                    pub type Keys = ::std::vec::Vec<::std::vec::Vec<::core::primitive::u8>>;
                }
                impl ::subxt::blocks::StaticExtrinsic for KillStorage {
                    const PALLET: &'static str = "System";
                    const CALL: &'static str = "kill_storage";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Kill all storage items with a key that starts with the given prefix."]
                #[doc = ""]
                #[doc = "**NOTE:** We rely on the Root origin to provide us the number of subkeys under"]
                #[doc = "the prefix we are removing to accurately calculate the weight of this function."]
                pub struct KillPrefix {
                    pub prefix: kill_prefix::Prefix,
                    pub subkeys: kill_prefix::Subkeys,
                }
                pub mod kill_prefix {
                    use super::runtime_types;
                    pub type Prefix = ::std::vec::Vec<::core::primitive::u8>;
                    pub type Subkeys = ::core::primitive::u32;
                }
                impl ::subxt::blocks::StaticExtrinsic for KillPrefix {
                    const PALLET: &'static str = "System";
                    const CALL: &'static str = "kill_prefix";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Make some on-chain remark and emit event."]
                pub struct RemarkWithEvent {
                    pub remark: remark_with_event::Remark,
                }
                pub mod remark_with_event {
                    use super::runtime_types;
                    pub type Remark = ::std::vec::Vec<::core::primitive::u8>;
                }
                impl ::subxt::blocks::StaticExtrinsic for RemarkWithEvent {
                    const PALLET: &'static str = "System";
                    const CALL: &'static str = "remark_with_event";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "Make some on-chain remark."]
                #[doc = ""]
                #[doc = "## Complexity"]
                #[doc = "- `O(1)`"]
                pub fn remark(
                    &self,
                    remark: types::remark::Remark,
                ) -> ::subxt::tx::Payload<types::Remark> {
                    ::subxt::tx::Payload::new_static(
                        "System",
                        "remark",
                        types::Remark { remark },
                        [
                            43u8, 126u8, 180u8, 174u8, 141u8, 48u8, 52u8, 125u8, 166u8, 212u8,
                            216u8, 98u8, 100u8, 24u8, 132u8, 71u8, 101u8, 64u8, 246u8, 169u8, 33u8,
                            250u8, 147u8, 208u8, 2u8, 40u8, 129u8, 209u8, 232u8, 207u8, 207u8,
                            13u8,
                        ],
                    )
                }
                #[doc = "Set the number of pages in the WebAssembly environment's heap."]
                pub fn set_heap_pages(
                    &self,
                    pages: types::set_heap_pages::Pages,
                ) -> ::subxt::tx::Payload<types::SetHeapPages> {
                    ::subxt::tx::Payload::new_static(
                        "System",
                        "set_heap_pages",
                        types::SetHeapPages { pages },
                        [
                            188u8, 191u8, 99u8, 216u8, 219u8, 109u8, 141u8, 50u8, 78u8, 235u8,
                            215u8, 242u8, 195u8, 24u8, 111u8, 76u8, 229u8, 64u8, 99u8, 225u8,
                            134u8, 121u8, 81u8, 209u8, 127u8, 223u8, 98u8, 215u8, 150u8, 70u8,
                            57u8, 147u8,
                        ],
                    )
                }
                #[doc = "Set the new runtime code."]
                #[doc = ""]
                #[doc = "## Complexity"]
                #[doc = "- `O(C + S)` where `C` length of `code` and `S` complexity of `can_set_code`"]
                pub fn set_code(
                    &self,
                    code: types::set_code::Code,
                ) -> ::subxt::tx::Payload<types::SetCode> {
                    ::subxt::tx::Payload::new_static(
                        "System",
                        "set_code",
                        types::SetCode { code },
                        [
                            233u8, 248u8, 88u8, 245u8, 28u8, 65u8, 25u8, 169u8, 35u8, 237u8, 19u8,
                            203u8, 136u8, 160u8, 18u8, 3u8, 20u8, 197u8, 81u8, 169u8, 244u8, 188u8,
                            27u8, 147u8, 147u8, 236u8, 65u8, 25u8, 3u8, 143u8, 182u8, 22u8,
                        ],
                    )
                }
                #[doc = "Set the new runtime code without doing any checks of the given `code`."]
                #[doc = ""]
                #[doc = "## Complexity"]
                #[doc = "- `O(C)` where `C` length of `code`"]
                pub fn set_code_without_checks(
                    &self,
                    code: types::set_code_without_checks::Code,
                ) -> ::subxt::tx::Payload<types::SetCodeWithoutChecks> {
                    ::subxt::tx::Payload::new_static(
                        "System",
                        "set_code_without_checks",
                        types::SetCodeWithoutChecks { code },
                        [
                            82u8, 212u8, 157u8, 44u8, 70u8, 0u8, 143u8, 15u8, 109u8, 109u8, 107u8,
                            157u8, 141u8, 42u8, 169u8, 11u8, 15u8, 186u8, 252u8, 138u8, 10u8,
                            147u8, 15u8, 178u8, 247u8, 229u8, 213u8, 98u8, 207u8, 231u8, 119u8,
                            115u8,
                        ],
                    )
                }
                #[doc = "Set some items of storage."]
                pub fn set_storage(
                    &self,
                    items: types::set_storage::Items,
                ) -> ::subxt::tx::Payload<types::SetStorage> {
                    ::subxt::tx::Payload::new_static(
                        "System",
                        "set_storage",
                        types::SetStorage { items },
                        [
                            141u8, 216u8, 52u8, 222u8, 223u8, 136u8, 123u8, 181u8, 19u8, 75u8,
                            163u8, 102u8, 229u8, 189u8, 158u8, 142u8, 95u8, 235u8, 240u8, 49u8,
                            150u8, 76u8, 78u8, 137u8, 126u8, 88u8, 183u8, 88u8, 231u8, 146u8,
                            234u8, 43u8,
                        ],
                    )
                }
                #[doc = "Kill some items from storage."]
                pub fn kill_storage(
                    &self,
                    keys: types::kill_storage::Keys,
                ) -> ::subxt::tx::Payload<types::KillStorage> {
                    ::subxt::tx::Payload::new_static(
                        "System",
                        "kill_storage",
                        types::KillStorage { keys },
                        [
                            73u8, 63u8, 196u8, 36u8, 144u8, 114u8, 34u8, 213u8, 108u8, 93u8, 209u8,
                            234u8, 153u8, 185u8, 33u8, 91u8, 187u8, 195u8, 223u8, 130u8, 58u8,
                            156u8, 63u8, 47u8, 228u8, 249u8, 216u8, 139u8, 143u8, 177u8, 41u8,
                            35u8,
                        ],
                    )
                }
                #[doc = "Kill all storage items with a key that starts with the given prefix."]
                #[doc = ""]
                #[doc = "**NOTE:** We rely on the Root origin to provide us the number of subkeys under"]
                #[doc = "the prefix we are removing to accurately calculate the weight of this function."]
                pub fn kill_prefix(
                    &self,
                    prefix: types::kill_prefix::Prefix,
                    subkeys: types::kill_prefix::Subkeys,
                ) -> ::subxt::tx::Payload<types::KillPrefix> {
                    ::subxt::tx::Payload::new_static(
                        "System",
                        "kill_prefix",
                        types::KillPrefix { prefix, subkeys },
                        [
                            184u8, 57u8, 139u8, 24u8, 208u8, 87u8, 108u8, 215u8, 198u8, 189u8,
                            175u8, 242u8, 167u8, 215u8, 97u8, 63u8, 110u8, 166u8, 238u8, 98u8,
                            67u8, 236u8, 111u8, 110u8, 234u8, 81u8, 102u8, 5u8, 182u8, 5u8, 214u8,
                            85u8,
                        ],
                    )
                }
                #[doc = "Make some on-chain remark and emit event."]
                pub fn remark_with_event(
                    &self,
                    remark: types::remark_with_event::Remark,
                ) -> ::subxt::tx::Payload<types::RemarkWithEvent> {
                    ::subxt::tx::Payload::new_static(
                        "System",
                        "remark_with_event",
                        types::RemarkWithEvent { remark },
                        [
                            120u8, 120u8, 153u8, 92u8, 184u8, 85u8, 34u8, 2u8, 174u8, 206u8, 105u8,
                            228u8, 233u8, 130u8, 80u8, 246u8, 228u8, 59u8, 234u8, 240u8, 4u8, 49u8,
                            147u8, 170u8, 115u8, 91u8, 149u8, 200u8, 228u8, 181u8, 8u8, 154u8,
                        ],
                    )
                }
            }
        }
        #[doc = "Event for the System pallet."]
        pub type Event = runtime_types::frame_system::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "An extrinsic completed successfully."]
            pub struct ExtrinsicSuccess {
                pub dispatch_info: extrinsic_success::DispatchInfo,
            }
            pub mod extrinsic_success {
                use super::runtime_types;
                pub type DispatchInfo = runtime_types::frame_support::dispatch::DispatchInfo;
            }
            impl ::subxt::events::StaticEvent for ExtrinsicSuccess {
                const PALLET: &'static str = "System";
                const EVENT: &'static str = "ExtrinsicSuccess";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "An extrinsic failed."]
            pub struct ExtrinsicFailed {
                pub dispatch_error: extrinsic_failed::DispatchError,
                pub dispatch_info: extrinsic_failed::DispatchInfo,
            }
            pub mod extrinsic_failed {
                use super::runtime_types;
                pub type DispatchError = runtime_types::sp_runtime::DispatchError;
                pub type DispatchInfo = runtime_types::frame_support::dispatch::DispatchInfo;
            }
            impl ::subxt::events::StaticEvent for ExtrinsicFailed {
                const PALLET: &'static str = "System";
                const EVENT: &'static str = "ExtrinsicFailed";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "`:code` was updated."]
            pub struct CodeUpdated;
            impl ::subxt::events::StaticEvent for CodeUpdated {
                const PALLET: &'static str = "System";
                const EVENT: &'static str = "CodeUpdated";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A new account was created."]
            pub struct NewAccount {
                pub account: new_account::Account,
            }
            pub mod new_account {
                use super::runtime_types;
                pub type Account = ::subxt::utils::AccountId32;
            }
            impl ::subxt::events::StaticEvent for NewAccount {
                const PALLET: &'static str = "System";
                const EVENT: &'static str = "NewAccount";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "An account was reaped."]
            pub struct KilledAccount {
                pub account: killed_account::Account,
            }
            pub mod killed_account {
                use super::runtime_types;
                pub type Account = ::subxt::utils::AccountId32;
            }
            impl ::subxt::events::StaticEvent for KilledAccount {
                const PALLET: &'static str = "System";
                const EVENT: &'static str = "KilledAccount";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "On on-chain remark happened."]
            pub struct Remarked {
                pub sender: remarked::Sender,
                pub hash: remarked::Hash,
            }
            pub mod remarked {
                use super::runtime_types;
                pub type Sender = ::subxt::utils::AccountId32;
                pub type Hash = ::subxt::utils::H256;
            }
            impl ::subxt::events::StaticEvent for Remarked {
                const PALLET: &'static str = "System";
                const EVENT: &'static str = "Remarked";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub mod types {
                use super::runtime_types;
                pub mod account {
                    use super::runtime_types;
                    pub type Account = runtime_types::frame_system::AccountInfo<
                        ::core::primitive::u32,
                        runtime_types::pallet_balances::AccountData<::core::primitive::u64>,
                    >;
                    pub type Param0 = ::subxt::utils::AccountId32;
                }
                pub mod extrinsic_count {
                    use super::runtime_types;
                    pub type ExtrinsicCount = ::core::primitive::u32;
                }
                pub mod block_weight {
                    use super::runtime_types;
                    pub type BlockWeight = runtime_types::frame_support::dispatch::PerDispatchClass<
                        runtime_types::sp_weights::weight_v2::Weight,
                    >;
                }
                pub mod all_extrinsics_len {
                    use super::runtime_types;
                    pub type AllExtrinsicsLen = ::core::primitive::u32;
                }
                pub mod block_hash {
                    use super::runtime_types;
                    pub type BlockHash = ::subxt::utils::H256;
                    pub type Param0 = ::core::primitive::u32;
                }
                pub mod extrinsic_data {
                    use super::runtime_types;
                    pub type ExtrinsicData = ::std::vec::Vec<::core::primitive::u8>;
                    pub type Param0 = ::core::primitive::u32;
                }
                pub mod number {
                    use super::runtime_types;
                    pub type Number = ::core::primitive::u32;
                }
                pub mod parent_hash {
                    use super::runtime_types;
                    pub type ParentHash = ::subxt::utils::H256;
                }
                pub mod digest {
                    use super::runtime_types;
                    pub type Digest = runtime_types::sp_runtime::generic::digest::Digest;
                }
                pub mod events {
                    use super::runtime_types;
                    pub type Events = ::std::vec::Vec<
                        runtime_types::frame_system::EventRecord<
                            runtime_types::node_subtensor_runtime::RuntimeEvent,
                            ::subxt::utils::H256,
                        >,
                    >;
                }
                pub mod event_count {
                    use super::runtime_types;
                    pub type EventCount = ::core::primitive::u32;
                }
                pub mod event_topics {
                    use super::runtime_types;
                    pub type EventTopics =
                        ::std::vec::Vec<(::core::primitive::u32, ::core::primitive::u32)>;
                    pub type Param0 = ::subxt::utils::H256;
                }
                pub mod last_runtime_upgrade {
                    use super::runtime_types;
                    pub type LastRuntimeUpgrade =
                        runtime_types::frame_system::LastRuntimeUpgradeInfo;
                }
                pub mod upgraded_to_u32_ref_count {
                    use super::runtime_types;
                    pub type UpgradedToU32RefCount = ::core::primitive::bool;
                }
                pub mod upgraded_to_triple_ref_count {
                    use super::runtime_types;
                    pub type UpgradedToTripleRefCount = ::core::primitive::bool;
                }
                pub mod execution_phase {
                    use super::runtime_types;
                    pub type ExecutionPhase = runtime_types::frame_system::Phase;
                }
            }
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " The full account information for a particular account ID."]
                pub fn account_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::account::Account,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "System",
                        "Account",
                        vec![],
                        [
                            132u8, 153u8, 95u8, 101u8, 113u8, 81u8, 158u8, 70u8, 146u8, 179u8,
                            74u8, 174u8, 155u8, 33u8, 21u8, 166u8, 74u8, 145u8, 202u8, 121u8,
                            253u8, 210u8, 201u8, 60u8, 97u8, 75u8, 28u8, 76u8, 59u8, 45u8, 141u8,
                            85u8,
                        ],
                    )
                }
                #[doc = " The full account information for a particular account ID."]
                pub fn account(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::account::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::account::Account,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "System",
                        "Account",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            132u8, 153u8, 95u8, 101u8, 113u8, 81u8, 158u8, 70u8, 146u8, 179u8,
                            74u8, 174u8, 155u8, 33u8, 21u8, 166u8, 74u8, 145u8, 202u8, 121u8,
                            253u8, 210u8, 201u8, 60u8, 97u8, 75u8, 28u8, 76u8, 59u8, 45u8, 141u8,
                            85u8,
                        ],
                    )
                }
                #[doc = " Total extrinsics count for the current block."]
                pub fn extrinsic_count(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::extrinsic_count::ExtrinsicCount,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "System",
                        "ExtrinsicCount",
                        vec![],
                        [
                            102u8, 76u8, 236u8, 42u8, 40u8, 231u8, 33u8, 222u8, 123u8, 147u8,
                            153u8, 148u8, 234u8, 203u8, 181u8, 119u8, 6u8, 187u8, 177u8, 199u8,
                            120u8, 47u8, 137u8, 254u8, 96u8, 100u8, 165u8, 182u8, 249u8, 230u8,
                            159u8, 79u8,
                        ],
                    )
                }
                #[doc = " The current weight for the block."]
                pub fn block_weight(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::block_weight::BlockWeight,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "System",
                        "BlockWeight",
                        vec![],
                        [
                            158u8, 46u8, 228u8, 89u8, 210u8, 214u8, 84u8, 154u8, 50u8, 68u8, 63u8,
                            62u8, 43u8, 42u8, 99u8, 27u8, 54u8, 42u8, 146u8, 44u8, 241u8, 216u8,
                            229u8, 30u8, 216u8, 255u8, 165u8, 238u8, 181u8, 130u8, 36u8, 102u8,
                        ],
                    )
                }
                #[doc = " Total length (in bytes) for all extrinsics put together, for the current block."]
                pub fn all_extrinsics_len(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::all_extrinsics_len::AllExtrinsicsLen,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "System",
                        "AllExtrinsicsLen",
                        vec![],
                        [
                            117u8, 86u8, 61u8, 243u8, 41u8, 51u8, 102u8, 214u8, 137u8, 100u8,
                            243u8, 185u8, 122u8, 174u8, 187u8, 117u8, 86u8, 189u8, 63u8, 135u8,
                            101u8, 218u8, 203u8, 201u8, 237u8, 254u8, 128u8, 183u8, 169u8, 221u8,
                            242u8, 65u8,
                        ],
                    )
                }
                #[doc = " Map of block numbers to block hashes."]
                pub fn block_hash_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::block_hash::BlockHash,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "System",
                        "BlockHash",
                        vec![],
                        [
                            217u8, 32u8, 215u8, 253u8, 24u8, 182u8, 207u8, 178u8, 157u8, 24u8,
                            103u8, 100u8, 195u8, 165u8, 69u8, 152u8, 112u8, 181u8, 56u8, 192u8,
                            164u8, 16u8, 20u8, 222u8, 28u8, 214u8, 144u8, 142u8, 146u8, 69u8,
                            202u8, 118u8,
                        ],
                    )
                }
                #[doc = " Map of block numbers to block hashes."]
                pub fn block_hash(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::block_hash::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::block_hash::BlockHash,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "System",
                        "BlockHash",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            217u8, 32u8, 215u8, 253u8, 24u8, 182u8, 207u8, 178u8, 157u8, 24u8,
                            103u8, 100u8, 195u8, 165u8, 69u8, 152u8, 112u8, 181u8, 56u8, 192u8,
                            164u8, 16u8, 20u8, 222u8, 28u8, 214u8, 144u8, 142u8, 146u8, 69u8,
                            202u8, 118u8,
                        ],
                    )
                }
                #[doc = " Extrinsics data for the current block (maps an extrinsic's index to its data)."]
                pub fn extrinsic_data_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::extrinsic_data::ExtrinsicData,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "System",
                        "ExtrinsicData",
                        vec![],
                        [
                            160u8, 180u8, 122u8, 18u8, 196u8, 26u8, 2u8, 37u8, 115u8, 232u8, 133u8,
                            220u8, 106u8, 245u8, 4u8, 129u8, 42u8, 84u8, 241u8, 45u8, 199u8, 179u8,
                            128u8, 61u8, 170u8, 137u8, 231u8, 156u8, 247u8, 57u8, 47u8, 38u8,
                        ],
                    )
                }
                #[doc = " Extrinsics data for the current block (maps an extrinsic's index to its data)."]
                pub fn extrinsic_data(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::extrinsic_data::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::extrinsic_data::ExtrinsicData,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "System",
                        "ExtrinsicData",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            160u8, 180u8, 122u8, 18u8, 196u8, 26u8, 2u8, 37u8, 115u8, 232u8, 133u8,
                            220u8, 106u8, 245u8, 4u8, 129u8, 42u8, 84u8, 241u8, 45u8, 199u8, 179u8,
                            128u8, 61u8, 170u8, 137u8, 231u8, 156u8, 247u8, 57u8, 47u8, 38u8,
                        ],
                    )
                }
                #[doc = " The current block number being processed. Set by `execute_block`."]
                pub fn number(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::number::Number,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "System",
                        "Number",
                        vec![],
                        [
                            30u8, 194u8, 177u8, 90u8, 194u8, 232u8, 46u8, 180u8, 85u8, 129u8, 14u8,
                            9u8, 8u8, 8u8, 23u8, 95u8, 230u8, 5u8, 13u8, 105u8, 125u8, 2u8, 22u8,
                            200u8, 78u8, 93u8, 115u8, 28u8, 150u8, 113u8, 48u8, 53u8,
                        ],
                    )
                }
                #[doc = " Hash of the previous block."]
                pub fn parent_hash(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::parent_hash::ParentHash,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "System",
                        "ParentHash",
                        vec![],
                        [
                            26u8, 130u8, 11u8, 216u8, 155u8, 71u8, 128u8, 170u8, 30u8, 153u8, 21u8,
                            192u8, 62u8, 93u8, 137u8, 80u8, 120u8, 81u8, 202u8, 94u8, 248u8, 125u8,
                            71u8, 82u8, 141u8, 229u8, 32u8, 56u8, 73u8, 50u8, 101u8, 78u8,
                        ],
                    )
                }
                #[doc = " Digest of the current block, also part of the block header."]
                pub fn digest(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::digest::Digest,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "System",
                        "Digest",
                        vec![],
                        [
                            61u8, 64u8, 237u8, 91u8, 145u8, 232u8, 17u8, 254u8, 181u8, 16u8, 234u8,
                            91u8, 51u8, 140u8, 254u8, 131u8, 98u8, 135u8, 21u8, 37u8, 251u8, 20u8,
                            58u8, 92u8, 123u8, 141u8, 14u8, 227u8, 146u8, 46u8, 222u8, 117u8,
                        ],
                    )
                }
                #[doc = " Events deposited for the current block."]
                #[doc = ""]
                #[doc = " NOTE: The item is unbound and should therefore never be read on chain."]
                #[doc = " It could otherwise inflate the PoV size of a block."]
                #[doc = ""]
                #[doc = " Events have a large in-memory size. Box the events to not go out-of-memory"]
                #[doc = " just in case someone still reads them from within the runtime."]
                pub fn events(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::events::Events,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "System",
                        "Events",
                        vec![],
                        [
                            11u8, 255u8, 85u8, 42u8, 18u8, 4u8, 107u8, 196u8, 255u8, 147u8, 214u8,
                            128u8, 236u8, 136u8, 127u8, 54u8, 31u8, 157u8, 45u8, 219u8, 149u8, 5u8,
                            117u8, 27u8, 129u8, 241u8, 253u8, 24u8, 161u8, 75u8, 32u8, 123u8,
                        ],
                    )
                }
                #[doc = " The number of events in the `Events<T>` list."]
                pub fn event_count(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::event_count::EventCount,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "System",
                        "EventCount",
                        vec![],
                        [
                            175u8, 24u8, 252u8, 184u8, 210u8, 167u8, 146u8, 143u8, 164u8, 80u8,
                            151u8, 205u8, 189u8, 189u8, 55u8, 220u8, 47u8, 101u8, 181u8, 33u8,
                            254u8, 131u8, 13u8, 143u8, 3u8, 244u8, 245u8, 45u8, 2u8, 210u8, 79u8,
                            133u8,
                        ],
                    )
                }
                #[doc = " Mapping between a topic (represented by T::Hash) and a vector of indexes"]
                #[doc = " of events in the `<Events<T>>` list."]
                #[doc = ""]
                #[doc = " All topic vectors have deterministic storage locations depending on the topic. This"]
                #[doc = " allows light-clients to leverage the changes trie storage tracking mechanism and"]
                #[doc = " in case of changes fetch the list of events of interest."]
                #[doc = ""]
                #[doc = " The value has the type `(T::BlockNumber, EventIndex)` because if we used only just"]
                #[doc = " the `EventIndex` then in case if the topic has the same contents on the next block"]
                #[doc = " no notification will be triggered thus the event might be lost."]
                pub fn event_topics_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::event_topics::EventTopics,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "System",
                        "EventTopics",
                        vec![],
                        [
                            40u8, 225u8, 14u8, 75u8, 44u8, 176u8, 76u8, 34u8, 143u8, 107u8, 69u8,
                            133u8, 114u8, 13u8, 172u8, 250u8, 141u8, 73u8, 12u8, 65u8, 217u8, 63u8,
                            120u8, 241u8, 48u8, 106u8, 143u8, 161u8, 128u8, 100u8, 166u8, 59u8,
                        ],
                    )
                }
                #[doc = " Mapping between a topic (represented by T::Hash) and a vector of indexes"]
                #[doc = " of events in the `<Events<T>>` list."]
                #[doc = ""]
                #[doc = " All topic vectors have deterministic storage locations depending on the topic. This"]
                #[doc = " allows light-clients to leverage the changes trie storage tracking mechanism and"]
                #[doc = " in case of changes fetch the list of events of interest."]
                #[doc = ""]
                #[doc = " The value has the type `(T::BlockNumber, EventIndex)` because if we used only just"]
                #[doc = " the `EventIndex` then in case if the topic has the same contents on the next block"]
                #[doc = " no notification will be triggered thus the event might be lost."]
                pub fn event_topics(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::event_topics::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::event_topics::EventTopics,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "System",
                        "EventTopics",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            40u8, 225u8, 14u8, 75u8, 44u8, 176u8, 76u8, 34u8, 143u8, 107u8, 69u8,
                            133u8, 114u8, 13u8, 172u8, 250u8, 141u8, 73u8, 12u8, 65u8, 217u8, 63u8,
                            120u8, 241u8, 48u8, 106u8, 143u8, 161u8, 128u8, 100u8, 166u8, 59u8,
                        ],
                    )
                }
                #[doc = " Stores the `spec_version` and `spec_name` of when the last runtime upgrade happened."]
                pub fn last_runtime_upgrade(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::last_runtime_upgrade::LastRuntimeUpgrade,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "System",
                        "LastRuntimeUpgrade",
                        vec![],
                        [
                            137u8, 29u8, 175u8, 75u8, 197u8, 208u8, 91u8, 207u8, 156u8, 87u8,
                            148u8, 68u8, 91u8, 140u8, 22u8, 233u8, 1u8, 229u8, 56u8, 34u8, 40u8,
                            194u8, 253u8, 30u8, 163u8, 39u8, 54u8, 209u8, 13u8, 27u8, 139u8, 184u8,
                        ],
                    )
                }
                #[doc = " True if we have upgraded so that `type RefCount` is `u32`. False (default) if not."]
                pub fn upgraded_to_u32_ref_count(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::upgraded_to_u32_ref_count::UpgradedToU32RefCount,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "System",
                        "UpgradedToU32RefCount",
                        vec![],
                        [
                            229u8, 73u8, 9u8, 132u8, 186u8, 116u8, 151u8, 171u8, 145u8, 29u8, 34u8,
                            130u8, 52u8, 146u8, 124u8, 175u8, 79u8, 189u8, 147u8, 230u8, 234u8,
                            107u8, 124u8, 31u8, 2u8, 22u8, 86u8, 190u8, 4u8, 147u8, 50u8, 245u8,
                        ],
                    )
                }
                #[doc = " True if we have upgraded so that AccountInfo contains three types of `RefCount`. False"]
                #[doc = " (default) if not."]
                pub fn upgraded_to_triple_ref_count(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::upgraded_to_triple_ref_count::UpgradedToTripleRefCount,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "System",
                        "UpgradedToTripleRefCount",
                        vec![],
                        [
                            97u8, 66u8, 124u8, 243u8, 27u8, 167u8, 147u8, 81u8, 254u8, 201u8,
                            101u8, 24u8, 40u8, 231u8, 14u8, 179u8, 154u8, 163u8, 71u8, 81u8, 185u8,
                            167u8, 82u8, 254u8, 189u8, 3u8, 101u8, 207u8, 206u8, 194u8, 155u8,
                            151u8,
                        ],
                    )
                }
                #[doc = " The execution phase of the block."]
                pub fn execution_phase(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::execution_phase::ExecutionPhase,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "System",
                        "ExecutionPhase",
                        vec![],
                        [
                            191u8, 129u8, 100u8, 134u8, 126u8, 116u8, 154u8, 203u8, 220u8, 200u8,
                            0u8, 26u8, 161u8, 250u8, 133u8, 205u8, 146u8, 24u8, 5u8, 156u8, 158u8,
                            35u8, 36u8, 253u8, 52u8, 235u8, 86u8, 167u8, 35u8, 100u8, 119u8, 27u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " Block & extrinsics weights: base values and limits."]
                pub fn block_weights(
                    &self,
                ) -> ::subxt::constants::Address<runtime_types::frame_system::limits::BlockWeights>
                {
                    ::subxt::constants::Address::new_static(
                        "System",
                        "BlockWeights",
                        [
                            176u8, 124u8, 225u8, 136u8, 25u8, 73u8, 247u8, 33u8, 82u8, 206u8, 85u8,
                            190u8, 127u8, 102u8, 71u8, 11u8, 185u8, 8u8, 58u8, 0u8, 94u8, 55u8,
                            163u8, 177u8, 104u8, 59u8, 60u8, 136u8, 246u8, 116u8, 0u8, 239u8,
                        ],
                    )
                }
                #[doc = " The maximum length of a block (in bytes)."]
                pub fn block_length(
                    &self,
                ) -> ::subxt::constants::Address<runtime_types::frame_system::limits::BlockLength>
                {
                    ::subxt::constants::Address::new_static(
                        "System",
                        "BlockLength",
                        [
                            23u8, 242u8, 225u8, 39u8, 225u8, 67u8, 152u8, 41u8, 155u8, 104u8, 68u8,
                            229u8, 185u8, 133u8, 10u8, 143u8, 184u8, 152u8, 234u8, 44u8, 140u8,
                            96u8, 166u8, 235u8, 162u8, 160u8, 72u8, 7u8, 35u8, 194u8, 3u8, 37u8,
                        ],
                    )
                }
                #[doc = " Maximum number of block number to block hash mappings to keep (oldest pruned first)."]
                pub fn block_hash_count(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "System",
                        "BlockHashCount",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " The weight of runtime database operations the runtime can invoke."]
                pub fn db_weight(
                    &self,
                ) -> ::subxt::constants::Address<runtime_types::sp_weights::RuntimeDbWeight>
                {
                    ::subxt::constants::Address::new_static(
                        "System",
                        "DbWeight",
                        [
                            42u8, 43u8, 178u8, 142u8, 243u8, 203u8, 60u8, 173u8, 118u8, 111u8,
                            200u8, 170u8, 102u8, 70u8, 237u8, 187u8, 198u8, 120u8, 153u8, 232u8,
                            183u8, 76u8, 74u8, 10u8, 70u8, 243u8, 14u8, 218u8, 213u8, 126u8, 29u8,
                            177u8,
                        ],
                    )
                }
                #[doc = " Get the chain's current version."]
                pub fn version(
                    &self,
                ) -> ::subxt::constants::Address<runtime_types::sp_version::RuntimeVersion>
                {
                    ::subxt::constants::Address::new_static(
                        "System",
                        "Version",
                        [
                            219u8, 45u8, 162u8, 245u8, 177u8, 246u8, 48u8, 126u8, 191u8, 157u8,
                            228u8, 83u8, 111u8, 133u8, 183u8, 13u8, 148u8, 108u8, 92u8, 102u8,
                            72u8, 205u8, 74u8, 242u8, 233u8, 79u8, 20u8, 170u8, 72u8, 202u8, 158u8,
                            165u8,
                        ],
                    )
                }
                #[doc = " The designated SS58 prefix of this chain."]
                #[doc = ""]
                #[doc = " This replaces the \"ss58Format\" property declared in the chain spec. Reason is"]
                #[doc = " that the runtime should know about the prefix in order to make use of it as"]
                #[doc = " an identifier of the chain."]
                pub fn ss58_prefix(&self) -> ::subxt::constants::Address<::core::primitive::u16> {
                    ::subxt::constants::Address::new_static(
                        "System",
                        "SS58Prefix",
                        [
                            116u8, 33u8, 2u8, 170u8, 181u8, 147u8, 171u8, 169u8, 167u8, 227u8,
                            41u8, 144u8, 11u8, 236u8, 82u8, 100u8, 74u8, 60u8, 184u8, 72u8, 169u8,
                            90u8, 208u8, 135u8, 15u8, 117u8, 10u8, 123u8, 128u8, 193u8, 29u8, 70u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod randomness_collective_flip {
        use super::root_mod;
        use super::runtime_types;
        pub mod storage {
            use super::runtime_types;
            pub mod types {
                use super::runtime_types;
                pub mod random_material {
                    use super::runtime_types;
                    pub type RandomMaterial =
                        runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            ::subxt::utils::H256,
                        >;
                }
            }
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " Series of block headers from the last 81 blocks that acts as random seed material. This"]
                #[doc = " is arranged as a ring buffer with `block_number % 81` being the index into the `Vec` of"]
                #[doc = " the oldest hash."]
                pub fn random_material(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::random_material::RandomMaterial,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "RandomnessCollectiveFlip",
                        "RandomMaterial",
                        vec![],
                        [
                            195u8, 232u8, 244u8, 162u8, 110u8, 137u8, 66u8, 57u8, 51u8, 221u8,
                            143u8, 38u8, 51u8, 183u8, 105u8, 245u8, 175u8, 13u8, 33u8, 192u8, 53u8,
                            16u8, 161u8, 76u8, 219u8, 177u8, 144u8, 192u8, 96u8, 166u8, 117u8,
                            247u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod timestamp {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
        pub type Call = runtime_types::pallet_timestamp::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Set the current time."]
                #[doc = ""]
                #[doc = "This call should be invoked exactly once per block. It will panic at the finalization"]
                #[doc = "phase, if this call hasn't been invoked by that time."]
                #[doc = ""]
                #[doc = "The timestamp should be greater than the previous one by the amount specified by"]
                #[doc = "`MinimumPeriod`."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be `Inherent`."]
                #[doc = ""]
                #[doc = "## Complexity"]
                #[doc = "- `O(1)` (Note that implementations of `OnTimestampSet` must also be `O(1)`)"]
                #[doc = "- 1 storage read and 1 storage mutation (codec `O(1)`). (because of `DidUpdate::take` in"]
                #[doc = "  `on_finalize`)"]
                #[doc = "- 1 event handler `on_timestamp_set`. Must be `O(1)`."]
                pub struct Set {
                    #[codec(compact)]
                    pub now: set::Now,
                }
                pub mod set {
                    use super::runtime_types;
                    pub type Now = ::core::primitive::u64;
                }
                impl ::subxt::blocks::StaticExtrinsic for Set {
                    const PALLET: &'static str = "Timestamp";
                    const CALL: &'static str = "set";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "Set the current time."]
                #[doc = ""]
                #[doc = "This call should be invoked exactly once per block. It will panic at the finalization"]
                #[doc = "phase, if this call hasn't been invoked by that time."]
                #[doc = ""]
                #[doc = "The timestamp should be greater than the previous one by the amount specified by"]
                #[doc = "`MinimumPeriod`."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be `Inherent`."]
                #[doc = ""]
                #[doc = "## Complexity"]
                #[doc = "- `O(1)` (Note that implementations of `OnTimestampSet` must also be `O(1)`)"]
                #[doc = "- 1 storage read and 1 storage mutation (codec `O(1)`). (because of `DidUpdate::take` in"]
                #[doc = "  `on_finalize`)"]
                #[doc = "- 1 event handler `on_timestamp_set`. Must be `O(1)`."]
                pub fn set(&self, now: types::set::Now) -> ::subxt::tx::Payload<types::Set> {
                    ::subxt::tx::Payload::new_static(
                        "Timestamp",
                        "set",
                        types::Set { now },
                        [
                            37u8, 95u8, 49u8, 218u8, 24u8, 22u8, 0u8, 95u8, 72u8, 35u8, 155u8,
                            199u8, 213u8, 54u8, 207u8, 22u8, 185u8, 193u8, 221u8, 70u8, 18u8,
                            200u8, 4u8, 231u8, 195u8, 173u8, 6u8, 122u8, 11u8, 203u8, 231u8, 227u8,
                        ],
                    )
                }
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub mod types {
                use super::runtime_types;
                pub mod now {
                    use super::runtime_types;
                    pub type Now = ::core::primitive::u64;
                }
                pub mod did_update {
                    use super::runtime_types;
                    pub type DidUpdate = ::core::primitive::bool;
                }
            }
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " Current time for the current block."]
                pub fn now(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::now::Now,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Timestamp",
                        "Now",
                        vec![],
                        [
                            44u8, 50u8, 80u8, 30u8, 195u8, 146u8, 123u8, 238u8, 8u8, 163u8, 187u8,
                            92u8, 61u8, 39u8, 51u8, 29u8, 173u8, 169u8, 217u8, 158u8, 85u8, 187u8,
                            141u8, 26u8, 12u8, 115u8, 51u8, 11u8, 200u8, 244u8, 138u8, 152u8,
                        ],
                    )
                }
                #[doc = " Did the timestamp get updated in this block?"]
                pub fn did_update(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::did_update::DidUpdate,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Timestamp",
                        "DidUpdate",
                        vec![],
                        [
                            229u8, 175u8, 246u8, 102u8, 237u8, 158u8, 212u8, 229u8, 238u8, 214u8,
                            205u8, 160u8, 164u8, 252u8, 195u8, 75u8, 139u8, 110u8, 22u8, 34u8,
                            248u8, 204u8, 107u8, 46u8, 20u8, 200u8, 238u8, 167u8, 71u8, 41u8,
                            214u8, 140u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " The minimum period between blocks. Beware that this is different to the *expected*"]
                #[doc = " period that the block production apparatus provides. Your chosen consensus system will"]
                #[doc = " generally work with this to determine a sensible block time. e.g. For Aura, it will be"]
                #[doc = " double this period on default settings."]
                pub fn minimum_period(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u64> {
                    ::subxt::constants::Address::new_static(
                        "Timestamp",
                        "MinimumPeriod",
                        [
                            128u8, 214u8, 205u8, 242u8, 181u8, 142u8, 124u8, 231u8, 190u8, 146u8,
                            59u8, 226u8, 157u8, 101u8, 103u8, 117u8, 249u8, 65u8, 18u8, 191u8,
                            103u8, 119u8, 53u8, 85u8, 81u8, 96u8, 220u8, 42u8, 184u8, 239u8, 42u8,
                            246u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod aura {
        use super::root_mod;
        use super::runtime_types;
        pub mod storage {
            use super::runtime_types;
            pub mod types {
                use super::runtime_types;
                pub mod authorities {
                    use super::runtime_types;
                    pub type Authorities =
                        runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            runtime_types::sp_consensus_aura::sr25519::app_sr25519::Public,
                        >;
                }
                pub mod current_slot {
                    use super::runtime_types;
                    pub type CurrentSlot = runtime_types::sp_consensus_slots::Slot;
                }
            }
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " The current authority set."]
                pub fn authorities(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::authorities::Authorities,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Aura",
                        "Authorities",
                        vec![],
                        [
                            232u8, 129u8, 167u8, 104u8, 47u8, 188u8, 238u8, 164u8, 6u8, 29u8,
                            129u8, 45u8, 64u8, 182u8, 194u8, 47u8, 0u8, 73u8, 63u8, 102u8, 204u8,
                            94u8, 111u8, 96u8, 137u8, 7u8, 141u8, 110u8, 180u8, 80u8, 228u8, 16u8,
                        ],
                    )
                }
                #[doc = " The current slot of this block."]
                #[doc = ""]
                #[doc = " This will be set in `on_initialize`."]
                pub fn current_slot(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::current_slot::CurrentSlot,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Aura",
                        "CurrentSlot",
                        vec![],
                        [
                            112u8, 199u8, 115u8, 248u8, 217u8, 242u8, 45u8, 231u8, 178u8, 53u8,
                            236u8, 167u8, 219u8, 238u8, 81u8, 243u8, 39u8, 140u8, 68u8, 19u8,
                            201u8, 169u8, 211u8, 133u8, 135u8, 213u8, 150u8, 105u8, 60u8, 252u8,
                            43u8, 57u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod grandpa {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
        pub type Error = runtime_types::pallet_grandpa::pallet::Error;
        #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
        pub type Call = runtime_types::pallet_grandpa::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Report voter equivocation/misbehavior. This method will verify the"]
                #[doc = "equivocation proof and validate the given key ownership proof"]
                #[doc = "against the extracted offender. If both are valid, the offence"]
                #[doc = "will be reported."]
                pub struct ReportEquivocation {
                    pub equivocation_proof:
                        ::std::boxed::Box<report_equivocation::EquivocationProof>,
                    pub key_owner_proof: report_equivocation::KeyOwnerProof,
                }
                pub mod report_equivocation {
                    use super::runtime_types;
                    pub type EquivocationProof =
                        runtime_types::sp_finality_grandpa::EquivocationProof<
                            ::subxt::utils::H256,
                            ::core::primitive::u32,
                        >;
                    pub type KeyOwnerProof = runtime_types::sp_core::Void;
                }
                impl ::subxt::blocks::StaticExtrinsic for ReportEquivocation {
                    const PALLET: &'static str = "Grandpa";
                    const CALL: &'static str = "report_equivocation";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Report voter equivocation/misbehavior. This method will verify the"]
                #[doc = "equivocation proof and validate the given key ownership proof"]
                #[doc = "against the extracted offender. If both are valid, the offence"]
                #[doc = "will be reported."]
                #[doc = ""]
                #[doc = "This extrinsic must be called unsigned and it is expected that only"]
                #[doc = "block authors will call it (validated in `ValidateUnsigned`), as such"]
                #[doc = "if the block author is defined it will be defined as the equivocation"]
                #[doc = "reporter."]
                pub struct ReportEquivocationUnsigned {
                    pub equivocation_proof:
                        ::std::boxed::Box<report_equivocation_unsigned::EquivocationProof>,
                    pub key_owner_proof: report_equivocation_unsigned::KeyOwnerProof,
                }
                pub mod report_equivocation_unsigned {
                    use super::runtime_types;
                    pub type EquivocationProof =
                        runtime_types::sp_finality_grandpa::EquivocationProof<
                            ::subxt::utils::H256,
                            ::core::primitive::u32,
                        >;
                    pub type KeyOwnerProof = runtime_types::sp_core::Void;
                }
                impl ::subxt::blocks::StaticExtrinsic for ReportEquivocationUnsigned {
                    const PALLET: &'static str = "Grandpa";
                    const CALL: &'static str = "report_equivocation_unsigned";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Note that the current authority set of the GRANDPA finality gadget has stalled."]
                #[doc = ""]
                #[doc = "This will trigger a forced authority set change at the beginning of the next session, to"]
                #[doc = "be enacted `delay` blocks after that. The `delay` should be high enough to safely assume"]
                #[doc = "that the block signalling the forced change will not be re-orged e.g. 1000 blocks."]
                #[doc = "The block production rate (which may be slowed down because of finality lagging) should"]
                #[doc = "be taken into account when choosing the `delay`. The GRANDPA voters based on the new"]
                #[doc = "authority will start voting on top of `best_finalized_block_number` for new finalized"]
                #[doc = "blocks. `best_finalized_block_number` should be the highest of the latest finalized"]
                #[doc = "block of all validators of the new authority set."]
                #[doc = ""]
                #[doc = "Only callable by root."]
                pub struct NoteStalled {
                    pub delay: note_stalled::Delay,
                    pub best_finalized_block_number: note_stalled::BestFinalizedBlockNumber,
                }
                pub mod note_stalled {
                    use super::runtime_types;
                    pub type Delay = ::core::primitive::u32;
                    pub type BestFinalizedBlockNumber = ::core::primitive::u32;
                }
                impl ::subxt::blocks::StaticExtrinsic for NoteStalled {
                    const PALLET: &'static str = "Grandpa";
                    const CALL: &'static str = "note_stalled";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "Report voter equivocation/misbehavior. This method will verify the"]
                #[doc = "equivocation proof and validate the given key ownership proof"]
                #[doc = "against the extracted offender. If both are valid, the offence"]
                #[doc = "will be reported."]
                pub fn report_equivocation(
                    &self,
                    equivocation_proof: types::report_equivocation::EquivocationProof,
                    key_owner_proof: types::report_equivocation::KeyOwnerProof,
                ) -> ::subxt::tx::Payload<types::ReportEquivocation> {
                    ::subxt::tx::Payload::new_static(
                        "Grandpa",
                        "report_equivocation",
                        types::ReportEquivocation {
                            equivocation_proof: ::std::boxed::Box::new(equivocation_proof),
                            key_owner_proof,
                        },
                        [
                            158u8, 70u8, 189u8, 51u8, 231u8, 191u8, 199u8, 33u8, 64u8, 156u8, 71u8,
                            243u8, 122u8, 199u8, 216u8, 10u8, 45u8, 73u8, 198u8, 141u8, 31u8,
                            209u8, 58u8, 164u8, 219u8, 124u8, 242u8, 26u8, 114u8, 52u8, 65u8,
                            106u8,
                        ],
                    )
                }
                #[doc = "Report voter equivocation/misbehavior. This method will verify the"]
                #[doc = "equivocation proof and validate the given key ownership proof"]
                #[doc = "against the extracted offender. If both are valid, the offence"]
                #[doc = "will be reported."]
                #[doc = ""]
                #[doc = "This extrinsic must be called unsigned and it is expected that only"]
                #[doc = "block authors will call it (validated in `ValidateUnsigned`), as such"]
                #[doc = "if the block author is defined it will be defined as the equivocation"]
                #[doc = "reporter."]
                pub fn report_equivocation_unsigned(
                    &self,
                    equivocation_proof: types::report_equivocation_unsigned::EquivocationProof,
                    key_owner_proof: types::report_equivocation_unsigned::KeyOwnerProof,
                ) -> ::subxt::tx::Payload<types::ReportEquivocationUnsigned> {
                    ::subxt::tx::Payload::new_static(
                        "Grandpa",
                        "report_equivocation_unsigned",
                        types::ReportEquivocationUnsigned {
                            equivocation_proof: ::std::boxed::Box::new(equivocation_proof),
                            key_owner_proof,
                        },
                        [
                            53u8, 23u8, 255u8, 215u8, 105u8, 11u8, 67u8, 177u8, 234u8, 248u8,
                            183u8, 57u8, 230u8, 239u8, 54u8, 238u8, 115u8, 170u8, 153u8, 18u8,
                            55u8, 195u8, 85u8, 98u8, 109u8, 194u8, 57u8, 225u8, 139u8, 237u8,
                            171u8, 152u8,
                        ],
                    )
                }
                #[doc = "Note that the current authority set of the GRANDPA finality gadget has stalled."]
                #[doc = ""]
                #[doc = "This will trigger a forced authority set change at the beginning of the next session, to"]
                #[doc = "be enacted `delay` blocks after that. The `delay` should be high enough to safely assume"]
                #[doc = "that the block signalling the forced change will not be re-orged e.g. 1000 blocks."]
                #[doc = "The block production rate (which may be slowed down because of finality lagging) should"]
                #[doc = "be taken into account when choosing the `delay`. The GRANDPA voters based on the new"]
                #[doc = "authority will start voting on top of `best_finalized_block_number` for new finalized"]
                #[doc = "blocks. `best_finalized_block_number` should be the highest of the latest finalized"]
                #[doc = "block of all validators of the new authority set."]
                #[doc = ""]
                #[doc = "Only callable by root."]
                pub fn note_stalled(
                    &self,
                    delay: types::note_stalled::Delay,
                    best_finalized_block_number: types::note_stalled::BestFinalizedBlockNumber,
                ) -> ::subxt::tx::Payload<types::NoteStalled> {
                    ::subxt::tx::Payload::new_static(
                        "Grandpa",
                        "note_stalled",
                        types::NoteStalled {
                            delay,
                            best_finalized_block_number,
                        },
                        [
                            158u8, 25u8, 64u8, 114u8, 131u8, 139u8, 227u8, 132u8, 42u8, 107u8,
                            40u8, 249u8, 18u8, 93u8, 254u8, 86u8, 37u8, 67u8, 250u8, 35u8, 241u8,
                            194u8, 209u8, 20u8, 39u8, 75u8, 186u8, 21u8, 48u8, 124u8, 151u8, 31u8,
                        ],
                    )
                }
            }
        }
        #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
        pub type Event = runtime_types::pallet_grandpa::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "New authority set has been applied."]
            pub struct NewAuthorities {
                pub authority_set: new_authorities::AuthoritySet,
            }
            pub mod new_authorities {
                use super::runtime_types;
                pub type AuthoritySet = ::std::vec::Vec<(
                    runtime_types::sp_finality_grandpa::app::Public,
                    ::core::primitive::u64,
                )>;
            }
            impl ::subxt::events::StaticEvent for NewAuthorities {
                const PALLET: &'static str = "Grandpa";
                const EVENT: &'static str = "NewAuthorities";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Current authority set has been paused."]
            pub struct Paused;
            impl ::subxt::events::StaticEvent for Paused {
                const PALLET: &'static str = "Grandpa";
                const EVENT: &'static str = "Paused";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Current authority set has been resumed."]
            pub struct Resumed;
            impl ::subxt::events::StaticEvent for Resumed {
                const PALLET: &'static str = "Grandpa";
                const EVENT: &'static str = "Resumed";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub mod types {
                use super::runtime_types;
                pub mod state {
                    use super::runtime_types;
                    pub type State =
                        runtime_types::pallet_grandpa::StoredState<::core::primitive::u32>;
                }
                pub mod pending_change {
                    use super::runtime_types;
                    pub type PendingChange =
                        runtime_types::pallet_grandpa::StoredPendingChange<::core::primitive::u32>;
                }
                pub mod next_forced {
                    use super::runtime_types;
                    pub type NextForced = ::core::primitive::u32;
                }
                pub mod stalled {
                    use super::runtime_types;
                    pub type Stalled = (::core::primitive::u32, ::core::primitive::u32);
                }
                pub mod current_set_id {
                    use super::runtime_types;
                    pub type CurrentSetId = ::core::primitive::u64;
                }
                pub mod set_id_session {
                    use super::runtime_types;
                    pub type SetIdSession = ::core::primitive::u32;
                    pub type Param0 = ::core::primitive::u64;
                }
            }
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " State of the current authority set."]
                pub fn state(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::state::State,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Grandpa",
                        "State",
                        vec![],
                        [
                            73u8, 71u8, 112u8, 83u8, 238u8, 75u8, 44u8, 9u8, 180u8, 33u8, 30u8,
                            121u8, 98u8, 96u8, 61u8, 133u8, 16u8, 70u8, 30u8, 249u8, 34u8, 148u8,
                            15u8, 239u8, 164u8, 157u8, 52u8, 27u8, 144u8, 52u8, 223u8, 109u8,
                        ],
                    )
                }
                #[doc = " Pending change: (signaled at, scheduled change)."]
                pub fn pending_change(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::pending_change::PendingChange,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Grandpa",
                        "PendingChange",
                        vec![],
                        [
                            150u8, 194u8, 185u8, 248u8, 239u8, 43u8, 141u8, 253u8, 61u8, 106u8,
                            74u8, 164u8, 209u8, 204u8, 206u8, 200u8, 32u8, 38u8, 11u8, 78u8, 84u8,
                            243u8, 181u8, 142u8, 179u8, 151u8, 81u8, 204u8, 244u8, 150u8, 137u8,
                            250u8,
                        ],
                    )
                }
                #[doc = " next block number where we can force a change."]
                pub fn next_forced(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::next_forced::NextForced,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Grandpa",
                        "NextForced",
                        vec![],
                        [
                            3u8, 231u8, 56u8, 18u8, 87u8, 112u8, 227u8, 126u8, 180u8, 131u8, 255u8,
                            141u8, 82u8, 34u8, 61u8, 47u8, 234u8, 37u8, 95u8, 62u8, 33u8, 235u8,
                            231u8, 122u8, 125u8, 8u8, 223u8, 95u8, 255u8, 204u8, 40u8, 97u8,
                        ],
                    )
                }
                #[doc = " `true` if we are currently stalled."]
                pub fn stalled(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::stalled::Stalled,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Grandpa",
                        "Stalled",
                        vec![],
                        [
                            6u8, 81u8, 205u8, 142u8, 195u8, 48u8, 0u8, 247u8, 108u8, 170u8, 10u8,
                            249u8, 72u8, 206u8, 32u8, 103u8, 109u8, 57u8, 51u8, 21u8, 144u8, 204u8,
                            79u8, 8u8, 191u8, 185u8, 38u8, 34u8, 118u8, 223u8, 75u8, 241u8,
                        ],
                    )
                }
                #[doc = " The number of changes (both in terms of keys and underlying economic responsibilities)"]
                #[doc = " in the \"set\" of Grandpa validators from genesis."]
                pub fn current_set_id(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::current_set_id::CurrentSetId,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Grandpa",
                        "CurrentSetId",
                        vec![],
                        [
                            234u8, 215u8, 218u8, 42u8, 30u8, 76u8, 129u8, 40u8, 125u8, 137u8,
                            207u8, 47u8, 46u8, 213u8, 159u8, 50u8, 175u8, 81u8, 155u8, 123u8,
                            246u8, 175u8, 156u8, 68u8, 22u8, 113u8, 135u8, 137u8, 163u8, 18u8,
                            115u8, 73u8,
                        ],
                    )
                }
                #[doc = " A mapping from grandpa set ID to the index of the *most recent* session for which its"]
                #[doc = " members were responsible."]
                #[doc = ""]
                #[doc = " This is only used for validating equivocation proofs. An equivocation proof must"]
                #[doc = " contains a key-ownership proof for a given session, therefore we need a way to tie"]
                #[doc = " together sessions and GRANDPA set ids, i.e. we need to validate that a validator"]
                #[doc = " was the owner of a given key on a given session, and what the active set ID was"]
                #[doc = " during that session."]
                #[doc = ""]
                #[doc = " TWOX-NOTE: `SetId` is not under user control."]
                pub fn set_id_session_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::set_id_session::SetIdSession,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Grandpa",
                        "SetIdSession",
                        vec![],
                        [
                            47u8, 0u8, 239u8, 121u8, 187u8, 213u8, 254u8, 50u8, 238u8, 10u8, 162u8,
                            65u8, 189u8, 166u8, 37u8, 74u8, 82u8, 81u8, 160u8, 20u8, 180u8, 253u8,
                            238u8, 18u8, 209u8, 203u8, 38u8, 148u8, 16u8, 105u8, 72u8, 169u8,
                        ],
                    )
                }
                #[doc = " A mapping from grandpa set ID to the index of the *most recent* session for which its"]
                #[doc = " members were responsible."]
                #[doc = ""]
                #[doc = " This is only used for validating equivocation proofs. An equivocation proof must"]
                #[doc = " contains a key-ownership proof for a given session, therefore we need a way to tie"]
                #[doc = " together sessions and GRANDPA set ids, i.e. we need to validate that a validator"]
                #[doc = " was the owner of a given key on a given session, and what the active set ID was"]
                #[doc = " during that session."]
                #[doc = ""]
                #[doc = " TWOX-NOTE: `SetId` is not under user control."]
                pub fn set_id_session(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::set_id_session::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::set_id_session::SetIdSession,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Grandpa",
                        "SetIdSession",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            47u8, 0u8, 239u8, 121u8, 187u8, 213u8, 254u8, 50u8, 238u8, 10u8, 162u8,
                            65u8, 189u8, 166u8, 37u8, 74u8, 82u8, 81u8, 160u8, 20u8, 180u8, 253u8,
                            238u8, 18u8, 209u8, 203u8, 38u8, 148u8, 16u8, 105u8, 72u8, 169u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " Max Authorities in use"]
                pub fn max_authorities(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Grandpa",
                        "MaxAuthorities",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " The maximum number of entries to keep in the set id to session index mapping."]
                #[doc = ""]
                #[doc = " Since the `SetIdSession` map is only used for validating equivocations this"]
                #[doc = " value should relate to the bonding duration of whatever staking system is"]
                #[doc = " being used (if any). If equivocation handling is not enabled then this value"]
                #[doc = " can be zero."]
                pub fn max_set_id_session_entries(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u64> {
                    ::subxt::constants::Address::new_static(
                        "Grandpa",
                        "MaxSetIdSessionEntries",
                        [
                            128u8, 214u8, 205u8, 242u8, 181u8, 142u8, 124u8, 231u8, 190u8, 146u8,
                            59u8, 226u8, 157u8, 101u8, 103u8, 117u8, 249u8, 65u8, 18u8, 191u8,
                            103u8, 119u8, 53u8, 85u8, 81u8, 96u8, 220u8, 42u8, 184u8, 239u8, 42u8,
                            246u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod balances {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
        pub type Error = runtime_types::pallet_balances::pallet::Error;
        #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
        pub type Call = runtime_types::pallet_balances::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Transfer some liquid free balance to another account."]
                #[doc = ""]
                #[doc = "`transfer` will set the `FreeBalance` of the sender and receiver."]
                #[doc = "If the sender's account is below the existential deposit as a result"]
                #[doc = "of the transfer, the account will be reaped."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be `Signed` by the transactor."]
                #[doc = ""]
                #[doc = "## Complexity"]
                #[doc = "- Dependent on arguments but not critical, given proper implementations for input config"]
                #[doc = "  types. See related functions below."]
                #[doc = "- It contains a limited number of reads and writes internally and no complex"]
                #[doc = "  computation."]
                #[doc = ""]
                #[doc = "Related functions:"]
                #[doc = ""]
                #[doc = "  - `ensure_can_withdraw` is always called internally but has a bounded complexity."]
                #[doc = "  - Transferring balances to accounts that did not exist before will cause"]
                #[doc = "    `T::OnNewAccount::on_new_account` to be called."]
                #[doc = "  - Removing enough funds from an account will trigger `T::DustRemoval::on_unbalanced`."]
                #[doc = "  - `transfer_keep_alive` works the same way as `transfer`, but has an additional check"]
                #[doc = "    that the transfer will not kill the origin account."]
                pub struct Transfer {
                    pub dest: transfer::Dest,
                    #[codec(compact)]
                    pub value: transfer::Value,
                }
                pub mod transfer {
                    use super::runtime_types;
                    pub type Dest = ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>;
                    pub type Value = ::core::primitive::u64;
                }
                impl ::subxt::blocks::StaticExtrinsic for Transfer {
                    const PALLET: &'static str = "Balances";
                    const CALL: &'static str = "transfer";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Set the balances of a given account."]
                #[doc = ""]
                #[doc = "This will alter `FreeBalance` and `ReservedBalance` in storage. it will"]
                #[doc = "also alter the total issuance of the system (`TotalIssuance`) appropriately."]
                #[doc = "If the new free or reserved balance is below the existential deposit,"]
                #[doc = "it will reset the account nonce (`frame_system::AccountNonce`)."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call is `root`."]
                pub struct SetBalance {
                    pub who: set_balance::Who,
                    #[codec(compact)]
                    pub new_free: set_balance::NewFree,
                    #[codec(compact)]
                    pub new_reserved: set_balance::NewReserved,
                }
                pub mod set_balance {
                    use super::runtime_types;
                    pub type Who = ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>;
                    pub type NewFree = ::core::primitive::u64;
                    pub type NewReserved = ::core::primitive::u64;
                }
                impl ::subxt::blocks::StaticExtrinsic for SetBalance {
                    const PALLET: &'static str = "Balances";
                    const CALL: &'static str = "set_balance";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Exactly as `transfer`, except the origin must be root and the source account may be"]
                #[doc = "specified."]
                #[doc = "## Complexity"]
                #[doc = "- Same as transfer, but additional read and write because the source account is not"]
                #[doc = "  assumed to be in the overlay."]
                pub struct ForceTransfer {
                    pub source: force_transfer::Source,
                    pub dest: force_transfer::Dest,
                    #[codec(compact)]
                    pub value: force_transfer::Value,
                }
                pub mod force_transfer {
                    use super::runtime_types;
                    pub type Source = ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>;
                    pub type Dest = ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>;
                    pub type Value = ::core::primitive::u64;
                }
                impl ::subxt::blocks::StaticExtrinsic for ForceTransfer {
                    const PALLET: &'static str = "Balances";
                    const CALL: &'static str = "force_transfer";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Same as the [`transfer`] call, but with a check that the transfer will not kill the"]
                #[doc = "origin account."]
                #[doc = ""]
                #[doc = "99% of the time you want [`transfer`] instead."]
                #[doc = ""]
                #[doc = "[`transfer`]: struct.Pallet.html#method.transfer"]
                pub struct TransferKeepAlive {
                    pub dest: transfer_keep_alive::Dest,
                    #[codec(compact)]
                    pub value: transfer_keep_alive::Value,
                }
                pub mod transfer_keep_alive {
                    use super::runtime_types;
                    pub type Dest = ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>;
                    pub type Value = ::core::primitive::u64;
                }
                impl ::subxt::blocks::StaticExtrinsic for TransferKeepAlive {
                    const PALLET: &'static str = "Balances";
                    const CALL: &'static str = "transfer_keep_alive";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Transfer the entire transferable balance from the caller account."]
                #[doc = ""]
                #[doc = "NOTE: This function only attempts to transfer _transferable_ balances. This means that"]
                #[doc = "any locked, reserved, or existential deposits (when `keep_alive` is `true`), will not be"]
                #[doc = "transferred by this function. To ensure that this function results in a killed account,"]
                #[doc = "you might need to prepare the account by removing any reference counters, storage"]
                #[doc = "deposits, etc..."]
                #[doc = ""]
                #[doc = "The dispatch origin of this call must be Signed."]
                #[doc = ""]
                #[doc = "- `dest`: The recipient of the transfer."]
                #[doc = "- `keep_alive`: A boolean to determine if the `transfer_all` operation should send all"]
                #[doc = "  of the funds the account has, causing the sender account to be killed (false), or"]
                #[doc = "  transfer everything except at least the existential deposit, which will guarantee to"]
                #[doc = "  keep the sender account alive (true). ## Complexity"]
                #[doc = "- O(1). Just like transfer, but reading the user's transferable balance first."]
                pub struct TransferAll {
                    pub dest: transfer_all::Dest,
                    pub keep_alive: transfer_all::KeepAlive,
                }
                pub mod transfer_all {
                    use super::runtime_types;
                    pub type Dest = ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>;
                    pub type KeepAlive = ::core::primitive::bool;
                }
                impl ::subxt::blocks::StaticExtrinsic for TransferAll {
                    const PALLET: &'static str = "Balances";
                    const CALL: &'static str = "transfer_all";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Unreserve some balance from a user by force."]
                #[doc = ""]
                #[doc = "Can only be called by ROOT."]
                pub struct ForceUnreserve {
                    pub who: force_unreserve::Who,
                    pub amount: force_unreserve::Amount,
                }
                pub mod force_unreserve {
                    use super::runtime_types;
                    pub type Who = ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>;
                    pub type Amount = ::core::primitive::u64;
                }
                impl ::subxt::blocks::StaticExtrinsic for ForceUnreserve {
                    const PALLET: &'static str = "Balances";
                    const CALL: &'static str = "force_unreserve";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "Transfer some liquid free balance to another account."]
                #[doc = ""]
                #[doc = "`transfer` will set the `FreeBalance` of the sender and receiver."]
                #[doc = "If the sender's account is below the existential deposit as a result"]
                #[doc = "of the transfer, the account will be reaped."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be `Signed` by the transactor."]
                #[doc = ""]
                #[doc = "## Complexity"]
                #[doc = "- Dependent on arguments but not critical, given proper implementations for input config"]
                #[doc = "  types. See related functions below."]
                #[doc = "- It contains a limited number of reads and writes internally and no complex"]
                #[doc = "  computation."]
                #[doc = ""]
                #[doc = "Related functions:"]
                #[doc = ""]
                #[doc = "  - `ensure_can_withdraw` is always called internally but has a bounded complexity."]
                #[doc = "  - Transferring balances to accounts that did not exist before will cause"]
                #[doc = "    `T::OnNewAccount::on_new_account` to be called."]
                #[doc = "  - Removing enough funds from an account will trigger `T::DustRemoval::on_unbalanced`."]
                #[doc = "  - `transfer_keep_alive` works the same way as `transfer`, but has an additional check"]
                #[doc = "    that the transfer will not kill the origin account."]
                pub fn transfer(
                    &self,
                    dest: types::transfer::Dest,
                    value: types::transfer::Value,
                ) -> ::subxt::tx::Payload<types::Transfer> {
                    ::subxt::tx::Payload::new_static(
                        "Balances",
                        "transfer",
                        types::Transfer { dest, value },
                        [
                            218u8, 14u8, 230u8, 81u8, 142u8, 212u8, 158u8, 34u8, 26u8, 9u8, 232u8,
                            12u8, 87u8, 1u8, 112u8, 102u8, 37u8, 228u8, 243u8, 203u8, 222u8, 76u8,
                            66u8, 75u8, 19u8, 19u8, 28u8, 89u8, 222u8, 98u8, 78u8, 123u8,
                        ],
                    )
                }
                #[doc = "Set the balances of a given account."]
                #[doc = ""]
                #[doc = "This will alter `FreeBalance` and `ReservedBalance` in storage. it will"]
                #[doc = "also alter the total issuance of the system (`TotalIssuance`) appropriately."]
                #[doc = "If the new free or reserved balance is below the existential deposit,"]
                #[doc = "it will reset the account nonce (`frame_system::AccountNonce`)."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call is `root`."]
                pub fn set_balance(
                    &self,
                    who: types::set_balance::Who,
                    new_free: types::set_balance::NewFree,
                    new_reserved: types::set_balance::NewReserved,
                ) -> ::subxt::tx::Payload<types::SetBalance> {
                    ::subxt::tx::Payload::new_static(
                        "Balances",
                        "set_balance",
                        types::SetBalance {
                            who,
                            new_free,
                            new_reserved,
                        },
                        [
                            15u8, 172u8, 73u8, 0u8, 177u8, 60u8, 168u8, 143u8, 249u8, 92u8, 243u8,
                            1u8, 172u8, 0u8, 240u8, 199u8, 201u8, 188u8, 59u8, 124u8, 117u8, 169u8,
                            154u8, 55u8, 84u8, 140u8, 179u8, 41u8, 228u8, 73u8, 107u8, 131u8,
                        ],
                    )
                }
                #[doc = "Exactly as `transfer`, except the origin must be root and the source account may be"]
                #[doc = "specified."]
                #[doc = "## Complexity"]
                #[doc = "- Same as transfer, but additional read and write because the source account is not"]
                #[doc = "  assumed to be in the overlay."]
                pub fn force_transfer(
                    &self,
                    source: types::force_transfer::Source,
                    dest: types::force_transfer::Dest,
                    value: types::force_transfer::Value,
                ) -> ::subxt::tx::Payload<types::ForceTransfer> {
                    ::subxt::tx::Payload::new_static(
                        "Balances",
                        "force_transfer",
                        types::ForceTransfer {
                            source,
                            dest,
                            value,
                        },
                        [
                            15u8, 9u8, 232u8, 170u8, 117u8, 161u8, 184u8, 255u8, 3u8, 155u8, 165u8,
                            226u8, 151u8, 189u8, 226u8, 21u8, 14u8, 70u8, 17u8, 43u8, 181u8, 59u8,
                            158u8, 222u8, 167u8, 59u8, 61u8, 233u8, 78u8, 108u8, 161u8, 192u8,
                        ],
                    )
                }
                #[doc = "Same as the [`transfer`] call, but with a check that the transfer will not kill the"]
                #[doc = "origin account."]
                #[doc = ""]
                #[doc = "99% of the time you want [`transfer`] instead."]
                #[doc = ""]
                #[doc = "[`transfer`]: struct.Pallet.html#method.transfer"]
                pub fn transfer_keep_alive(
                    &self,
                    dest: types::transfer_keep_alive::Dest,
                    value: types::transfer_keep_alive::Value,
                ) -> ::subxt::tx::Payload<types::TransferKeepAlive> {
                    ::subxt::tx::Payload::new_static(
                        "Balances",
                        "transfer_keep_alive",
                        types::TransferKeepAlive { dest, value },
                        [
                            126u8, 208u8, 16u8, 244u8, 94u8, 74u8, 166u8, 13u8, 149u8, 95u8, 88u8,
                            250u8, 95u8, 0u8, 43u8, 57u8, 18u8, 129u8, 24u8, 210u8, 91u8, 50u8,
                            251u8, 73u8, 126u8, 218u8, 244u8, 52u8, 36u8, 175u8, 28u8, 210u8,
                        ],
                    )
                }
                #[doc = "Transfer the entire transferable balance from the caller account."]
                #[doc = ""]
                #[doc = "NOTE: This function only attempts to transfer _transferable_ balances. This means that"]
                #[doc = "any locked, reserved, or existential deposits (when `keep_alive` is `true`), will not be"]
                #[doc = "transferred by this function. To ensure that this function results in a killed account,"]
                #[doc = "you might need to prepare the account by removing any reference counters, storage"]
                #[doc = "deposits, etc..."]
                #[doc = ""]
                #[doc = "The dispatch origin of this call must be Signed."]
                #[doc = ""]
                #[doc = "- `dest`: The recipient of the transfer."]
                #[doc = "- `keep_alive`: A boolean to determine if the `transfer_all` operation should send all"]
                #[doc = "  of the funds the account has, causing the sender account to be killed (false), or"]
                #[doc = "  transfer everything except at least the existential deposit, which will guarantee to"]
                #[doc = "  keep the sender account alive (true). ## Complexity"]
                #[doc = "- O(1). Just like transfer, but reading the user's transferable balance first."]
                pub fn transfer_all(
                    &self,
                    dest: types::transfer_all::Dest,
                    keep_alive: types::transfer_all::KeepAlive,
                ) -> ::subxt::tx::Payload<types::TransferAll> {
                    ::subxt::tx::Payload::new_static(
                        "Balances",
                        "transfer_all",
                        types::TransferAll { dest, keep_alive },
                        [
                            105u8, 132u8, 49u8, 144u8, 195u8, 250u8, 34u8, 46u8, 213u8, 248u8,
                            112u8, 188u8, 81u8, 228u8, 136u8, 18u8, 67u8, 172u8, 37u8, 38u8, 238u8,
                            9u8, 34u8, 15u8, 67u8, 34u8, 148u8, 195u8, 223u8, 29u8, 154u8, 6u8,
                        ],
                    )
                }
                #[doc = "Unreserve some balance from a user by force."]
                #[doc = ""]
                #[doc = "Can only be called by ROOT."]
                pub fn force_unreserve(
                    &self,
                    who: types::force_unreserve::Who,
                    amount: types::force_unreserve::Amount,
                ) -> ::subxt::tx::Payload<types::ForceUnreserve> {
                    ::subxt::tx::Payload::new_static(
                        "Balances",
                        "force_unreserve",
                        types::ForceUnreserve { who, amount },
                        [
                            194u8, 160u8, 176u8, 186u8, 10u8, 132u8, 201u8, 232u8, 127u8, 9u8,
                            234u8, 37u8, 167u8, 77u8, 157u8, 228u8, 62u8, 207u8, 172u8, 240u8, 1u8,
                            10u8, 136u8, 97u8, 115u8, 13u8, 2u8, 61u8, 200u8, 235u8, 39u8, 97u8,
                        ],
                    )
                }
            }
        }
        #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
        pub type Event = runtime_types::pallet_balances::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "An account was created with some free balance."]
            pub struct Endowed {
                pub account: endowed::Account,
                pub free_balance: endowed::FreeBalance,
            }
            pub mod endowed {
                use super::runtime_types;
                pub type Account = ::subxt::utils::AccountId32;
                pub type FreeBalance = ::core::primitive::u64;
            }
            impl ::subxt::events::StaticEvent for Endowed {
                const PALLET: &'static str = "Balances";
                const EVENT: &'static str = "Endowed";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "An account was removed whose balance was non-zero but below ExistentialDeposit,"]
            #[doc = "resulting in an outright loss."]
            pub struct DustLost {
                pub account: dust_lost::Account,
                pub amount: dust_lost::Amount,
            }
            pub mod dust_lost {
                use super::runtime_types;
                pub type Account = ::subxt::utils::AccountId32;
                pub type Amount = ::core::primitive::u64;
            }
            impl ::subxt::events::StaticEvent for DustLost {
                const PALLET: &'static str = "Balances";
                const EVENT: &'static str = "DustLost";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Transfer succeeded."]
            pub struct Transfer {
                pub from: transfer::From,
                pub to: transfer::To,
                pub amount: transfer::Amount,
            }
            pub mod transfer {
                use super::runtime_types;
                pub type From = ::subxt::utils::AccountId32;
                pub type To = ::subxt::utils::AccountId32;
                pub type Amount = ::core::primitive::u64;
            }
            impl ::subxt::events::StaticEvent for Transfer {
                const PALLET: &'static str = "Balances";
                const EVENT: &'static str = "Transfer";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A balance was set by root."]
            pub struct BalanceSet {
                pub who: balance_set::Who,
                pub free: balance_set::Free,
                pub reserved: balance_set::Reserved,
            }
            pub mod balance_set {
                use super::runtime_types;
                pub type Who = ::subxt::utils::AccountId32;
                pub type Free = ::core::primitive::u64;
                pub type Reserved = ::core::primitive::u64;
            }
            impl ::subxt::events::StaticEvent for BalanceSet {
                const PALLET: &'static str = "Balances";
                const EVENT: &'static str = "BalanceSet";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Some balance was reserved (moved from free to reserved)."]
            pub struct Reserved {
                pub who: reserved::Who,
                pub amount: reserved::Amount,
            }
            pub mod reserved {
                use super::runtime_types;
                pub type Who = ::subxt::utils::AccountId32;
                pub type Amount = ::core::primitive::u64;
            }
            impl ::subxt::events::StaticEvent for Reserved {
                const PALLET: &'static str = "Balances";
                const EVENT: &'static str = "Reserved";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Some balance was unreserved (moved from reserved to free)."]
            pub struct Unreserved {
                pub who: unreserved::Who,
                pub amount: unreserved::Amount,
            }
            pub mod unreserved {
                use super::runtime_types;
                pub type Who = ::subxt::utils::AccountId32;
                pub type Amount = ::core::primitive::u64;
            }
            impl ::subxt::events::StaticEvent for Unreserved {
                const PALLET: &'static str = "Balances";
                const EVENT: &'static str = "Unreserved";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Some balance was moved from the reserve of the first account to the second account."]
            #[doc = "Final argument indicates the destination balance type."]
            pub struct ReserveRepatriated {
                pub from: reserve_repatriated::From,
                pub to: reserve_repatriated::To,
                pub amount: reserve_repatriated::Amount,
                pub destination_status: reserve_repatriated::DestinationStatus,
            }
            pub mod reserve_repatriated {
                use super::runtime_types;
                pub type From = ::subxt::utils::AccountId32;
                pub type To = ::subxt::utils::AccountId32;
                pub type Amount = ::core::primitive::u64;
                pub type DestinationStatus =
                    runtime_types::frame_support::traits::tokens::misc::BalanceStatus;
            }
            impl ::subxt::events::StaticEvent for ReserveRepatriated {
                const PALLET: &'static str = "Balances";
                const EVENT: &'static str = "ReserveRepatriated";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Some amount was deposited (e.g. for transaction fees)."]
            pub struct Deposit {
                pub who: deposit::Who,
                pub amount: deposit::Amount,
            }
            pub mod deposit {
                use super::runtime_types;
                pub type Who = ::subxt::utils::AccountId32;
                pub type Amount = ::core::primitive::u64;
            }
            impl ::subxt::events::StaticEvent for Deposit {
                const PALLET: &'static str = "Balances";
                const EVENT: &'static str = "Deposit";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Some amount was withdrawn from the account (e.g. for transaction fees)."]
            pub struct Withdraw {
                pub who: withdraw::Who,
                pub amount: withdraw::Amount,
            }
            pub mod withdraw {
                use super::runtime_types;
                pub type Who = ::subxt::utils::AccountId32;
                pub type Amount = ::core::primitive::u64;
            }
            impl ::subxt::events::StaticEvent for Withdraw {
                const PALLET: &'static str = "Balances";
                const EVENT: &'static str = "Withdraw";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Some amount was removed from the account (e.g. for misbehavior)."]
            pub struct Slashed {
                pub who: slashed::Who,
                pub amount: slashed::Amount,
            }
            pub mod slashed {
                use super::runtime_types;
                pub type Who = ::subxt::utils::AccountId32;
                pub type Amount = ::core::primitive::u64;
            }
            impl ::subxt::events::StaticEvent for Slashed {
                const PALLET: &'static str = "Balances";
                const EVENT: &'static str = "Slashed";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub mod types {
                use super::runtime_types;
                pub mod total_issuance {
                    use super::runtime_types;
                    pub type TotalIssuance = ::core::primitive::u64;
                }
                pub mod inactive_issuance {
                    use super::runtime_types;
                    pub type InactiveIssuance = ::core::primitive::u64;
                }
                pub mod account {
                    use super::runtime_types;
                    pub type Account =
                        runtime_types::pallet_balances::AccountData<::core::primitive::u64>;
                    pub type Param0 = ::subxt::utils::AccountId32;
                }
                pub mod locks {
                    use super::runtime_types;
                    pub type Locks =
                        runtime_types::bounded_collections::weak_bounded_vec::WeakBoundedVec<
                            runtime_types::pallet_balances::BalanceLock<::core::primitive::u64>,
                        >;
                    pub type Param0 = ::subxt::utils::AccountId32;
                }
                pub mod reserves {
                    use super::runtime_types;
                    pub type Reserves = runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        runtime_types::pallet_balances::ReserveData<
                            [::core::primitive::u8; 8usize],
                            ::core::primitive::u64,
                        >,
                    >;
                    pub type Param0 = ::subxt::utils::AccountId32;
                }
            }
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " The total units issued in the system."]
                pub fn total_issuance(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::total_issuance::TotalIssuance,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Balances",
                        "TotalIssuance",
                        vec![],
                        [
                            157u8, 166u8, 49u8, 95u8, 245u8, 38u8, 96u8, 83u8, 23u8, 203u8, 246u8,
                            208u8, 251u8, 175u8, 40u8, 92u8, 163u8, 112u8, 43u8, 190u8, 14u8,
                            128u8, 45u8, 22u8, 157u8, 205u8, 181u8, 84u8, 79u8, 132u8, 160u8,
                            149u8,
                        ],
                    )
                }
                #[doc = " The total units of outstanding deactivated balance in the system."]
                pub fn inactive_issuance(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::inactive_issuance::InactiveIssuance,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Balances",
                        "InactiveIssuance",
                        vec![],
                        [
                            33u8, 251u8, 197u8, 148u8, 61u8, 202u8, 85u8, 164u8, 169u8, 36u8,
                            163u8, 147u8, 243u8, 250u8, 178u8, 40u8, 199u8, 147u8, 196u8, 206u8,
                            163u8, 246u8, 154u8, 51u8, 208u8, 250u8, 127u8, 89u8, 118u8, 21u8,
                            225u8, 248u8,
                        ],
                    )
                }
                #[doc = " The Balances pallet example of storing the balance of an account."]
                #[doc = ""]
                #[doc = " # Example"]
                #[doc = ""]
                #[doc = " ```nocompile"]
                #[doc = "  impl pallet_balances::Config for Runtime {"]
                #[doc = "    type AccountStore = StorageMapShim<Self::Account<Runtime>, frame_system::Provider<Runtime>, AccountId, Self::AccountData<Balance>>"]
                #[doc = "  }"]
                #[doc = " ```"]
                #[doc = ""]
                #[doc = " You can also store the balance of an account in the `System` pallet."]
                #[doc = ""]
                #[doc = " # Example"]
                #[doc = ""]
                #[doc = " ```nocompile"]
                #[doc = "  impl pallet_balances::Config for Runtime {"]
                #[doc = "   type AccountStore = System"]
                #[doc = "  }"]
                #[doc = " ```"]
                #[doc = ""]
                #[doc = " But this comes with tradeoffs, storing account balances in the system pallet stores"]
                #[doc = " `frame_system` data alongside the account data contrary to storing account balances in the"]
                #[doc = " `Balances` pallet, which uses a `StorageMap` to store balances data only."]
                #[doc = " NOTE: This is only used in the case that this pallet is used to store balances."]
                pub fn account_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::account::Account,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Balances",
                        "Account",
                        vec![],
                        [
                            123u8, 179u8, 87u8, 235u8, 195u8, 64u8, 37u8, 194u8, 88u8, 157u8,
                            119u8, 239u8, 106u8, 37u8, 213u8, 178u8, 54u8, 89u8, 213u8, 3u8, 202u8,
                            209u8, 28u8, 243u8, 232u8, 80u8, 101u8, 24u8, 39u8, 243u8, 164u8,
                            120u8,
                        ],
                    )
                }
                #[doc = " The Balances pallet example of storing the balance of an account."]
                #[doc = ""]
                #[doc = " # Example"]
                #[doc = ""]
                #[doc = " ```nocompile"]
                #[doc = "  impl pallet_balances::Config for Runtime {"]
                #[doc = "    type AccountStore = StorageMapShim<Self::Account<Runtime>, frame_system::Provider<Runtime>, AccountId, Self::AccountData<Balance>>"]
                #[doc = "  }"]
                #[doc = " ```"]
                #[doc = ""]
                #[doc = " You can also store the balance of an account in the `System` pallet."]
                #[doc = ""]
                #[doc = " # Example"]
                #[doc = ""]
                #[doc = " ```nocompile"]
                #[doc = "  impl pallet_balances::Config for Runtime {"]
                #[doc = "   type AccountStore = System"]
                #[doc = "  }"]
                #[doc = " ```"]
                #[doc = ""]
                #[doc = " But this comes with tradeoffs, storing account balances in the system pallet stores"]
                #[doc = " `frame_system` data alongside the account data contrary to storing account balances in the"]
                #[doc = " `Balances` pallet, which uses a `StorageMap` to store balances data only."]
                #[doc = " NOTE: This is only used in the case that this pallet is used to store balances."]
                pub fn account(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::account::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::account::Account,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Balances",
                        "Account",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            123u8, 179u8, 87u8, 235u8, 195u8, 64u8, 37u8, 194u8, 88u8, 157u8,
                            119u8, 239u8, 106u8, 37u8, 213u8, 178u8, 54u8, 89u8, 213u8, 3u8, 202u8,
                            209u8, 28u8, 243u8, 232u8, 80u8, 101u8, 24u8, 39u8, 243u8, 164u8,
                            120u8,
                        ],
                    )
                }
                #[doc = " Any liquidity locks on some account balances."]
                #[doc = " NOTE: Should only be accessed when setting, changing and freeing a lock."]
                pub fn locks_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::locks::Locks,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Balances",
                        "Locks",
                        vec![],
                        [
                            184u8, 159u8, 77u8, 3u8, 45u8, 154u8, 149u8, 191u8, 33u8, 212u8, 190u8,
                            76u8, 222u8, 65u8, 62u8, 163u8, 44u8, 141u8, 151u8, 114u8, 109u8, 98u8,
                            70u8, 103u8, 41u8, 93u8, 14u8, 171u8, 115u8, 127u8, 71u8, 114u8,
                        ],
                    )
                }
                #[doc = " Any liquidity locks on some account balances."]
                #[doc = " NOTE: Should only be accessed when setting, changing and freeing a lock."]
                pub fn locks(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::locks::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::locks::Locks,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Balances",
                        "Locks",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            184u8, 159u8, 77u8, 3u8, 45u8, 154u8, 149u8, 191u8, 33u8, 212u8, 190u8,
                            76u8, 222u8, 65u8, 62u8, 163u8, 44u8, 141u8, 151u8, 114u8, 109u8, 98u8,
                            70u8, 103u8, 41u8, 93u8, 14u8, 171u8, 115u8, 127u8, 71u8, 114u8,
                        ],
                    )
                }
                #[doc = " Named reserves on some account balances."]
                pub fn reserves_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::reserves::Reserves,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Balances",
                        "Reserves",
                        vec![],
                        [
                            229u8, 249u8, 203u8, 167u8, 55u8, 45u8, 194u8, 217u8, 66u8, 155u8,
                            16u8, 204u8, 106u8, 207u8, 49u8, 127u8, 193u8, 192u8, 147u8, 242u8,
                            31u8, 220u8, 137u8, 8u8, 247u8, 96u8, 175u8, 28u8, 246u8, 50u8, 254u8,
                            222u8,
                        ],
                    )
                }
                #[doc = " Named reserves on some account balances."]
                pub fn reserves(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::reserves::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::reserves::Reserves,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Balances",
                        "Reserves",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            229u8, 249u8, 203u8, 167u8, 55u8, 45u8, 194u8, 217u8, 66u8, 155u8,
                            16u8, 204u8, 106u8, 207u8, 49u8, 127u8, 193u8, 192u8, 147u8, 242u8,
                            31u8, 220u8, 137u8, 8u8, 247u8, 96u8, 175u8, 28u8, 246u8, 50u8, 254u8,
                            222u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " The minimum amount required to keep an account open."]
                pub fn existential_deposit(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u64> {
                    ::subxt::constants::Address::new_static(
                        "Balances",
                        "ExistentialDeposit",
                        [
                            128u8, 214u8, 205u8, 242u8, 181u8, 142u8, 124u8, 231u8, 190u8, 146u8,
                            59u8, 226u8, 157u8, 101u8, 103u8, 117u8, 249u8, 65u8, 18u8, 191u8,
                            103u8, 119u8, 53u8, 85u8, 81u8, 96u8, 220u8, 42u8, 184u8, 239u8, 42u8,
                            246u8,
                        ],
                    )
                }
                #[doc = " The maximum number of locks that should exist on an account."]
                #[doc = " Not strictly enforced, but used for weight estimation."]
                pub fn max_locks(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Balances",
                        "MaxLocks",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " The maximum number of named reserves that can exist on an account."]
                pub fn max_reserves(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Balances",
                        "MaxReserves",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod transaction_payment {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
        pub type Event = runtime_types::pallet_transaction_payment::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A transaction fee `actual_fee`, of which `tip` was added to the minimum inclusion fee,"]
            #[doc = "has been paid by `who`."]
            pub struct TransactionFeePaid {
                pub who: transaction_fee_paid::Who,
                pub actual_fee: transaction_fee_paid::ActualFee,
                pub tip: transaction_fee_paid::Tip,
            }
            pub mod transaction_fee_paid {
                use super::runtime_types;
                pub type Who = ::subxt::utils::AccountId32;
                pub type ActualFee = ::core::primitive::u64;
                pub type Tip = ::core::primitive::u64;
            }
            impl ::subxt::events::StaticEvent for TransactionFeePaid {
                const PALLET: &'static str = "TransactionPayment";
                const EVENT: &'static str = "TransactionFeePaid";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub mod types {
                use super::runtime_types;
                pub mod next_fee_multiplier {
                    use super::runtime_types;
                    pub type NextFeeMultiplier =
                        runtime_types::sp_arithmetic::fixed_point::FixedU128;
                }
                pub mod storage_version {
                    use super::runtime_types;
                    pub type StorageVersion = runtime_types::pallet_transaction_payment::Releases;
                }
            }
            pub struct StorageApi;
            impl StorageApi {
                pub fn next_fee_multiplier(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::next_fee_multiplier::NextFeeMultiplier,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "TransactionPayment",
                        "NextFeeMultiplier",
                        vec![],
                        [
                            247u8, 39u8, 81u8, 170u8, 225u8, 226u8, 82u8, 147u8, 34u8, 113u8,
                            147u8, 213u8, 59u8, 80u8, 139u8, 35u8, 36u8, 196u8, 152u8, 19u8, 9u8,
                            159u8, 176u8, 79u8, 249u8, 201u8, 170u8, 1u8, 129u8, 79u8, 146u8,
                            197u8,
                        ],
                    )
                }
                pub fn storage_version(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::storage_version::StorageVersion,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "TransactionPayment",
                        "StorageVersion",
                        vec![],
                        [
                            105u8, 243u8, 158u8, 241u8, 159u8, 231u8, 253u8, 6u8, 4u8, 32u8, 85u8,
                            178u8, 126u8, 31u8, 203u8, 134u8, 154u8, 38u8, 122u8, 155u8, 150u8,
                            251u8, 174u8, 15u8, 74u8, 134u8, 216u8, 244u8, 168u8, 175u8, 158u8,
                            144u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " A fee mulitplier for `Operational` extrinsics to compute \"virtual tip\" to boost their"]
                #[doc = " `priority`"]
                #[doc = ""]
                #[doc = " This value is multipled by the `final_fee` to obtain a \"virtual tip\" that is later"]
                #[doc = " added to a tip component in regular `priority` calculations."]
                #[doc = " It means that a `Normal` transaction can front-run a similarly-sized `Operational`"]
                #[doc = " extrinsic (with no tip), by including a tip value greater than the virtual tip."]
                #[doc = ""]
                #[doc = " ```rust,ignore"]
                #[doc = " // For `Normal`"]
                #[doc = " let priority = priority_calc(tip);"]
                #[doc = ""]
                #[doc = " // For `Operational`"]
                #[doc = " let virtual_tip = (inclusion_fee + tip) * OperationalFeeMultiplier;"]
                #[doc = " let priority = priority_calc(tip + virtual_tip);"]
                #[doc = " ```"]
                #[doc = ""]
                #[doc = " Note that since we use `final_fee` the multiplier applies also to the regular `tip`"]
                #[doc = " sent with the transaction. So, not only does the transaction get a priority bump based"]
                #[doc = " on the `inclusion_fee`, but we also amplify the impact of tips applied to `Operational`"]
                #[doc = " transactions."]
                pub fn operational_fee_multiplier(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u8> {
                    ::subxt::constants::Address::new_static(
                        "TransactionPayment",
                        "OperationalFeeMultiplier",
                        [
                            141u8, 130u8, 11u8, 35u8, 226u8, 114u8, 92u8, 179u8, 168u8, 110u8,
                            28u8, 91u8, 221u8, 64u8, 4u8, 148u8, 201u8, 193u8, 185u8, 66u8, 226u8,
                            114u8, 97u8, 79u8, 62u8, 212u8, 202u8, 114u8, 237u8, 228u8, 183u8,
                            165u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod subtensor_module {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
        pub type Error = runtime_types::pallet_subtensor::pallet::Error;
        #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
        pub type Call = runtime_types::pallet_subtensor::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SetWeights {
                    pub netuid: set_weights::Netuid,
                    pub dests: set_weights::Dests,
                    pub weights: set_weights::Weights,
                    pub version_key: set_weights::VersionKey,
                }
                pub mod set_weights {
                    use super::runtime_types;
                    pub type Netuid = ::core::primitive::u16;
                    pub type Dests = ::std::vec::Vec<::core::primitive::u16>;
                    pub type Weights = ::std::vec::Vec<::core::primitive::u16>;
                    pub type VersionKey = ::core::primitive::u64;
                }
                impl ::subxt::blocks::StaticExtrinsic for SetWeights {
                    const PALLET: &'static str = "SubtensorModule";
                    const CALL: &'static str = "set_weights";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct BecomeDelegate {
                    pub hotkey: become_delegate::Hotkey,
                }
                pub mod become_delegate {
                    use super::runtime_types;
                    pub type Hotkey = ::subxt::utils::AccountId32;
                }
                impl ::subxt::blocks::StaticExtrinsic for BecomeDelegate {
                    const PALLET: &'static str = "SubtensorModule";
                    const CALL: &'static str = "become_delegate";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct AddStake {
                    pub hotkey: add_stake::Hotkey,
                    pub amount_staked: add_stake::AmountStaked,
                }
                pub mod add_stake {
                    use super::runtime_types;
                    pub type Hotkey = ::subxt::utils::AccountId32;
                    pub type AmountStaked = ::core::primitive::u64;
                }
                impl ::subxt::blocks::StaticExtrinsic for AddStake {
                    const PALLET: &'static str = "SubtensorModule";
                    const CALL: &'static str = "add_stake";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct RemoveStake {
                    pub hotkey: remove_stake::Hotkey,
                    pub amount_unstaked: remove_stake::AmountUnstaked,
                }
                pub mod remove_stake {
                    use super::runtime_types;
                    pub type Hotkey = ::subxt::utils::AccountId32;
                    pub type AmountUnstaked = ::core::primitive::u64;
                }
                impl ::subxt::blocks::StaticExtrinsic for RemoveStake {
                    const PALLET: &'static str = "SubtensorModule";
                    const CALL: &'static str = "remove_stake";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ServeAxon {
                    pub netuid: serve_axon::Netuid,
                    pub version: serve_axon::Version,
                    pub ip: serve_axon::Ip,
                    pub port: serve_axon::Port,
                    pub ip_type: serve_axon::IpType,
                    pub protocol: serve_axon::Protocol,
                    pub placeholder1: serve_axon::Placeholder1,
                    pub placeholder2: serve_axon::Placeholder2,
                }
                pub mod serve_axon {
                    use super::runtime_types;
                    pub type Netuid = ::core::primitive::u16;
                    pub type Version = ::core::primitive::u32;
                    pub type Ip = ::core::primitive::u128;
                    pub type Port = ::core::primitive::u16;
                    pub type IpType = ::core::primitive::u8;
                    pub type Protocol = ::core::primitive::u8;
                    pub type Placeholder1 = ::core::primitive::u8;
                    pub type Placeholder2 = ::core::primitive::u8;
                }
                impl ::subxt::blocks::StaticExtrinsic for ServeAxon {
                    const PALLET: &'static str = "SubtensorModule";
                    const CALL: &'static str = "serve_axon";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ServePrometheus {
                    pub netuid: serve_prometheus::Netuid,
                    pub version: serve_prometheus::Version,
                    pub ip: serve_prometheus::Ip,
                    pub port: serve_prometheus::Port,
                    pub ip_type: serve_prometheus::IpType,
                }
                pub mod serve_prometheus {
                    use super::runtime_types;
                    pub type Netuid = ::core::primitive::u16;
                    pub type Version = ::core::primitive::u32;
                    pub type Ip = ::core::primitive::u128;
                    pub type Port = ::core::primitive::u16;
                    pub type IpType = ::core::primitive::u8;
                }
                impl ::subxt::blocks::StaticExtrinsic for ServePrometheus {
                    const PALLET: &'static str = "SubtensorModule";
                    const CALL: &'static str = "serve_prometheus";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Register {
                    pub netuid: register::Netuid,
                    pub block_number: register::BlockNumber,
                    pub nonce: register::Nonce,
                    pub work: register::Work,
                    pub hotkey: register::Hotkey,
                    pub coldkey: register::Coldkey,
                }
                pub mod register {
                    use super::runtime_types;
                    pub type Netuid = ::core::primitive::u16;
                    pub type BlockNumber = ::core::primitive::u64;
                    pub type Nonce = ::core::primitive::u64;
                    pub type Work = ::std::vec::Vec<::core::primitive::u8>;
                    pub type Hotkey = ::subxt::utils::AccountId32;
                    pub type Coldkey = ::subxt::utils::AccountId32;
                }
                impl ::subxt::blocks::StaticExtrinsic for Register {
                    const PALLET: &'static str = "SubtensorModule";
                    const CALL: &'static str = "register";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct RootRegister {
                    pub hotkey: root_register::Hotkey,
                }
                pub mod root_register {
                    use super::runtime_types;
                    pub type Hotkey = ::subxt::utils::AccountId32;
                }
                impl ::subxt::blocks::StaticExtrinsic for RootRegister {
                    const PALLET: &'static str = "SubtensorModule";
                    const CALL: &'static str = "root_register";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct BurnedRegister {
                    pub netuid: burned_register::Netuid,
                    pub hotkey: burned_register::Hotkey,
                }
                pub mod burned_register {
                    use super::runtime_types;
                    pub type Netuid = ::core::primitive::u16;
                    pub type Hotkey = ::subxt::utils::AccountId32;
                }
                impl ::subxt::blocks::StaticExtrinsic for BurnedRegister {
                    const PALLET: &'static str = "SubtensorModule";
                    const CALL: &'static str = "burned_register";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SwapHotkey {
                    pub hotkey: swap_hotkey::Hotkey,
                    pub new_hotkey: swap_hotkey::NewHotkey,
                }
                pub mod swap_hotkey {
                    use super::runtime_types;
                    pub type Hotkey = ::subxt::utils::AccountId32;
                    pub type NewHotkey = ::subxt::utils::AccountId32;
                }
                impl ::subxt::blocks::StaticExtrinsic for SwapHotkey {
                    const PALLET: &'static str = "SubtensorModule";
                    const CALL: &'static str = "swap_hotkey";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Authenticates a council proposal and dispatches a function call with `Root` origin."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be a council majority."]
                #[doc = ""]
                #[doc = "## Complexity"]
                #[doc = "- O(1)."]
                pub struct Sudo {
                    pub call: ::std::boxed::Box<sudo::Call>,
                }
                pub mod sudo {
                    use super::runtime_types;
                    pub type Call = runtime_types::node_subtensor_runtime::RuntimeCall;
                }
                impl ::subxt::blocks::StaticExtrinsic for Sudo {
                    const PALLET: &'static str = "SubtensorModule";
                    const CALL: &'static str = "sudo";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Authenticates a council proposal and dispatches a function call with `Root` origin."]
                #[doc = "This function does not check the weight of the call, and instead allows the"]
                #[doc = "user to specify the weight of the call."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be a council majority."]
                #[doc = ""]
                #[doc = "## Complexity"]
                #[doc = "- O(1)."]
                pub struct SudoUncheckedWeight {
                    pub call: ::std::boxed::Box<sudo_unchecked_weight::Call>,
                    pub weight: sudo_unchecked_weight::Weight,
                }
                pub mod sudo_unchecked_weight {
                    use super::runtime_types;
                    pub type Call = runtime_types::node_subtensor_runtime::RuntimeCall;
                    pub type Weight = runtime_types::sp_weights::weight_v2::Weight;
                }
                impl ::subxt::blocks::StaticExtrinsic for SudoUncheckedWeight {
                    const PALLET: &'static str = "SubtensorModule";
                    const CALL: &'static str = "sudo_unchecked_weight";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Vote {
                    pub hotkey: vote::Hotkey,
                    pub proposal: vote::Proposal,
                    #[codec(compact)]
                    pub index: vote::Index,
                    pub approve: vote::Approve,
                }
                pub mod vote {
                    use super::runtime_types;
                    pub type Hotkey = ::subxt::utils::AccountId32;
                    pub type Proposal = ::subxt::utils::H256;
                    pub type Index = ::core::primitive::u32;
                    pub type Approve = ::core::primitive::bool;
                }
                impl ::subxt::blocks::StaticExtrinsic for Vote {
                    const PALLET: &'static str = "SubtensorModule";
                    const CALL: &'static str = "vote";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct RegisterNetwork;
                impl ::subxt::blocks::StaticExtrinsic for RegisterNetwork {
                    const PALLET: &'static str = "SubtensorModule";
                    const CALL: &'static str = "register_network";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Faucet {
                    pub block_number: faucet::BlockNumber,
                    pub nonce: faucet::Nonce,
                    pub work: faucet::Work,
                }
                pub mod faucet {
                    use super::runtime_types;
                    pub type BlockNumber = ::core::primitive::u64;
                    pub type Nonce = ::core::primitive::u64;
                    pub type Work = ::std::vec::Vec<::core::primitive::u8>;
                }
                impl ::subxt::blocks::StaticExtrinsic for Faucet {
                    const PALLET: &'static str = "SubtensorModule";
                    const CALL: &'static str = "faucet";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct DissolveNetwork {
                    pub netuid: dissolve_network::Netuid,
                }
                pub mod dissolve_network {
                    use super::runtime_types;
                    pub type Netuid = ::core::primitive::u16;
                }
                impl ::subxt::blocks::StaticExtrinsic for DissolveNetwork {
                    const PALLET: &'static str = "SubtensorModule";
                    const CALL: &'static str = "dissolve_network";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                pub fn set_weights(
                    &self,
                    netuid: types::set_weights::Netuid,
                    dests: types::set_weights::Dests,
                    weights: types::set_weights::Weights,
                    version_key: types::set_weights::VersionKey,
                ) -> ::subxt::tx::Payload<types::SetWeights> {
                    ::subxt::tx::Payload::new_static(
                        "SubtensorModule",
                        "set_weights",
                        types::SetWeights {
                            netuid,
                            dests,
                            weights,
                            version_key,
                        },
                        [
                            26u8, 113u8, 253u8, 232u8, 169u8, 61u8, 9u8, 102u8, 199u8, 147u8,
                            148u8, 10u8, 248u8, 38u8, 32u8, 13u8, 141u8, 199u8, 11u8, 40u8, 238u8,
                            233u8, 56u8, 125u8, 156u8, 213u8, 224u8, 244u8, 72u8, 93u8, 195u8,
                            62u8,
                        ],
                    )
                }
                pub fn become_delegate(
                    &self,
                    hotkey: types::become_delegate::Hotkey,
                ) -> ::subxt::tx::Payload<types::BecomeDelegate> {
                    ::subxt::tx::Payload::new_static(
                        "SubtensorModule",
                        "become_delegate",
                        types::BecomeDelegate { hotkey },
                        [
                            203u8, 35u8, 56u8, 221u8, 32u8, 244u8, 108u8, 117u8, 57u8, 16u8, 244u8,
                            226u8, 201u8, 173u8, 128u8, 134u8, 26u8, 169u8, 5u8, 132u8, 98u8,
                            220u8, 214u8, 207u8, 250u8, 232u8, 234u8, 42u8, 212u8, 81u8, 98u8,
                            57u8,
                        ],
                    )
                }
                pub fn add_stake(
                    &self,
                    hotkey: types::add_stake::Hotkey,
                    amount_staked: types::add_stake::AmountStaked,
                ) -> ::subxt::tx::Payload<types::AddStake> {
                    ::subxt::tx::Payload::new_static(
                        "SubtensorModule",
                        "add_stake",
                        types::AddStake {
                            hotkey,
                            amount_staked,
                        },
                        [
                            113u8, 193u8, 204u8, 50u8, 217u8, 3u8, 188u8, 239u8, 106u8, 211u8,
                            38u8, 172u8, 217u8, 53u8, 249u8, 103u8, 250u8, 17u8, 183u8, 209u8,
                            59u8, 123u8, 123u8, 246u8, 96u8, 247u8, 137u8, 83u8, 91u8, 64u8, 48u8,
                            220u8,
                        ],
                    )
                }
                pub fn remove_stake(
                    &self,
                    hotkey: types::remove_stake::Hotkey,
                    amount_unstaked: types::remove_stake::AmountUnstaked,
                ) -> ::subxt::tx::Payload<types::RemoveStake> {
                    ::subxt::tx::Payload::new_static(
                        "SubtensorModule",
                        "remove_stake",
                        types::RemoveStake {
                            hotkey,
                            amount_unstaked,
                        },
                        [
                            85u8, 16u8, 7u8, 153u8, 156u8, 159u8, 196u8, 107u8, 96u8, 49u8, 203u8,
                            83u8, 36u8, 112u8, 116u8, 208u8, 40u8, 242u8, 103u8, 119u8, 173u8,
                            131u8, 241u8, 31u8, 246u8, 65u8, 136u8, 79u8, 45u8, 209u8, 166u8,
                            200u8,
                        ],
                    )
                }
                pub fn serve_axon(
                    &self,
                    netuid: types::serve_axon::Netuid,
                    version: types::serve_axon::Version,
                    ip: types::serve_axon::Ip,
                    port: types::serve_axon::Port,
                    ip_type: types::serve_axon::IpType,
                    protocol: types::serve_axon::Protocol,
                    placeholder1: types::serve_axon::Placeholder1,
                    placeholder2: types::serve_axon::Placeholder2,
                ) -> ::subxt::tx::Payload<types::ServeAxon> {
                    ::subxt::tx::Payload::new_static(
                        "SubtensorModule",
                        "serve_axon",
                        types::ServeAxon {
                            netuid,
                            version,
                            ip,
                            port,
                            ip_type,
                            protocol,
                            placeholder1,
                            placeholder2,
                        },
                        [
                            115u8, 192u8, 140u8, 60u8, 59u8, 74u8, 35u8, 185u8, 142u8, 224u8,
                            166u8, 121u8, 135u8, 13u8, 247u8, 54u8, 152u8, 178u8, 119u8, 176u8,
                            131u8, 22u8, 125u8, 241u8, 162u8, 174u8, 238u8, 35u8, 245u8, 254u8,
                            254u8, 205u8,
                        ],
                    )
                }
                pub fn serve_prometheus(
                    &self,
                    netuid: types::serve_prometheus::Netuid,
                    version: types::serve_prometheus::Version,
                    ip: types::serve_prometheus::Ip,
                    port: types::serve_prometheus::Port,
                    ip_type: types::serve_prometheus::IpType,
                ) -> ::subxt::tx::Payload<types::ServePrometheus> {
                    ::subxt::tx::Payload::new_static(
                        "SubtensorModule",
                        "serve_prometheus",
                        types::ServePrometheus {
                            netuid,
                            version,
                            ip,
                            port,
                            ip_type,
                        },
                        [
                            20u8, 125u8, 112u8, 212u8, 213u8, 9u8, 36u8, 152u8, 252u8, 42u8, 37u8,
                            90u8, 11u8, 166u8, 1u8, 224u8, 116u8, 108u8, 124u8, 61u8, 93u8, 220u8,
                            88u8, 62u8, 71u8, 65u8, 225u8, 166u8, 66u8, 236u8, 238u8, 126u8,
                        ],
                    )
                }
                pub fn register(
                    &self,
                    netuid: types::register::Netuid,
                    block_number: types::register::BlockNumber,
                    nonce: types::register::Nonce,
                    work: types::register::Work,
                    hotkey: types::register::Hotkey,
                    coldkey: types::register::Coldkey,
                ) -> ::subxt::tx::Payload<types::Register> {
                    ::subxt::tx::Payload::new_static(
                        "SubtensorModule",
                        "register",
                        types::Register {
                            netuid,
                            block_number,
                            nonce,
                            work,
                            hotkey,
                            coldkey,
                        },
                        [
                            224u8, 165u8, 251u8, 192u8, 6u8, 131u8, 79u8, 41u8, 143u8, 150u8,
                            200u8, 247u8, 68u8, 7u8, 4u8, 195u8, 139u8, 31u8, 130u8, 173u8, 230u8,
                            99u8, 39u8, 220u8, 244u8, 120u8, 81u8, 87u8, 34u8, 207u8, 70u8, 193u8,
                        ],
                    )
                }
                pub fn root_register(
                    &self,
                    hotkey: types::root_register::Hotkey,
                ) -> ::subxt::tx::Payload<types::RootRegister> {
                    ::subxt::tx::Payload::new_static(
                        "SubtensorModule",
                        "root_register",
                        types::RootRegister { hotkey },
                        [
                            196u8, 149u8, 100u8, 179u8, 32u8, 69u8, 216u8, 177u8, 78u8, 22u8,
                            227u8, 176u8, 63u8, 178u8, 27u8, 80u8, 74u8, 246u8, 223u8, 236u8,
                            183u8, 226u8, 210u8, 249u8, 133u8, 103u8, 174u8, 43u8, 153u8, 201u8,
                            8u8, 55u8,
                        ],
                    )
                }
                pub fn burned_register(
                    &self,
                    netuid: types::burned_register::Netuid,
                    hotkey: types::burned_register::Hotkey,
                ) -> ::subxt::tx::Payload<types::BurnedRegister> {
                    ::subxt::tx::Payload::new_static(
                        "SubtensorModule",
                        "burned_register",
                        types::BurnedRegister { netuid, hotkey },
                        [
                            66u8, 182u8, 83u8, 185u8, 109u8, 48u8, 136u8, 88u8, 198u8, 19u8, 54u8,
                            132u8, 245u8, 28u8, 243u8, 177u8, 110u8, 11u8, 118u8, 109u8, 17u8,
                            188u8, 221u8, 94u8, 216u8, 72u8, 0u8, 101u8, 155u8, 87u8, 140u8, 251u8,
                        ],
                    )
                }
                pub fn swap_hotkey(
                    &self,
                    hotkey: types::swap_hotkey::Hotkey,
                    new_hotkey: types::swap_hotkey::NewHotkey,
                ) -> ::subxt::tx::Payload<types::SwapHotkey> {
                    ::subxt::tx::Payload::new_static(
                        "SubtensorModule",
                        "swap_hotkey",
                        types::SwapHotkey { hotkey, new_hotkey },
                        [
                            203u8, 136u8, 78u8, 79u8, 43u8, 211u8, 137u8, 210u8, 82u8, 46u8, 250u8,
                            109u8, 181u8, 172u8, 206u8, 26u8, 111u8, 6u8, 15u8, 81u8, 139u8, 246u8,
                            47u8, 125u8, 67u8, 62u8, 249u8, 14u8, 227u8, 41u8, 102u8, 250u8,
                        ],
                    )
                }
                #[doc = "Authenticates a council proposal and dispatches a function call with `Root` origin."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be a council majority."]
                #[doc = ""]
                #[doc = "## Complexity"]
                #[doc = "- O(1)."]
                pub fn sudo(&self, call: types::sudo::Call) -> ::subxt::tx::Payload<types::Sudo> {
                    ::subxt::tx::Payload::new_static(
                        "SubtensorModule",
                        "sudo",
                        types::Sudo {
                            call: ::std::boxed::Box::new(call),
                        },
                        [
                            205u8, 202u8, 210u8, 62u8, 20u8, 218u8, 107u8, 164u8, 131u8, 179u8,
                            60u8, 125u8, 239u8, 131u8, 197u8, 77u8, 217u8, 135u8, 212u8, 204u8,
                            84u8, 4u8, 246u8, 218u8, 135u8, 230u8, 14u8, 68u8, 64u8, 84u8, 254u8,
                            125u8,
                        ],
                    )
                }
                #[doc = "Authenticates a council proposal and dispatches a function call with `Root` origin."]
                #[doc = "This function does not check the weight of the call, and instead allows the"]
                #[doc = "user to specify the weight of the call."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be a council majority."]
                #[doc = ""]
                #[doc = "## Complexity"]
                #[doc = "- O(1)."]
                pub fn sudo_unchecked_weight(
                    &self,
                    call: types::sudo_unchecked_weight::Call,
                    weight: types::sudo_unchecked_weight::Weight,
                ) -> ::subxt::tx::Payload<types::SudoUncheckedWeight> {
                    ::subxt::tx::Payload::new_static(
                        "SubtensorModule",
                        "sudo_unchecked_weight",
                        types::SudoUncheckedWeight {
                            call: ::std::boxed::Box::new(call),
                            weight,
                        },
                        [
                            9u8, 79u8, 61u8, 164u8, 42u8, 178u8, 69u8, 199u8, 50u8, 152u8, 160u8,
                            140u8, 95u8, 116u8, 87u8, 66u8, 235u8, 115u8, 205u8, 52u8, 174u8,
                            247u8, 255u8, 124u8, 55u8, 59u8, 21u8, 164u8, 128u8, 129u8, 42u8, 25u8,
                        ],
                    )
                }
                pub fn vote(
                    &self,
                    hotkey: types::vote::Hotkey,
                    proposal: types::vote::Proposal,
                    index: types::vote::Index,
                    approve: types::vote::Approve,
                ) -> ::subxt::tx::Payload<types::Vote> {
                    ::subxt::tx::Payload::new_static(
                        "SubtensorModule",
                        "vote",
                        types::Vote {
                            hotkey,
                            proposal,
                            index,
                            approve,
                        },
                        [
                            193u8, 173u8, 105u8, 135u8, 203u8, 205u8, 84u8, 240u8, 190u8, 83u8,
                            45u8, 196u8, 82u8, 3u8, 88u8, 189u8, 234u8, 106u8, 197u8, 108u8, 37u8,
                            21u8, 236u8, 94u8, 242u8, 148u8, 61u8, 13u8, 199u8, 2u8, 159u8, 56u8,
                        ],
                    )
                }
                pub fn register_network(&self) -> ::subxt::tx::Payload<types::RegisterNetwork> {
                    ::subxt::tx::Payload::new_static(
                        "SubtensorModule",
                        "register_network",
                        types::RegisterNetwork {},
                        [
                            201u8, 94u8, 81u8, 163u8, 111u8, 143u8, 250u8, 29u8, 225u8, 250u8,
                            37u8, 229u8, 45u8, 101u8, 56u8, 242u8, 5u8, 195u8, 112u8, 246u8, 40u8,
                            122u8, 75u8, 147u8, 112u8, 122u8, 67u8, 225u8, 115u8, 101u8, 211u8,
                            59u8,
                        ],
                    )
                }
                pub fn faucet(
                    &self,
                    block_number: types::faucet::BlockNumber,
                    nonce: types::faucet::Nonce,
                    work: types::faucet::Work,
                ) -> ::subxt::tx::Payload<types::Faucet> {
                    ::subxt::tx::Payload::new_static(
                        "SubtensorModule",
                        "faucet",
                        types::Faucet {
                            block_number,
                            nonce,
                            work,
                        },
                        [
                            122u8, 187u8, 66u8, 141u8, 160u8, 202u8, 28u8, 177u8, 251u8, 180u8,
                            35u8, 60u8, 1u8, 79u8, 187u8, 247u8, 150u8, 199u8, 154u8, 37u8, 161u8,
                            229u8, 97u8, 36u8, 213u8, 31u8, 101u8, 143u8, 138u8, 52u8, 45u8, 169u8,
                        ],
                    )
                }
                pub fn dissolve_network(
                    &self,
                    netuid: types::dissolve_network::Netuid,
                ) -> ::subxt::tx::Payload<types::DissolveNetwork> {
                    ::subxt::tx::Payload::new_static(
                        "SubtensorModule",
                        "dissolve_network",
                        types::DissolveNetwork { netuid },
                        [
                            225u8, 61u8, 195u8, 240u8, 150u8, 66u8, 215u8, 34u8, 249u8, 3u8, 79u8,
                            246u8, 70u8, 116u8, 213u8, 215u8, 40u8, 175u8, 209u8, 27u8, 236u8,
                            159u8, 246u8, 144u8, 50u8, 154u8, 7u8, 246u8, 226u8, 145u8, 61u8, 54u8,
                        ],
                    )
                }
            }
        }
        #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
        pub type Event = runtime_types::pallet_subtensor::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct NetworkAdded(pub network_added::Field0, pub network_added::Field1);
            pub mod network_added {
                use super::runtime_types;
                pub type Field0 = ::core::primitive::u16;
                pub type Field1 = ::core::primitive::u16;
            }
            impl ::subxt::events::StaticEvent for NetworkAdded {
                const PALLET: &'static str = "SubtensorModule";
                const EVENT: &'static str = "NetworkAdded";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct NetworkRemoved(pub network_removed::Field0);
            pub mod network_removed {
                use super::runtime_types;
                pub type Field0 = ::core::primitive::u16;
            }
            impl ::subxt::events::StaticEvent for NetworkRemoved {
                const PALLET: &'static str = "SubtensorModule";
                const EVENT: &'static str = "NetworkRemoved";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct StakeAdded(pub stake_added::Field0, pub stake_added::Field1);
            pub mod stake_added {
                use super::runtime_types;
                pub type Field0 = ::subxt::utils::AccountId32;
                pub type Field1 = ::core::primitive::u64;
            }
            impl ::subxt::events::StaticEvent for StakeAdded {
                const PALLET: &'static str = "SubtensorModule";
                const EVENT: &'static str = "StakeAdded";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct StakeRemoved(pub stake_removed::Field0, pub stake_removed::Field1);
            pub mod stake_removed {
                use super::runtime_types;
                pub type Field0 = ::subxt::utils::AccountId32;
                pub type Field1 = ::core::primitive::u64;
            }
            impl ::subxt::events::StaticEvent for StakeRemoved {
                const PALLET: &'static str = "SubtensorModule";
                const EVENT: &'static str = "StakeRemoved";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct WeightsSet(pub weights_set::Field0, pub weights_set::Field1);
            pub mod weights_set {
                use super::runtime_types;
                pub type Field0 = ::core::primitive::u16;
                pub type Field1 = ::core::primitive::u16;
            }
            impl ::subxt::events::StaticEvent for WeightsSet {
                const PALLET: &'static str = "SubtensorModule";
                const EVENT: &'static str = "WeightsSet";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct NeuronRegistered(
                pub neuron_registered::Field0,
                pub neuron_registered::Field1,
                pub neuron_registered::Field2,
            );
            pub mod neuron_registered {
                use super::runtime_types;
                pub type Field0 = ::core::primitive::u16;
                pub type Field1 = ::core::primitive::u16;
                pub type Field2 = ::subxt::utils::AccountId32;
            }
            impl ::subxt::events::StaticEvent for NeuronRegistered {
                const PALLET: &'static str = "SubtensorModule";
                const EVENT: &'static str = "NeuronRegistered";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct BulkNeuronsRegistered(
                pub bulk_neurons_registered::Field0,
                pub bulk_neurons_registered::Field1,
            );
            pub mod bulk_neurons_registered {
                use super::runtime_types;
                pub type Field0 = ::core::primitive::u16;
                pub type Field1 = ::core::primitive::u16;
            }
            impl ::subxt::events::StaticEvent for BulkNeuronsRegistered {
                const PALLET: &'static str = "SubtensorModule";
                const EVENT: &'static str = "BulkNeuronsRegistered";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct BulkBalancesSet(
                pub bulk_balances_set::Field0,
                pub bulk_balances_set::Field1,
            );
            pub mod bulk_balances_set {
                use super::runtime_types;
                pub type Field0 = ::core::primitive::u16;
                pub type Field1 = ::core::primitive::u16;
            }
            impl ::subxt::events::StaticEvent for BulkBalancesSet {
                const PALLET: &'static str = "SubtensorModule";
                const EVENT: &'static str = "BulkBalancesSet";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct MaxAllowedUidsSet(
                pub max_allowed_uids_set::Field0,
                pub max_allowed_uids_set::Field1,
            );
            pub mod max_allowed_uids_set {
                use super::runtime_types;
                pub type Field0 = ::core::primitive::u16;
                pub type Field1 = ::core::primitive::u16;
            }
            impl ::subxt::events::StaticEvent for MaxAllowedUidsSet {
                const PALLET: &'static str = "SubtensorModule";
                const EVENT: &'static str = "MaxAllowedUidsSet";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct MaxWeightLimitSet(
                pub max_weight_limit_set::Field0,
                pub max_weight_limit_set::Field1,
            );
            pub mod max_weight_limit_set {
                use super::runtime_types;
                pub type Field0 = ::core::primitive::u16;
                pub type Field1 = ::core::primitive::u16;
            }
            impl ::subxt::events::StaticEvent for MaxWeightLimitSet {
                const PALLET: &'static str = "SubtensorModule";
                const EVENT: &'static str = "MaxWeightLimitSet";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct DifficultySet(pub difficulty_set::Field0, pub difficulty_set::Field1);
            pub mod difficulty_set {
                use super::runtime_types;
                pub type Field0 = ::core::primitive::u16;
                pub type Field1 = ::core::primitive::u64;
            }
            impl ::subxt::events::StaticEvent for DifficultySet {
                const PALLET: &'static str = "SubtensorModule";
                const EVENT: &'static str = "DifficultySet";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct AdjustmentIntervalSet(
                pub adjustment_interval_set::Field0,
                pub adjustment_interval_set::Field1,
            );
            pub mod adjustment_interval_set {
                use super::runtime_types;
                pub type Field0 = ::core::primitive::u16;
                pub type Field1 = ::core::primitive::u16;
            }
            impl ::subxt::events::StaticEvent for AdjustmentIntervalSet {
                const PALLET: &'static str = "SubtensorModule";
                const EVENT: &'static str = "AdjustmentIntervalSet";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct RegistrationPerIntervalSet(
                pub registration_per_interval_set::Field0,
                pub registration_per_interval_set::Field1,
            );
            pub mod registration_per_interval_set {
                use super::runtime_types;
                pub type Field0 = ::core::primitive::u16;
                pub type Field1 = ::core::primitive::u16;
            }
            impl ::subxt::events::StaticEvent for RegistrationPerIntervalSet {
                const PALLET: &'static str = "SubtensorModule";
                const EVENT: &'static str = "RegistrationPerIntervalSet";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct MaxRegistrationsPerBlockSet(
                pub max_registrations_per_block_set::Field0,
                pub max_registrations_per_block_set::Field1,
            );
            pub mod max_registrations_per_block_set {
                use super::runtime_types;
                pub type Field0 = ::core::primitive::u16;
                pub type Field1 = ::core::primitive::u16;
            }
            impl ::subxt::events::StaticEvent for MaxRegistrationsPerBlockSet {
                const PALLET: &'static str = "SubtensorModule";
                const EVENT: &'static str = "MaxRegistrationsPerBlockSet";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct ActivityCutoffSet(
                pub activity_cutoff_set::Field0,
                pub activity_cutoff_set::Field1,
            );
            pub mod activity_cutoff_set {
                use super::runtime_types;
                pub type Field0 = ::core::primitive::u16;
                pub type Field1 = ::core::primitive::u16;
            }
            impl ::subxt::events::StaticEvent for ActivityCutoffSet {
                const PALLET: &'static str = "SubtensorModule";
                const EVENT: &'static str = "ActivityCutoffSet";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct RhoSet(pub rho_set::Field0, pub rho_set::Field1);
            pub mod rho_set {
                use super::runtime_types;
                pub type Field0 = ::core::primitive::u16;
                pub type Field1 = ::core::primitive::u16;
            }
            impl ::subxt::events::StaticEvent for RhoSet {
                const PALLET: &'static str = "SubtensorModule";
                const EVENT: &'static str = "RhoSet";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct KappaSet(pub kappa_set::Field0, pub kappa_set::Field1);
            pub mod kappa_set {
                use super::runtime_types;
                pub type Field0 = ::core::primitive::u16;
                pub type Field1 = ::core::primitive::u16;
            }
            impl ::subxt::events::StaticEvent for KappaSet {
                const PALLET: &'static str = "SubtensorModule";
                const EVENT: &'static str = "KappaSet";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct MinAllowedWeightSet(
                pub min_allowed_weight_set::Field0,
                pub min_allowed_weight_set::Field1,
            );
            pub mod min_allowed_weight_set {
                use super::runtime_types;
                pub type Field0 = ::core::primitive::u16;
                pub type Field1 = ::core::primitive::u16;
            }
            impl ::subxt::events::StaticEvent for MinAllowedWeightSet {
                const PALLET: &'static str = "SubtensorModule";
                const EVENT: &'static str = "MinAllowedWeightSet";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct ValidatorPruneLenSet(
                pub validator_prune_len_set::Field0,
                pub validator_prune_len_set::Field1,
            );
            pub mod validator_prune_len_set {
                use super::runtime_types;
                pub type Field0 = ::core::primitive::u16;
                pub type Field1 = ::core::primitive::u64;
            }
            impl ::subxt::events::StaticEvent for ValidatorPruneLenSet {
                const PALLET: &'static str = "SubtensorModule";
                const EVENT: &'static str = "ValidatorPruneLenSet";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct ScalingLawPowerSet(
                pub scaling_law_power_set::Field0,
                pub scaling_law_power_set::Field1,
            );
            pub mod scaling_law_power_set {
                use super::runtime_types;
                pub type Field0 = ::core::primitive::u16;
                pub type Field1 = ::core::primitive::u16;
            }
            impl ::subxt::events::StaticEvent for ScalingLawPowerSet {
                const PALLET: &'static str = "SubtensorModule";
                const EVENT: &'static str = "ScalingLawPowerSet";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct WeightsSetRateLimitSet(
                pub weights_set_rate_limit_set::Field0,
                pub weights_set_rate_limit_set::Field1,
            );
            pub mod weights_set_rate_limit_set {
                use super::runtime_types;
                pub type Field0 = ::core::primitive::u16;
                pub type Field1 = ::core::primitive::u64;
            }
            impl ::subxt::events::StaticEvent for WeightsSetRateLimitSet {
                const PALLET: &'static str = "SubtensorModule";
                const EVENT: &'static str = "WeightsSetRateLimitSet";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct ImmunityPeriodSet(
                pub immunity_period_set::Field0,
                pub immunity_period_set::Field1,
            );
            pub mod immunity_period_set {
                use super::runtime_types;
                pub type Field0 = ::core::primitive::u16;
                pub type Field1 = ::core::primitive::u16;
            }
            impl ::subxt::events::StaticEvent for ImmunityPeriodSet {
                const PALLET: &'static str = "SubtensorModule";
                const EVENT: &'static str = "ImmunityPeriodSet";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct BondsMovingAverageSet(
                pub bonds_moving_average_set::Field0,
                pub bonds_moving_average_set::Field1,
            );
            pub mod bonds_moving_average_set {
                use super::runtime_types;
                pub type Field0 = ::core::primitive::u16;
                pub type Field1 = ::core::primitive::u64;
            }
            impl ::subxt::events::StaticEvent for BondsMovingAverageSet {
                const PALLET: &'static str = "SubtensorModule";
                const EVENT: &'static str = "BondsMovingAverageSet";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct MaxAllowedValidatorsSet(
                pub max_allowed_validators_set::Field0,
                pub max_allowed_validators_set::Field1,
            );
            pub mod max_allowed_validators_set {
                use super::runtime_types;
                pub type Field0 = ::core::primitive::u16;
                pub type Field1 = ::core::primitive::u16;
            }
            impl ::subxt::events::StaticEvent for MaxAllowedValidatorsSet {
                const PALLET: &'static str = "SubtensorModule";
                const EVENT: &'static str = "MaxAllowedValidatorsSet";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct AxonServed(pub axon_served::Field0, pub axon_served::Field1);
            pub mod axon_served {
                use super::runtime_types;
                pub type Field0 = ::core::primitive::u16;
                pub type Field1 = ::subxt::utils::AccountId32;
            }
            impl ::subxt::events::StaticEvent for AxonServed {
                const PALLET: &'static str = "SubtensorModule";
                const EVENT: &'static str = "AxonServed";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct PrometheusServed(
                pub prometheus_served::Field0,
                pub prometheus_served::Field1,
            );
            pub mod prometheus_served {
                use super::runtime_types;
                pub type Field0 = ::core::primitive::u16;
                pub type Field1 = ::subxt::utils::AccountId32;
            }
            impl ::subxt::events::StaticEvent for PrometheusServed {
                const PALLET: &'static str = "SubtensorModule";
                const EVENT: &'static str = "PrometheusServed";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct EmissionValuesSet;
            impl ::subxt::events::StaticEvent for EmissionValuesSet {
                const PALLET: &'static str = "SubtensorModule";
                const EVENT: &'static str = "EmissionValuesSet";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct DelegateAdded(
                pub delegate_added::Field0,
                pub delegate_added::Field1,
                pub delegate_added::Field2,
            );
            pub mod delegate_added {
                use super::runtime_types;
                pub type Field0 = ::subxt::utils::AccountId32;
                pub type Field1 = ::subxt::utils::AccountId32;
                pub type Field2 = ::core::primitive::u16;
            }
            impl ::subxt::events::StaticEvent for DelegateAdded {
                const PALLET: &'static str = "SubtensorModule";
                const EVENT: &'static str = "DelegateAdded";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct DefaultTakeSet(pub default_take_set::Field0);
            pub mod default_take_set {
                use super::runtime_types;
                pub type Field0 = ::core::primitive::u16;
            }
            impl ::subxt::events::StaticEvent for DefaultTakeSet {
                const PALLET: &'static str = "SubtensorModule";
                const EVENT: &'static str = "DefaultTakeSet";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct WeightsVersionKeySet(
                pub weights_version_key_set::Field0,
                pub weights_version_key_set::Field1,
            );
            pub mod weights_version_key_set {
                use super::runtime_types;
                pub type Field0 = ::core::primitive::u16;
                pub type Field1 = ::core::primitive::u64;
            }
            impl ::subxt::events::StaticEvent for WeightsVersionKeySet {
                const PALLET: &'static str = "SubtensorModule";
                const EVENT: &'static str = "WeightsVersionKeySet";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct MinDifficultySet(
                pub min_difficulty_set::Field0,
                pub min_difficulty_set::Field1,
            );
            pub mod min_difficulty_set {
                use super::runtime_types;
                pub type Field0 = ::core::primitive::u16;
                pub type Field1 = ::core::primitive::u64;
            }
            impl ::subxt::events::StaticEvent for MinDifficultySet {
                const PALLET: &'static str = "SubtensorModule";
                const EVENT: &'static str = "MinDifficultySet";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct MaxDifficultySet(
                pub max_difficulty_set::Field0,
                pub max_difficulty_set::Field1,
            );
            pub mod max_difficulty_set {
                use super::runtime_types;
                pub type Field0 = ::core::primitive::u16;
                pub type Field1 = ::core::primitive::u64;
            }
            impl ::subxt::events::StaticEvent for MaxDifficultySet {
                const PALLET: &'static str = "SubtensorModule";
                const EVENT: &'static str = "MaxDifficultySet";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct ServingRateLimitSet(
                pub serving_rate_limit_set::Field0,
                pub serving_rate_limit_set::Field1,
            );
            pub mod serving_rate_limit_set {
                use super::runtime_types;
                pub type Field0 = ::core::primitive::u16;
                pub type Field1 = ::core::primitive::u64;
            }
            impl ::subxt::events::StaticEvent for ServingRateLimitSet {
                const PALLET: &'static str = "SubtensorModule";
                const EVENT: &'static str = "ServingRateLimitSet";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct BurnSet(pub burn_set::Field0, pub burn_set::Field1);
            pub mod burn_set {
                use super::runtime_types;
                pub type Field0 = ::core::primitive::u16;
                pub type Field1 = ::core::primitive::u64;
            }
            impl ::subxt::events::StaticEvent for BurnSet {
                const PALLET: &'static str = "SubtensorModule";
                const EVENT: &'static str = "BurnSet";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct MaxBurnSet(pub max_burn_set::Field0, pub max_burn_set::Field1);
            pub mod max_burn_set {
                use super::runtime_types;
                pub type Field0 = ::core::primitive::u16;
                pub type Field1 = ::core::primitive::u64;
            }
            impl ::subxt::events::StaticEvent for MaxBurnSet {
                const PALLET: &'static str = "SubtensorModule";
                const EVENT: &'static str = "MaxBurnSet";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct MinBurnSet(pub min_burn_set::Field0, pub min_burn_set::Field1);
            pub mod min_burn_set {
                use super::runtime_types;
                pub type Field0 = ::core::primitive::u16;
                pub type Field1 = ::core::primitive::u64;
            }
            impl ::subxt::events::StaticEvent for MinBurnSet {
                const PALLET: &'static str = "SubtensorModule";
                const EVENT: &'static str = "MinBurnSet";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct TxRateLimitSet(pub tx_rate_limit_set::Field0);
            pub mod tx_rate_limit_set {
                use super::runtime_types;
                pub type Field0 = ::core::primitive::u64;
            }
            impl ::subxt::events::StaticEvent for TxRateLimitSet {
                const PALLET: &'static str = "SubtensorModule";
                const EVENT: &'static str = "TxRateLimitSet";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Sudid(pub sudid::Field0);
            pub mod sudid {
                use super::runtime_types;
                pub type Field0 =
                    ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>;
            }
            impl ::subxt::events::StaticEvent for Sudid {
                const PALLET: &'static str = "SubtensorModule";
                const EVENT: &'static str = "Sudid";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct RegistrationAllowed(
                pub registration_allowed::Field0,
                pub registration_allowed::Field1,
            );
            pub mod registration_allowed {
                use super::runtime_types;
                pub type Field0 = ::core::primitive::u16;
                pub type Field1 = ::core::primitive::bool;
            }
            impl ::subxt::events::StaticEvent for RegistrationAllowed {
                const PALLET: &'static str = "SubtensorModule";
                const EVENT: &'static str = "RegistrationAllowed";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct PowRegistrationAllowed(
                pub pow_registration_allowed::Field0,
                pub pow_registration_allowed::Field1,
            );
            pub mod pow_registration_allowed {
                use super::runtime_types;
                pub type Field0 = ::core::primitive::u16;
                pub type Field1 = ::core::primitive::bool;
            }
            impl ::subxt::events::StaticEvent for PowRegistrationAllowed {
                const PALLET: &'static str = "SubtensorModule";
                const EVENT: &'static str = "PowRegistrationAllowed";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct TempoSet(pub tempo_set::Field0, pub tempo_set::Field1);
            pub mod tempo_set {
                use super::runtime_types;
                pub type Field0 = ::core::primitive::u16;
                pub type Field1 = ::core::primitive::u16;
            }
            impl ::subxt::events::StaticEvent for TempoSet {
                const PALLET: &'static str = "SubtensorModule";
                const EVENT: &'static str = "TempoSet";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct RAORecycledForRegistrationSet(
                pub rao_recycled_for_registration_set::Field0,
                pub rao_recycled_for_registration_set::Field1,
            );
            pub mod rao_recycled_for_registration_set {
                use super::runtime_types;
                pub type Field0 = ::core::primitive::u16;
                pub type Field1 = ::core::primitive::u64;
            }
            impl ::subxt::events::StaticEvent for RAORecycledForRegistrationSet {
                const PALLET: &'static str = "SubtensorModule";
                const EVENT: &'static str = "RAORecycledForRegistrationSet";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct SenateRequiredStakePercentSet(pub senate_required_stake_percent_set::Field0);
            pub mod senate_required_stake_percent_set {
                use super::runtime_types;
                pub type Field0 = ::core::primitive::u64;
            }
            impl ::subxt::events::StaticEvent for SenateRequiredStakePercentSet {
                const PALLET: &'static str = "SubtensorModule";
                const EVENT: &'static str = "SenateRequiredStakePercentSet";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct AdjustmentAlphaSet(
                pub adjustment_alpha_set::Field0,
                pub adjustment_alpha_set::Field1,
            );
            pub mod adjustment_alpha_set {
                use super::runtime_types;
                pub type Field0 = ::core::primitive::u16;
                pub type Field1 = ::core::primitive::u64;
            }
            impl ::subxt::events::StaticEvent for AdjustmentAlphaSet {
                const PALLET: &'static str = "SubtensorModule";
                const EVENT: &'static str = "AdjustmentAlphaSet";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Faucet(pub faucet::Field0, pub faucet::Field1);
            pub mod faucet {
                use super::runtime_types;
                pub type Field0 = ::subxt::utils::AccountId32;
                pub type Field1 = ::core::primitive::u64;
            }
            impl ::subxt::events::StaticEvent for Faucet {
                const PALLET: &'static str = "SubtensorModule";
                const EVENT: &'static str = "Faucet";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct SubnetOwnerCutSet(pub subnet_owner_cut_set::Field0);
            pub mod subnet_owner_cut_set {
                use super::runtime_types;
                pub type Field0 = ::core::primitive::u16;
            }
            impl ::subxt::events::StaticEvent for SubnetOwnerCutSet {
                const PALLET: &'static str = "SubtensorModule";
                const EVENT: &'static str = "SubnetOwnerCutSet";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct NetworkRateLimitSet(pub network_rate_limit_set::Field0);
            pub mod network_rate_limit_set {
                use super::runtime_types;
                pub type Field0 = ::core::primitive::u64;
            }
            impl ::subxt::events::StaticEvent for NetworkRateLimitSet {
                const PALLET: &'static str = "SubtensorModule";
                const EVENT: &'static str = "NetworkRateLimitSet";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct NetworkImmunityPeriodSet(pub network_immunity_period_set::Field0);
            pub mod network_immunity_period_set {
                use super::runtime_types;
                pub type Field0 = ::core::primitive::u64;
            }
            impl ::subxt::events::StaticEvent for NetworkImmunityPeriodSet {
                const PALLET: &'static str = "SubtensorModule";
                const EVENT: &'static str = "NetworkImmunityPeriodSet";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct NetworkMinLockCostSet(pub network_min_lock_cost_set::Field0);
            pub mod network_min_lock_cost_set {
                use super::runtime_types;
                pub type Field0 = ::core::primitive::u64;
            }
            impl ::subxt::events::StaticEvent for NetworkMinLockCostSet {
                const PALLET: &'static str = "SubtensorModule";
                const EVENT: &'static str = "NetworkMinLockCostSet";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct SubnetLimitSet(pub subnet_limit_set::Field0);
            pub mod subnet_limit_set {
                use super::runtime_types;
                pub type Field0 = ::core::primitive::u16;
            }
            impl ::subxt::events::StaticEvent for SubnetLimitSet {
                const PALLET: &'static str = "SubtensorModule";
                const EVENT: &'static str = "SubnetLimitSet";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct NetworkLockCostReductionIntervalSet(
                pub network_lock_cost_reduction_interval_set::Field0,
            );
            pub mod network_lock_cost_reduction_interval_set {
                use super::runtime_types;
                pub type Field0 = ::core::primitive::u64;
            }
            impl ::subxt::events::StaticEvent for NetworkLockCostReductionIntervalSet {
                const PALLET: &'static str = "SubtensorModule";
                const EVENT: &'static str = "NetworkLockCostReductionIntervalSet";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct HotkeySwapped {
                pub coldkey: hotkey_swapped::Coldkey,
                pub old_hotkey: hotkey_swapped::OldHotkey,
                pub new_hotkey: hotkey_swapped::NewHotkey,
            }
            pub mod hotkey_swapped {
                use super::runtime_types;
                pub type Coldkey = ::subxt::utils::AccountId32;
                pub type OldHotkey = ::subxt::utils::AccountId32;
                pub type NewHotkey = ::subxt::utils::AccountId32;
            }
            impl ::subxt::events::StaticEvent for HotkeySwapped {
                const PALLET: &'static str = "SubtensorModule";
                const EVENT: &'static str = "HotkeySwapped";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub mod types {
                use super::runtime_types;
                pub mod senate_required_stake_percentage {
                    use super::runtime_types;
                    pub type SenateRequiredStakePercentage = ::core::primitive::u64;
                }
                pub mod total_stake {
                    use super::runtime_types;
                    pub type TotalStake = ::core::primitive::u64;
                }
                pub mod default_take {
                    use super::runtime_types;
                    pub type DefaultTake = ::core::primitive::u16;
                }
                pub mod block_emission {
                    use super::runtime_types;
                    pub type BlockEmission = ::core::primitive::u64;
                }
                pub mod total_issuance {
                    use super::runtime_types;
                    pub type TotalIssuance = ::core::primitive::u64;
                }
                pub mod total_hotkey_stake {
                    use super::runtime_types;
                    pub type TotalHotkeyStake = ::core::primitive::u64;
                    pub type Param0 = ::subxt::utils::AccountId32;
                }
                pub mod total_coldkey_stake {
                    use super::runtime_types;
                    pub type TotalColdkeyStake = ::core::primitive::u64;
                    pub type Param0 = ::subxt::utils::AccountId32;
                }
                pub mod owner {
                    use super::runtime_types;
                    pub type Owner = ::subxt::utils::AccountId32;
                    pub type Param0 = ::subxt::utils::AccountId32;
                }
                pub mod delegates {
                    use super::runtime_types;
                    pub type Delegates = ::core::primitive::u16;
                    pub type Param0 = ::subxt::utils::AccountId32;
                }
                pub mod stake {
                    use super::runtime_types;
                    pub type Stake = ::core::primitive::u64;
                    pub type Param0 = ::subxt::utils::AccountId32;
                    pub type Param1 = ::subxt::utils::AccountId32;
                }
                pub mod used_work {
                    use super::runtime_types;
                    pub type UsedWork = ::core::primitive::u64;
                    pub type Param0 = [::core::primitive::u8];
                }
                pub mod burn {
                    use super::runtime_types;
                    pub type Burn = ::core::primitive::u64;
                    pub type Param0 = ::core::primitive::u16;
                }
                pub mod difficulty {
                    use super::runtime_types;
                    pub type Difficulty = ::core::primitive::u64;
                    pub type Param0 = ::core::primitive::u16;
                }
                pub mod min_burn {
                    use super::runtime_types;
                    pub type MinBurn = ::core::primitive::u64;
                    pub type Param0 = ::core::primitive::u16;
                }
                pub mod max_burn {
                    use super::runtime_types;
                    pub type MaxBurn = ::core::primitive::u64;
                    pub type Param0 = ::core::primitive::u16;
                }
                pub mod min_difficulty {
                    use super::runtime_types;
                    pub type MinDifficulty = ::core::primitive::u64;
                    pub type Param0 = ::core::primitive::u16;
                }
                pub mod max_difficulty {
                    use super::runtime_types;
                    pub type MaxDifficulty = ::core::primitive::u64;
                    pub type Param0 = ::core::primitive::u16;
                }
                pub mod last_adjustment_block {
                    use super::runtime_types;
                    pub type LastAdjustmentBlock = ::core::primitive::u64;
                    pub type Param0 = ::core::primitive::u16;
                }
                pub mod registrations_this_block {
                    use super::runtime_types;
                    pub type RegistrationsThisBlock = ::core::primitive::u16;
                    pub type Param0 = ::core::primitive::u16;
                }
                pub mod max_registrations_per_block {
                    use super::runtime_types;
                    pub type MaxRegistrationsPerBlock = ::core::primitive::u16;
                    pub type Param0 = ::core::primitive::u16;
                }
                pub mod rao_recycled_for_registration {
                    use super::runtime_types;
                    pub type RaoRecycledForRegistration = ::core::primitive::u64;
                    pub type Param0 = ::core::primitive::u16;
                }
                pub mod subnet_limit {
                    use super::runtime_types;
                    pub type SubnetLimit = ::core::primitive::u16;
                }
                pub mod total_networks {
                    use super::runtime_types;
                    pub type TotalNetworks = ::core::primitive::u16;
                }
                pub mod subnetwork_n {
                    use super::runtime_types;
                    pub type SubnetworkN = ::core::primitive::u16;
                    pub type Param0 = ::core::primitive::u16;
                }
                pub mod network_modality {
                    use super::runtime_types;
                    pub type NetworkModality = ::core::primitive::u16;
                    pub type Param0 = ::core::primitive::u16;
                }
                pub mod networks_added {
                    use super::runtime_types;
                    pub type NetworksAdded = ::core::primitive::bool;
                    pub type Param0 = ::core::primitive::u16;
                }
                pub mod is_network_member {
                    use super::runtime_types;
                    pub type IsNetworkMember = ::core::primitive::bool;
                    pub type Param0 = ::subxt::utils::AccountId32;
                    pub type Param1 = ::core::primitive::u16;
                }
                pub mod network_registration_allowed {
                    use super::runtime_types;
                    pub type NetworkRegistrationAllowed = ::core::primitive::bool;
                    pub type Param0 = ::core::primitive::u16;
                }
                pub mod network_pow_registration_allowed {
                    use super::runtime_types;
                    pub type NetworkPowRegistrationAllowed = ::core::primitive::bool;
                    pub type Param0 = ::core::primitive::u16;
                }
                pub mod network_registered_at {
                    use super::runtime_types;
                    pub type NetworkRegisteredAt = ::core::primitive::u64;
                    pub type Param0 = ::core::primitive::u16;
                }
                pub mod network_immunity_period {
                    use super::runtime_types;
                    pub type NetworkImmunityPeriod = ::core::primitive::u64;
                }
                pub mod network_last_registered {
                    use super::runtime_types;
                    pub type NetworkLastRegistered = ::core::primitive::u64;
                }
                pub mod network_min_allowed_uids {
                    use super::runtime_types;
                    pub type NetworkMinAllowedUids = ::core::primitive::u16;
                }
                pub mod network_min_lock_cost {
                    use super::runtime_types;
                    pub type NetworkMinLockCost = ::core::primitive::u64;
                }
                pub mod network_last_lock_cost {
                    use super::runtime_types;
                    pub type NetworkLastLockCost = ::core::primitive::u64;
                }
                pub mod network_lock_reduction_interval {
                    use super::runtime_types;
                    pub type NetworkLockReductionInterval = ::core::primitive::u64;
                }
                pub mod subnet_owner_cut {
                    use super::runtime_types;
                    pub type SubnetOwnerCut = ::core::primitive::u16;
                }
                pub mod network_rate_limit {
                    use super::runtime_types;
                    pub type NetworkRateLimit = ::core::primitive::u64;
                }
                pub mod tempo {
                    use super::runtime_types;
                    pub type Tempo = ::core::primitive::u16;
                    pub type Param0 = ::core::primitive::u16;
                }
                pub mod emission_values {
                    use super::runtime_types;
                    pub type EmissionValues = ::core::primitive::u64;
                    pub type Param0 = ::core::primitive::u16;
                }
                pub mod pending_emission {
                    use super::runtime_types;
                    pub type PendingEmission = ::core::primitive::u64;
                    pub type Param0 = ::core::primitive::u16;
                }
                pub mod blocks_since_last_step {
                    use super::runtime_types;
                    pub type BlocksSinceLastStep = ::core::primitive::u64;
                    pub type Param0 = ::core::primitive::u16;
                }
                pub mod last_mechansim_step_block {
                    use super::runtime_types;
                    pub type LastMechansimStepBlock = ::core::primitive::u64;
                    pub type Param0 = ::core::primitive::u16;
                }
                pub mod subnet_owner {
                    use super::runtime_types;
                    pub type SubnetOwner = ::subxt::utils::AccountId32;
                    pub type Param0 = ::core::primitive::u16;
                }
                pub mod subnet_locked {
                    use super::runtime_types;
                    pub type SubnetLocked = ::core::primitive::u64;
                    pub type Param0 = ::core::primitive::u16;
                }
                pub mod tx_rate_limit {
                    use super::runtime_types;
                    pub type TxRateLimit = ::core::primitive::u64;
                }
                pub mod last_tx_block {
                    use super::runtime_types;
                    pub type LastTxBlock = ::core::primitive::u64;
                    pub type Param0 = ::subxt::utils::AccountId32;
                }
                pub mod serving_rate_limit {
                    use super::runtime_types;
                    pub type ServingRateLimit = ::core::primitive::u64;
                    pub type Param0 = ::core::primitive::u16;
                }
                pub mod axons {
                    use super::runtime_types;
                    pub type Axons = runtime_types::pallet_subtensor::pallet::AxonInfo;
                    pub type Param0 = ::core::primitive::u16;
                    pub type Param1 = ::subxt::utils::AccountId32;
                }
                pub mod prometheus {
                    use super::runtime_types;
                    pub type Prometheus = runtime_types::pallet_subtensor::pallet::PrometheusInfo;
                    pub type Param0 = ::core::primitive::u16;
                    pub type Param1 = ::subxt::utils::AccountId32;
                }
                pub mod rho {
                    use super::runtime_types;
                    pub type Rho = ::core::primitive::u16;
                    pub type Param0 = ::core::primitive::u16;
                }
                pub mod kappa {
                    use super::runtime_types;
                    pub type Kappa = ::core::primitive::u16;
                    pub type Param0 = ::core::primitive::u16;
                }
                pub mod neurons_to_prune_at_next_epoch {
                    use super::runtime_types;
                    pub type NeuronsToPruneAtNextEpoch = ::core::primitive::u16;
                    pub type Param0 = ::core::primitive::u16;
                }
                pub mod registrations_this_interval {
                    use super::runtime_types;
                    pub type RegistrationsThisInterval = ::core::primitive::u16;
                    pub type Param0 = ::core::primitive::u16;
                }
                pub mod pow_registrations_this_interval {
                    use super::runtime_types;
                    pub type PowRegistrationsThisInterval = ::core::primitive::u16;
                    pub type Param0 = ::core::primitive::u16;
                }
                pub mod burn_registrations_this_interval {
                    use super::runtime_types;
                    pub type BurnRegistrationsThisInterval = ::core::primitive::u16;
                    pub type Param0 = ::core::primitive::u16;
                }
                pub mod max_allowed_uids {
                    use super::runtime_types;
                    pub type MaxAllowedUids = ::core::primitive::u16;
                    pub type Param0 = ::core::primitive::u16;
                }
                pub mod immunity_period {
                    use super::runtime_types;
                    pub type ImmunityPeriod = ::core::primitive::u16;
                    pub type Param0 = ::core::primitive::u16;
                }
                pub mod activity_cutoff {
                    use super::runtime_types;
                    pub type ActivityCutoff = ::core::primitive::u16;
                    pub type Param0 = ::core::primitive::u16;
                }
                pub mod max_weights_limit {
                    use super::runtime_types;
                    pub type MaxWeightsLimit = ::core::primitive::u16;
                    pub type Param0 = ::core::primitive::u16;
                }
                pub mod weights_version_key {
                    use super::runtime_types;
                    pub type WeightsVersionKey = ::core::primitive::u64;
                    pub type Param0 = ::core::primitive::u16;
                }
                pub mod min_allowed_weights {
                    use super::runtime_types;
                    pub type MinAllowedWeights = ::core::primitive::u16;
                    pub type Param0 = ::core::primitive::u16;
                }
                pub mod max_allowed_validators {
                    use super::runtime_types;
                    pub type MaxAllowedValidators = ::core::primitive::u16;
                    pub type Param0 = ::core::primitive::u16;
                }
                pub mod adjustment_interval {
                    use super::runtime_types;
                    pub type AdjustmentInterval = ::core::primitive::u16;
                    pub type Param0 = ::core::primitive::u16;
                }
                pub mod bonds_moving_average {
                    use super::runtime_types;
                    pub type BondsMovingAverage = ::core::primitive::u64;
                    pub type Param0 = ::core::primitive::u16;
                }
                pub mod weights_set_rate_limit {
                    use super::runtime_types;
                    pub type WeightsSetRateLimit = ::core::primitive::u64;
                    pub type Param0 = ::core::primitive::u16;
                }
                pub mod validator_prune_len {
                    use super::runtime_types;
                    pub type ValidatorPruneLen = ::core::primitive::u64;
                    pub type Param0 = ::core::primitive::u16;
                }
                pub mod scaling_law_power {
                    use super::runtime_types;
                    pub type ScalingLawPower = ::core::primitive::u16;
                    pub type Param0 = ::core::primitive::u16;
                }
                pub mod target_registrations_per_interval {
                    use super::runtime_types;
                    pub type TargetRegistrationsPerInterval = ::core::primitive::u16;
                    pub type Param0 = ::core::primitive::u16;
                }
                pub mod block_at_registration {
                    use super::runtime_types;
                    pub type BlockAtRegistration = ::core::primitive::u64;
                    pub type Param0 = ::core::primitive::u16;
                    pub type Param1 = ::core::primitive::u16;
                }
                pub mod adjustment_alpha {
                    use super::runtime_types;
                    pub type AdjustmentAlpha = ::core::primitive::u64;
                    pub type Param0 = ::core::primitive::u16;
                }
                pub mod uids {
                    use super::runtime_types;
                    pub type Uids = ::core::primitive::u16;
                    pub type Param0 = ::core::primitive::u16;
                    pub type Param1 = ::subxt::utils::AccountId32;
                }
                pub mod keys {
                    use super::runtime_types;
                    pub type Keys = ::subxt::utils::AccountId32;
                    pub type Param0 = ::core::primitive::u16;
                    pub type Param1 = ::core::primitive::u16;
                }
                pub mod loaded_emission {
                    use super::runtime_types;
                    pub type LoadedEmission = ::std::vec::Vec<(
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u64,
                        ::core::primitive::u64,
                    )>;
                    pub type Param0 = ::core::primitive::u16;
                }
                pub mod active {
                    use super::runtime_types;
                    pub type Active = ::std::vec::Vec<::core::primitive::bool>;
                    pub type Param0 = ::core::primitive::u16;
                }
                pub mod rank {
                    use super::runtime_types;
                    pub type Rank = ::std::vec::Vec<::core::primitive::u16>;
                    pub type Param0 = ::core::primitive::u16;
                }
                pub mod trust {
                    use super::runtime_types;
                    pub type Trust = ::std::vec::Vec<::core::primitive::u16>;
                    pub type Param0 = ::core::primitive::u16;
                }
                pub mod consensus {
                    use super::runtime_types;
                    pub type Consensus = ::std::vec::Vec<::core::primitive::u16>;
                    pub type Param0 = ::core::primitive::u16;
                }
                pub mod incentive {
                    use super::runtime_types;
                    pub type Incentive = ::std::vec::Vec<::core::primitive::u16>;
                    pub type Param0 = ::core::primitive::u16;
                }
                pub mod dividends {
                    use super::runtime_types;
                    pub type Dividends = ::std::vec::Vec<::core::primitive::u16>;
                    pub type Param0 = ::core::primitive::u16;
                }
                pub mod emission {
                    use super::runtime_types;
                    pub type Emission = ::std::vec::Vec<::core::primitive::u64>;
                    pub type Param0 = ::core::primitive::u16;
                }
                pub mod last_update {
                    use super::runtime_types;
                    pub type LastUpdate = ::std::vec::Vec<::core::primitive::u64>;
                    pub type Param0 = ::core::primitive::u16;
                }
                pub mod validator_trust {
                    use super::runtime_types;
                    pub type ValidatorTrust = ::std::vec::Vec<::core::primitive::u16>;
                    pub type Param0 = ::core::primitive::u16;
                }
                pub mod pruning_scores {
                    use super::runtime_types;
                    pub type PruningScores = ::std::vec::Vec<::core::primitive::u16>;
                    pub type Param0 = ::core::primitive::u16;
                }
                pub mod validator_permit {
                    use super::runtime_types;
                    pub type ValidatorPermit = ::std::vec::Vec<::core::primitive::bool>;
                    pub type Param0 = ::core::primitive::u16;
                }
                pub mod weights {
                    use super::runtime_types;
                    pub type Weights =
                        ::std::vec::Vec<(::core::primitive::u16, ::core::primitive::u16)>;
                    pub type Param0 = ::core::primitive::u16;
                    pub type Param1 = ::core::primitive::u16;
                }
                pub mod bonds {
                    use super::runtime_types;
                    pub type Bonds =
                        ::std::vec::Vec<(::core::primitive::u16, ::core::primitive::u16)>;
                    pub type Param0 = ::core::primitive::u16;
                    pub type Param1 = ::core::primitive::u16;
                }
            }
            pub struct StorageApi;
            impl StorageApi {
                pub fn senate_required_stake_percentage(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::senate_required_stake_percentage::SenateRequiredStakePercentage,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "SubtensorModule",
                        "SenateRequiredStakePercentage",
                        vec![],
                        [
                            113u8, 251u8, 37u8, 5u8, 78u8, 161u8, 44u8, 216u8, 5u8, 216u8, 141u8,
                            243u8, 254u8, 116u8, 149u8, 171u8, 168u8, 21u8, 79u8, 43u8, 40u8, 14u8,
                            30u8, 89u8, 216u8, 35u8, 80u8, 85u8, 17u8, 69u8, 252u8, 232u8,
                        ],
                    )
                }
                pub fn total_stake(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::total_stake::TotalStake,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "SubtensorModule",
                        "TotalStake",
                        vec![],
                        [
                            179u8, 22u8, 207u8, 201u8, 118u8, 12u8, 198u8, 201u8, 2u8, 169u8,
                            161u8, 226u8, 10u8, 93u8, 135u8, 70u8, 46u8, 220u8, 50u8, 228u8, 18u8,
                            135u8, 64u8, 233u8, 77u8, 95u8, 159u8, 199u8, 8u8, 47u8, 0u8, 60u8,
                        ],
                    )
                }
                pub fn default_take(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::default_take::DefaultTake,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "SubtensorModule",
                        "DefaultTake",
                        vec![],
                        [
                            254u8, 34u8, 70u8, 140u8, 215u8, 207u8, 106u8, 51u8, 152u8, 254u8,
                            219u8, 37u8, 46u8, 219u8, 220u8, 235u8, 12u8, 210u8, 177u8, 86u8,
                            211u8, 20u8, 80u8, 195u8, 83u8, 42u8, 99u8, 191u8, 19u8, 154u8, 93u8,
                            160u8,
                        ],
                    )
                }
                pub fn block_emission(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::block_emission::BlockEmission,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "SubtensorModule",
                        "BlockEmission",
                        vec![],
                        [
                            223u8, 151u8, 249u8, 123u8, 202u8, 93u8, 99u8, 232u8, 117u8, 221u8,
                            57u8, 50u8, 104u8, 65u8, 167u8, 199u8, 188u8, 167u8, 146u8, 32u8, 97u8,
                            156u8, 192u8, 88u8, 82u8, 228u8, 88u8, 171u8, 139u8, 207u8, 28u8,
                            183u8,
                        ],
                    )
                }
                pub fn total_issuance(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::total_issuance::TotalIssuance,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "SubtensorModule",
                        "TotalIssuance",
                        vec![],
                        [
                            157u8, 166u8, 49u8, 95u8, 245u8, 38u8, 96u8, 83u8, 23u8, 203u8, 246u8,
                            208u8, 251u8, 175u8, 40u8, 92u8, 163u8, 112u8, 43u8, 190u8, 14u8,
                            128u8, 45u8, 22u8, 157u8, 205u8, 181u8, 84u8, 79u8, 132u8, 160u8,
                            149u8,
                        ],
                    )
                }
                pub fn total_hotkey_stake_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::total_hotkey_stake::TotalHotkeyStake,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "SubtensorModule",
                        "TotalHotkeyStake",
                        vec![],
                        [
                            228u8, 18u8, 98u8, 62u8, 42u8, 215u8, 120u8, 221u8, 182u8, 254u8,
                            114u8, 37u8, 18u8, 65u8, 20u8, 226u8, 143u8, 83u8, 151u8, 191u8, 171u8,
                            176u8, 49u8, 110u8, 32u8, 123u8, 206u8, 102u8, 233u8, 96u8, 148u8,
                            52u8,
                        ],
                    )
                }
                pub fn total_hotkey_stake(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::total_hotkey_stake::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::total_hotkey_stake::TotalHotkeyStake,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "SubtensorModule",
                        "TotalHotkeyStake",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            228u8, 18u8, 98u8, 62u8, 42u8, 215u8, 120u8, 221u8, 182u8, 254u8,
                            114u8, 37u8, 18u8, 65u8, 20u8, 226u8, 143u8, 83u8, 151u8, 191u8, 171u8,
                            176u8, 49u8, 110u8, 32u8, 123u8, 206u8, 102u8, 233u8, 96u8, 148u8,
                            52u8,
                        ],
                    )
                }
                pub fn total_coldkey_stake_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::total_coldkey_stake::TotalColdkeyStake,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "SubtensorModule",
                        "TotalColdkeyStake",
                        vec![],
                        [
                            99u8, 229u8, 249u8, 40u8, 223u8, 180u8, 85u8, 199u8, 250u8, 243u8,
                            142u8, 94u8, 126u8, 202u8, 149u8, 111u8, 155u8, 197u8, 243u8, 225u8,
                            210u8, 27u8, 166u8, 210u8, 11u8, 87u8, 179u8, 133u8, 25u8, 50u8, 68u8,
                            149u8,
                        ],
                    )
                }
                pub fn total_coldkey_stake(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::total_coldkey_stake::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::total_coldkey_stake::TotalColdkeyStake,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "SubtensorModule",
                        "TotalColdkeyStake",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            99u8, 229u8, 249u8, 40u8, 223u8, 180u8, 85u8, 199u8, 250u8, 243u8,
                            142u8, 94u8, 126u8, 202u8, 149u8, 111u8, 155u8, 197u8, 243u8, 225u8,
                            210u8, 27u8, 166u8, 210u8, 11u8, 87u8, 179u8, 133u8, 25u8, 50u8, 68u8,
                            149u8,
                        ],
                    )
                }
                pub fn owner_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::owner::Owner,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "SubtensorModule",
                        "Owner",
                        vec![],
                        [
                            42u8, 187u8, 183u8, 236u8, 168u8, 211u8, 164u8, 206u8, 104u8, 89u8,
                            156u8, 12u8, 1u8, 65u8, 130u8, 16u8, 104u8, 229u8, 168u8, 245u8, 123u8,
                            31u8, 228u8, 72u8, 122u8, 14u8, 38u8, 188u8, 45u8, 35u8, 16u8, 132u8,
                        ],
                    )
                }
                pub fn owner(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::owner::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::owner::Owner,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "SubtensorModule",
                        "Owner",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            42u8, 187u8, 183u8, 236u8, 168u8, 211u8, 164u8, 206u8, 104u8, 89u8,
                            156u8, 12u8, 1u8, 65u8, 130u8, 16u8, 104u8, 229u8, 168u8, 245u8, 123u8,
                            31u8, 228u8, 72u8, 122u8, 14u8, 38u8, 188u8, 45u8, 35u8, 16u8, 132u8,
                        ],
                    )
                }
                pub fn delegates_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::delegates::Delegates,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "SubtensorModule",
                        "Delegates",
                        vec![],
                        [
                            44u8, 10u8, 104u8, 255u8, 105u8, 110u8, 131u8, 174u8, 247u8, 100u8,
                            165u8, 220u8, 198u8, 71u8, 212u8, 83u8, 238u8, 109u8, 61u8, 53u8,
                            175u8, 29u8, 233u8, 38u8, 56u8, 76u8, 41u8, 207u8, 169u8, 70u8, 141u8,
                            251u8,
                        ],
                    )
                }
                pub fn delegates(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::delegates::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::delegates::Delegates,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "SubtensorModule",
                        "Delegates",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            44u8, 10u8, 104u8, 255u8, 105u8, 110u8, 131u8, 174u8, 247u8, 100u8,
                            165u8, 220u8, 198u8, 71u8, 212u8, 83u8, 238u8, 109u8, 61u8, 53u8,
                            175u8, 29u8, 233u8, 38u8, 56u8, 76u8, 41u8, 207u8, 169u8, 70u8, 141u8,
                            251u8,
                        ],
                    )
                }
                pub fn stake_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::stake::Stake,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "SubtensorModule",
                        "Stake",
                        vec![],
                        [
                            28u8, 30u8, 204u8, 218u8, 103u8, 20u8, 5u8, 28u8, 97u8, 212u8, 142u8,
                            210u8, 32u8, 44u8, 179u8, 22u8, 141u8, 86u8, 53u8, 97u8, 169u8, 50u8,
                            157u8, 66u8, 180u8, 240u8, 142u8, 198u8, 252u8, 13u8, 25u8, 60u8,
                        ],
                    )
                }
                pub fn stake_iter1(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::stake::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::stake::Stake,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "SubtensorModule",
                        "Stake",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            28u8, 30u8, 204u8, 218u8, 103u8, 20u8, 5u8, 28u8, 97u8, 212u8, 142u8,
                            210u8, 32u8, 44u8, 179u8, 22u8, 141u8, 86u8, 53u8, 97u8, 169u8, 50u8,
                            157u8, 66u8, 180u8, 240u8, 142u8, 198u8, 252u8, 13u8, 25u8, 60u8,
                        ],
                    )
                }
                pub fn stake(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::stake::Param0>,
                    _1: impl ::std::borrow::Borrow<types::stake::Param1>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::stake::Stake,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "SubtensorModule",
                        "Stake",
                        vec![
                            ::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
                            ::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
                        ],
                        [
                            28u8, 30u8, 204u8, 218u8, 103u8, 20u8, 5u8, 28u8, 97u8, 212u8, 142u8,
                            210u8, 32u8, 44u8, 179u8, 22u8, 141u8, 86u8, 53u8, 97u8, 169u8, 50u8,
                            157u8, 66u8, 180u8, 240u8, 142u8, 198u8, 252u8, 13u8, 25u8, 60u8,
                        ],
                    )
                }
                pub fn used_work_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::used_work::UsedWork,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "SubtensorModule",
                        "UsedWork",
                        vec![],
                        [
                            59u8, 93u8, 120u8, 178u8, 19u8, 194u8, 54u8, 240u8, 132u8, 243u8,
                            106u8, 24u8, 176u8, 106u8, 59u8, 130u8, 174u8, 127u8, 79u8, 107u8,
                            253u8, 172u8, 238u8, 193u8, 180u8, 221u8, 154u8, 66u8, 179u8, 190u8,
                            192u8, 202u8,
                        ],
                    )
                }
                pub fn used_work(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::used_work::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::used_work::UsedWork,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "SubtensorModule",
                        "UsedWork",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            59u8, 93u8, 120u8, 178u8, 19u8, 194u8, 54u8, 240u8, 132u8, 243u8,
                            106u8, 24u8, 176u8, 106u8, 59u8, 130u8, 174u8, 127u8, 79u8, 107u8,
                            253u8, 172u8, 238u8, 193u8, 180u8, 221u8, 154u8, 66u8, 179u8, 190u8,
                            192u8, 202u8,
                        ],
                    )
                }
                pub fn burn_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::burn::Burn,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "SubtensorModule",
                        "Burn",
                        vec![],
                        [
                            134u8, 249u8, 72u8, 227u8, 164u8, 150u8, 29u8, 202u8, 167u8, 78u8,
                            169u8, 202u8, 117u8, 18u8, 74u8, 177u8, 170u8, 54u8, 189u8, 3u8, 191u8,
                            118u8, 230u8, 152u8, 143u8, 64u8, 28u8, 220u8, 17u8, 188u8, 95u8, 85u8,
                        ],
                    )
                }
                pub fn burn(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::burn::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::burn::Burn,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "SubtensorModule",
                        "Burn",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            134u8, 249u8, 72u8, 227u8, 164u8, 150u8, 29u8, 202u8, 167u8, 78u8,
                            169u8, 202u8, 117u8, 18u8, 74u8, 177u8, 170u8, 54u8, 189u8, 3u8, 191u8,
                            118u8, 230u8, 152u8, 143u8, 64u8, 28u8, 220u8, 17u8, 188u8, 95u8, 85u8,
                        ],
                    )
                }
                pub fn difficulty_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::difficulty::Difficulty,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "SubtensorModule",
                        "Difficulty",
                        vec![],
                        [
                            251u8, 34u8, 39u8, 171u8, 188u8, 29u8, 213u8, 224u8, 58u8, 140u8,
                            159u8, 80u8, 99u8, 174u8, 82u8, 230u8, 30u8, 53u8, 104u8, 185u8, 51u8,
                            144u8, 121u8, 225u8, 20u8, 128u8, 197u8, 237u8, 179u8, 243u8, 169u8,
                            16u8,
                        ],
                    )
                }
                pub fn difficulty(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::difficulty::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::difficulty::Difficulty,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "SubtensorModule",
                        "Difficulty",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            251u8, 34u8, 39u8, 171u8, 188u8, 29u8, 213u8, 224u8, 58u8, 140u8,
                            159u8, 80u8, 99u8, 174u8, 82u8, 230u8, 30u8, 53u8, 104u8, 185u8, 51u8,
                            144u8, 121u8, 225u8, 20u8, 128u8, 197u8, 237u8, 179u8, 243u8, 169u8,
                            16u8,
                        ],
                    )
                }
                pub fn min_burn_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::min_burn::MinBurn,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "SubtensorModule",
                        "MinBurn",
                        vec![],
                        [
                            19u8, 248u8, 152u8, 23u8, 215u8, 212u8, 154u8, 20u8, 192u8, 175u8,
                            155u8, 103u8, 211u8, 111u8, 68u8, 95u8, 178u8, 178u8, 69u8, 101u8,
                            40u8, 57u8, 114u8, 12u8, 177u8, 156u8, 18u8, 151u8, 11u8, 231u8, 22u8,
                            126u8,
                        ],
                    )
                }
                pub fn min_burn(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::min_burn::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::min_burn::MinBurn,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "SubtensorModule",
                        "MinBurn",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            19u8, 248u8, 152u8, 23u8, 215u8, 212u8, 154u8, 20u8, 192u8, 175u8,
                            155u8, 103u8, 211u8, 111u8, 68u8, 95u8, 178u8, 178u8, 69u8, 101u8,
                            40u8, 57u8, 114u8, 12u8, 177u8, 156u8, 18u8, 151u8, 11u8, 231u8, 22u8,
                            126u8,
                        ],
                    )
                }
                pub fn max_burn_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::max_burn::MaxBurn,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "SubtensorModule",
                        "MaxBurn",
                        vec![],
                        [
                            0u8, 195u8, 55u8, 83u8, 46u8, 216u8, 74u8, 42u8, 213u8, 195u8, 52u8,
                            6u8, 8u8, 168u8, 21u8, 78u8, 78u8, 188u8, 54u8, 6u8, 254u8, 140u8, 3u8,
                            0u8, 184u8, 108u8, 1u8, 150u8, 42u8, 245u8, 125u8, 144u8,
                        ],
                    )
                }
                pub fn max_burn(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::max_burn::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::max_burn::MaxBurn,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "SubtensorModule",
                        "MaxBurn",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            0u8, 195u8, 55u8, 83u8, 46u8, 216u8, 74u8, 42u8, 213u8, 195u8, 52u8,
                            6u8, 8u8, 168u8, 21u8, 78u8, 78u8, 188u8, 54u8, 6u8, 254u8, 140u8, 3u8,
                            0u8, 184u8, 108u8, 1u8, 150u8, 42u8, 245u8, 125u8, 144u8,
                        ],
                    )
                }
                pub fn min_difficulty_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::min_difficulty::MinDifficulty,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "SubtensorModule",
                        "MinDifficulty",
                        vec![],
                        [
                            186u8, 124u8, 59u8, 202u8, 23u8, 68u8, 43u8, 124u8, 166u8, 157u8,
                            228u8, 253u8, 99u8, 174u8, 95u8, 37u8, 178u8, 38u8, 240u8, 168u8,
                            139u8, 123u8, 81u8, 66u8, 146u8, 179u8, 179u8, 217u8, 45u8, 203u8,
                            135u8, 12u8,
                        ],
                    )
                }
                pub fn min_difficulty(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::min_difficulty::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::min_difficulty::MinDifficulty,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "SubtensorModule",
                        "MinDifficulty",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            186u8, 124u8, 59u8, 202u8, 23u8, 68u8, 43u8, 124u8, 166u8, 157u8,
                            228u8, 253u8, 99u8, 174u8, 95u8, 37u8, 178u8, 38u8, 240u8, 168u8,
                            139u8, 123u8, 81u8, 66u8, 146u8, 179u8, 179u8, 217u8, 45u8, 203u8,
                            135u8, 12u8,
                        ],
                    )
                }
                pub fn max_difficulty_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::max_difficulty::MaxDifficulty,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "SubtensorModule",
                        "MaxDifficulty",
                        vec![],
                        [
                            46u8, 129u8, 147u8, 99u8, 203u8, 64u8, 250u8, 115u8, 78u8, 126u8, 86u8,
                            90u8, 91u8, 101u8, 252u8, 190u8, 89u8, 98u8, 95u8, 209u8, 168u8, 144u8,
                            206u8, 209u8, 230u8, 119u8, 170u8, 174u8, 84u8, 75u8, 213u8, 222u8,
                        ],
                    )
                }
                pub fn max_difficulty(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::max_difficulty::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::max_difficulty::MaxDifficulty,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "SubtensorModule",
                        "MaxDifficulty",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            46u8, 129u8, 147u8, 99u8, 203u8, 64u8, 250u8, 115u8, 78u8, 126u8, 86u8,
                            90u8, 91u8, 101u8, 252u8, 190u8, 89u8, 98u8, 95u8, 209u8, 168u8, 144u8,
                            206u8, 209u8, 230u8, 119u8, 170u8, 174u8, 84u8, 75u8, 213u8, 222u8,
                        ],
                    )
                }
                pub fn last_adjustment_block_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::last_adjustment_block::LastAdjustmentBlock,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "SubtensorModule",
                        "LastAdjustmentBlock",
                        vec![],
                        [
                            144u8, 153u8, 243u8, 4u8, 76u8, 97u8, 87u8, 84u8, 16u8, 101u8, 8u8,
                            162u8, 236u8, 213u8, 60u8, 161u8, 131u8, 22u8, 249u8, 109u8, 242u8,
                            70u8, 138u8, 19u8, 19u8, 224u8, 199u8, 163u8, 240u8, 219u8, 187u8,
                            201u8,
                        ],
                    )
                }
                pub fn last_adjustment_block(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::last_adjustment_block::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::last_adjustment_block::LastAdjustmentBlock,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "SubtensorModule",
                        "LastAdjustmentBlock",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            144u8, 153u8, 243u8, 4u8, 76u8, 97u8, 87u8, 84u8, 16u8, 101u8, 8u8,
                            162u8, 236u8, 213u8, 60u8, 161u8, 131u8, 22u8, 249u8, 109u8, 242u8,
                            70u8, 138u8, 19u8, 19u8, 224u8, 199u8, 163u8, 240u8, 219u8, 187u8,
                            201u8,
                        ],
                    )
                }
                pub fn registrations_this_block_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::registrations_this_block::RegistrationsThisBlock,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "SubtensorModule",
                        "RegistrationsThisBlock",
                        vec![],
                        [
                            198u8, 109u8, 86u8, 170u8, 84u8, 243u8, 34u8, 155u8, 134u8, 251u8,
                            21u8, 201u8, 98u8, 132u8, 34u8, 187u8, 239u8, 182u8, 72u8, 144u8, 4u8,
                            47u8, 32u8, 207u8, 5u8, 54u8, 210u8, 249u8, 58u8, 211u8, 113u8, 113u8,
                        ],
                    )
                }
                pub fn registrations_this_block(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::registrations_this_block::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::registrations_this_block::RegistrationsThisBlock,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "SubtensorModule",
                        "RegistrationsThisBlock",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            198u8, 109u8, 86u8, 170u8, 84u8, 243u8, 34u8, 155u8, 134u8, 251u8,
                            21u8, 201u8, 98u8, 132u8, 34u8, 187u8, 239u8, 182u8, 72u8, 144u8, 4u8,
                            47u8, 32u8, 207u8, 5u8, 54u8, 210u8, 249u8, 58u8, 211u8, 113u8, 113u8,
                        ],
                    )
                }
                pub fn max_registrations_per_block_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::max_registrations_per_block::MaxRegistrationsPerBlock,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "SubtensorModule",
                        "MaxRegistrationsPerBlock",
                        vec![],
                        [
                            191u8, 117u8, 55u8, 65u8, 37u8, 248u8, 122u8, 37u8, 164u8, 225u8,
                            117u8, 242u8, 26u8, 106u8, 69u8, 2u8, 99u8, 9u8, 32u8, 125u8, 131u8,
                            215u8, 127u8, 37u8, 113u8, 234u8, 214u8, 107u8, 1u8, 20u8, 172u8,
                            209u8,
                        ],
                    )
                }
                pub fn max_registrations_per_block(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::max_registrations_per_block::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::max_registrations_per_block::MaxRegistrationsPerBlock,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "SubtensorModule",
                        "MaxRegistrationsPerBlock",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            191u8, 117u8, 55u8, 65u8, 37u8, 248u8, 122u8, 37u8, 164u8, 225u8,
                            117u8, 242u8, 26u8, 106u8, 69u8, 2u8, 99u8, 9u8, 32u8, 125u8, 131u8,
                            215u8, 127u8, 37u8, 113u8, 234u8, 214u8, 107u8, 1u8, 20u8, 172u8,
                            209u8,
                        ],
                    )
                }
                pub fn rao_recycled_for_registration_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::rao_recycled_for_registration::RaoRecycledForRegistration,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "SubtensorModule",
                        "RAORecycledForRegistration",
                        vec![],
                        [
                            124u8, 58u8, 21u8, 4u8, 81u8, 158u8, 21u8, 117u8, 241u8, 67u8, 244u8,
                            109u8, 179u8, 60u8, 157u8, 209u8, 46u8, 76u8, 232u8, 89u8, 152u8, 61u8,
                            230u8, 85u8, 32u8, 213u8, 63u8, 161u8, 129u8, 143u8, 234u8, 250u8,
                        ],
                    )
                }
                pub fn rao_recycled_for_registration(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::rao_recycled_for_registration::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::rao_recycled_for_registration::RaoRecycledForRegistration,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "SubtensorModule",
                        "RAORecycledForRegistration",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            124u8, 58u8, 21u8, 4u8, 81u8, 158u8, 21u8, 117u8, 241u8, 67u8, 244u8,
                            109u8, 179u8, 60u8, 157u8, 209u8, 46u8, 76u8, 232u8, 89u8, 152u8, 61u8,
                            230u8, 85u8, 32u8, 213u8, 63u8, 161u8, 129u8, 143u8, 234u8, 250u8,
                        ],
                    )
                }
                pub fn subnet_limit(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::subnet_limit::SubnetLimit,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "SubtensorModule",
                        "SubnetLimit",
                        vec![],
                        [
                            181u8, 187u8, 24u8, 149u8, 55u8, 209u8, 106u8, 70u8, 29u8, 5u8, 76u8,
                            171u8, 16u8, 95u8, 169u8, 228u8, 181u8, 150u8, 158u8, 138u8, 131u8,
                            87u8, 93u8, 12u8, 9u8, 221u8, 175u8, 5u8, 201u8, 195u8, 110u8, 89u8,
                        ],
                    )
                }
                pub fn total_networks(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::total_networks::TotalNetworks,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "SubtensorModule",
                        "TotalNetworks",
                        vec![],
                        [
                            132u8, 105u8, 133u8, 1u8, 223u8, 1u8, 229u8, 233u8, 214u8, 218u8,
                            161u8, 147u8, 170u8, 200u8, 141u8, 203u8, 140u8, 190u8, 33u8, 201u8,
                            135u8, 127u8, 85u8, 28u8, 145u8, 113u8, 61u8, 75u8, 51u8, 225u8, 47u8,
                            107u8,
                        ],
                    )
                }
                pub fn subnetwork_n_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::subnetwork_n::SubnetworkN,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "SubtensorModule",
                        "SubnetworkN",
                        vec![],
                        [
                            14u8, 190u8, 185u8, 215u8, 93u8, 134u8, 150u8, 83u8, 248u8, 254u8,
                            184u8, 105u8, 213u8, 65u8, 205u8, 128u8, 46u8, 234u8, 231u8, 176u8,
                            195u8, 175u8, 97u8, 75u8, 33u8, 209u8, 155u8, 55u8, 158u8, 0u8, 159u8,
                            140u8,
                        ],
                    )
                }
                pub fn subnetwork_n(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::subnetwork_n::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::subnetwork_n::SubnetworkN,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "SubtensorModule",
                        "SubnetworkN",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            14u8, 190u8, 185u8, 215u8, 93u8, 134u8, 150u8, 83u8, 248u8, 254u8,
                            184u8, 105u8, 213u8, 65u8, 205u8, 128u8, 46u8, 234u8, 231u8, 176u8,
                            195u8, 175u8, 97u8, 75u8, 33u8, 209u8, 155u8, 55u8, 158u8, 0u8, 159u8,
                            140u8,
                        ],
                    )
                }
                pub fn network_modality_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::network_modality::NetworkModality,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "SubtensorModule",
                        "NetworkModality",
                        vec![],
                        [
                            18u8, 56u8, 222u8, 196u8, 139u8, 52u8, 181u8, 222u8, 180u8, 3u8, 236u8,
                            9u8, 175u8, 221u8, 244u8, 75u8, 245u8, 170u8, 5u8, 44u8, 36u8, 185u8,
                            83u8, 81u8, 117u8, 164u8, 90u8, 195u8, 229u8, 128u8, 90u8, 3u8,
                        ],
                    )
                }
                pub fn network_modality(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::network_modality::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::network_modality::NetworkModality,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "SubtensorModule",
                        "NetworkModality",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            18u8, 56u8, 222u8, 196u8, 139u8, 52u8, 181u8, 222u8, 180u8, 3u8, 236u8,
                            9u8, 175u8, 221u8, 244u8, 75u8, 245u8, 170u8, 5u8, 44u8, 36u8, 185u8,
                            83u8, 81u8, 117u8, 164u8, 90u8, 195u8, 229u8, 128u8, 90u8, 3u8,
                        ],
                    )
                }
                pub fn networks_added_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::networks_added::NetworksAdded,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "SubtensorModule",
                        "NetworksAdded",
                        vec![],
                        [
                            246u8, 161u8, 17u8, 237u8, 203u8, 101u8, 133u8, 177u8, 241u8, 246u8,
                            131u8, 72u8, 167u8, 117u8, 117u8, 183u8, 50u8, 185u8, 129u8, 136u8,
                            132u8, 158u8, 194u8, 134u8, 208u8, 34u8, 38u8, 91u8, 47u8, 89u8, 4u8,
                            53u8,
                        ],
                    )
                }
                pub fn networks_added(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::networks_added::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::networks_added::NetworksAdded,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "SubtensorModule",
                        "NetworksAdded",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            246u8, 161u8, 17u8, 237u8, 203u8, 101u8, 133u8, 177u8, 241u8, 246u8,
                            131u8, 72u8, 167u8, 117u8, 117u8, 183u8, 50u8, 185u8, 129u8, 136u8,
                            132u8, 158u8, 194u8, 134u8, 208u8, 34u8, 38u8, 91u8, 47u8, 89u8, 4u8,
                            53u8,
                        ],
                    )
                }
                pub fn is_network_member_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::is_network_member::IsNetworkMember,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "SubtensorModule",
                        "IsNetworkMember",
                        vec![],
                        [
                            173u8, 44u8, 159u8, 45u8, 191u8, 17u8, 225u8, 54u8, 118u8, 238u8,
                            172u8, 202u8, 215u8, 188u8, 112u8, 230u8, 77u8, 134u8, 91u8, 35u8,
                            26u8, 107u8, 129u8, 153u8, 206u8, 3u8, 119u8, 130u8, 70u8, 20u8, 14u8,
                            112u8,
                        ],
                    )
                }
                pub fn is_network_member_iter1(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::is_network_member::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::is_network_member::IsNetworkMember,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "SubtensorModule",
                        "IsNetworkMember",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            173u8, 44u8, 159u8, 45u8, 191u8, 17u8, 225u8, 54u8, 118u8, 238u8,
                            172u8, 202u8, 215u8, 188u8, 112u8, 230u8, 77u8, 134u8, 91u8, 35u8,
                            26u8, 107u8, 129u8, 153u8, 206u8, 3u8, 119u8, 130u8, 70u8, 20u8, 14u8,
                            112u8,
                        ],
                    )
                }
                pub fn is_network_member(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::is_network_member::Param0>,
                    _1: impl ::std::borrow::Borrow<types::is_network_member::Param1>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::is_network_member::IsNetworkMember,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "SubtensorModule",
                        "IsNetworkMember",
                        vec![
                            ::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
                            ::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
                        ],
                        [
                            173u8, 44u8, 159u8, 45u8, 191u8, 17u8, 225u8, 54u8, 118u8, 238u8,
                            172u8, 202u8, 215u8, 188u8, 112u8, 230u8, 77u8, 134u8, 91u8, 35u8,
                            26u8, 107u8, 129u8, 153u8, 206u8, 3u8, 119u8, 130u8, 70u8, 20u8, 14u8,
                            112u8,
                        ],
                    )
                }
                pub fn network_registration_allowed_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::network_registration_allowed::NetworkRegistrationAllowed,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "SubtensorModule",
                        "NetworkRegistrationAllowed",
                        vec![],
                        [
                            42u8, 61u8, 247u8, 161u8, 77u8, 218u8, 186u8, 247u8, 253u8, 75u8,
                            228u8, 175u8, 18u8, 122u8, 150u8, 110u8, 10u8, 166u8, 209u8, 232u8,
                            74u8, 8u8, 85u8, 234u8, 69u8, 92u8, 14u8, 101u8, 212u8, 207u8, 47u8,
                            235u8,
                        ],
                    )
                }
                pub fn network_registration_allowed(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::network_registration_allowed::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::network_registration_allowed::NetworkRegistrationAllowed,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "SubtensorModule",
                        "NetworkRegistrationAllowed",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            42u8, 61u8, 247u8, 161u8, 77u8, 218u8, 186u8, 247u8, 253u8, 75u8,
                            228u8, 175u8, 18u8, 122u8, 150u8, 110u8, 10u8, 166u8, 209u8, 232u8,
                            74u8, 8u8, 85u8, 234u8, 69u8, 92u8, 14u8, 101u8, 212u8, 207u8, 47u8,
                            235u8,
                        ],
                    )
                }
                pub fn network_pow_registration_allowed_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::network_pow_registration_allowed::NetworkPowRegistrationAllowed,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "SubtensorModule",
                        "NetworkPowRegistrationAllowed",
                        vec![],
                        [
                            206u8, 57u8, 101u8, 211u8, 195u8, 185u8, 134u8, 48u8, 225u8, 124u8,
                            27u8, 217u8, 135u8, 116u8, 15u8, 223u8, 193u8, 45u8, 39u8, 232u8,
                            103u8, 182u8, 251u8, 0u8, 179u8, 9u8, 1u8, 35u8, 186u8, 90u8, 221u8,
                            217u8,
                        ],
                    )
                }
                pub fn network_pow_registration_allowed(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::network_pow_registration_allowed::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::network_pow_registration_allowed::NetworkPowRegistrationAllowed,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "SubtensorModule",
                        "NetworkPowRegistrationAllowed",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            206u8, 57u8, 101u8, 211u8, 195u8, 185u8, 134u8, 48u8, 225u8, 124u8,
                            27u8, 217u8, 135u8, 116u8, 15u8, 223u8, 193u8, 45u8, 39u8, 232u8,
                            103u8, 182u8, 251u8, 0u8, 179u8, 9u8, 1u8, 35u8, 186u8, 90u8, 221u8,
                            217u8,
                        ],
                    )
                }
                pub fn network_registered_at_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::network_registered_at::NetworkRegisteredAt,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "SubtensorModule",
                        "NetworkRegisteredAt",
                        vec![],
                        [
                            123u8, 234u8, 64u8, 248u8, 32u8, 119u8, 192u8, 176u8, 98u8, 201u8,
                            74u8, 210u8, 34u8, 148u8, 254u8, 127u8, 10u8, 31u8, 205u8, 17u8, 43u8,
                            177u8, 159u8, 189u8, 199u8, 72u8, 1u8, 246u8, 96u8, 73u8, 12u8, 34u8,
                        ],
                    )
                }
                pub fn network_registered_at(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::network_registered_at::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::network_registered_at::NetworkRegisteredAt,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "SubtensorModule",
                        "NetworkRegisteredAt",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            123u8, 234u8, 64u8, 248u8, 32u8, 119u8, 192u8, 176u8, 98u8, 201u8,
                            74u8, 210u8, 34u8, 148u8, 254u8, 127u8, 10u8, 31u8, 205u8, 17u8, 43u8,
                            177u8, 159u8, 189u8, 199u8, 72u8, 1u8, 246u8, 96u8, 73u8, 12u8, 34u8,
                        ],
                    )
                }
                pub fn network_immunity_period(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::network_immunity_period::NetworkImmunityPeriod,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "SubtensorModule",
                        "NetworkImmunityPeriod",
                        vec![],
                        [
                            165u8, 72u8, 132u8, 22u8, 239u8, 25u8, 191u8, 35u8, 164u8, 140u8,
                            171u8, 36u8, 81u8, 166u8, 171u8, 238u8, 127u8, 143u8, 162u8, 92u8,
                            36u8, 203u8, 229u8, 10u8, 162u8, 91u8, 121u8, 97u8, 13u8, 105u8, 18u8,
                            91u8,
                        ],
                    )
                }
                pub fn network_last_registered(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::network_last_registered::NetworkLastRegistered,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "SubtensorModule",
                        "NetworkLastRegistered",
                        vec![],
                        [
                            111u8, 106u8, 0u8, 115u8, 27u8, 161u8, 40u8, 182u8, 197u8, 217u8,
                            167u8, 183u8, 43u8, 157u8, 42u8, 107u8, 108u8, 100u8, 42u8, 67u8,
                            174u8, 138u8, 109u8, 98u8, 242u8, 15u8, 54u8, 32u8, 201u8, 169u8, 39u8,
                            40u8,
                        ],
                    )
                }
                pub fn network_min_allowed_uids(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::network_min_allowed_uids::NetworkMinAllowedUids,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "SubtensorModule",
                        "NetworkMinAllowedUids",
                        vec![],
                        [
                            192u8, 136u8, 52u8, 54u8, 8u8, 30u8, 50u8, 185u8, 178u8, 182u8, 121u8,
                            72u8, 97u8, 21u8, 8u8, 97u8, 74u8, 54u8, 226u8, 177u8, 148u8, 111u8,
                            212u8, 117u8, 23u8, 187u8, 57u8, 149u8, 30u8, 35u8, 147u8, 87u8,
                        ],
                    )
                }
                pub fn network_min_lock_cost(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::network_min_lock_cost::NetworkMinLockCost,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "SubtensorModule",
                        "NetworkMinLockCost",
                        vec![],
                        [
                            121u8, 246u8, 74u8, 53u8, 75u8, 35u8, 107u8, 91u8, 134u8, 130u8, 132u8,
                            220u8, 219u8, 99u8, 121u8, 198u8, 164u8, 152u8, 88u8, 82u8, 228u8,
                            197u8, 89u8, 145u8, 100u8, 28u8, 123u8, 54u8, 14u8, 238u8, 90u8, 123u8,
                        ],
                    )
                }
                pub fn network_last_lock_cost(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::network_last_lock_cost::NetworkLastLockCost,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "SubtensorModule",
                        "NetworkLastLockCost",
                        vec![],
                        [
                            204u8, 201u8, 165u8, 119u8, 228u8, 146u8, 239u8, 232u8, 251u8, 98u8,
                            7u8, 78u8, 57u8, 16u8, 50u8, 12u8, 121u8, 144u8, 185u8, 4u8, 1u8, 5u8,
                            172u8, 48u8, 128u8, 154u8, 198u8, 55u8, 81u8, 154u8, 96u8, 140u8,
                        ],
                    )
                }
                pub fn network_lock_reduction_interval(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::network_lock_reduction_interval::NetworkLockReductionInterval,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "SubtensorModule",
                        "NetworkLockReductionInterval",
                        vec![],
                        [
                            152u8, 66u8, 107u8, 209u8, 243u8, 1u8, 28u8, 95u8, 254u8, 78u8, 47u8,
                            219u8, 35u8, 112u8, 73u8, 86u8, 210u8, 24u8, 196u8, 124u8, 28u8, 223u8,
                            82u8, 34u8, 84u8, 70u8, 76u8, 182u8, 38u8, 196u8, 199u8, 244u8,
                        ],
                    )
                }
                pub fn subnet_owner_cut(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::subnet_owner_cut::SubnetOwnerCut,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "SubtensorModule",
                        "SubnetOwnerCut",
                        vec![],
                        [
                            121u8, 122u8, 222u8, 69u8, 52u8, 72u8, 210u8, 26u8, 120u8, 3u8, 126u8,
                            203u8, 87u8, 116u8, 72u8, 25u8, 142u8, 231u8, 36u8, 26u8, 121u8, 174u8,
                            151u8, 102u8, 2u8, 104u8, 178u8, 168u8, 76u8, 255u8, 139u8, 3u8,
                        ],
                    )
                }
                pub fn network_rate_limit(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::network_rate_limit::NetworkRateLimit,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "SubtensorModule",
                        "NetworkRateLimit",
                        vec![],
                        [
                            61u8, 107u8, 0u8, 71u8, 139u8, 133u8, 10u8, 238u8, 249u8, 102u8, 121u8,
                            59u8, 74u8, 155u8, 129u8, 16u8, 44u8, 90u8, 163u8, 19u8, 15u8, 22u8,
                            6u8, 44u8, 254u8, 120u8, 15u8, 117u8, 73u8, 85u8, 73u8, 74u8,
                        ],
                    )
                }
                pub fn tempo_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::tempo::Tempo,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "SubtensorModule",
                        "Tempo",
                        vec![],
                        [
                            233u8, 84u8, 20u8, 72u8, 111u8, 149u8, 177u8, 55u8, 228u8, 101u8,
                            215u8, 149u8, 241u8, 101u8, 136u8, 32u8, 205u8, 10u8, 216u8, 211u8,
                            47u8, 37u8, 196u8, 207u8, 125u8, 194u8, 240u8, 162u8, 253u8, 229u8,
                            174u8, 201u8,
                        ],
                    )
                }
                pub fn tempo(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::tempo::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::tempo::Tempo,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "SubtensorModule",
                        "Tempo",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            233u8, 84u8, 20u8, 72u8, 111u8, 149u8, 177u8, 55u8, 228u8, 101u8,
                            215u8, 149u8, 241u8, 101u8, 136u8, 32u8, 205u8, 10u8, 216u8, 211u8,
                            47u8, 37u8, 196u8, 207u8, 125u8, 194u8, 240u8, 162u8, 253u8, 229u8,
                            174u8, 201u8,
                        ],
                    )
                }
                pub fn emission_values_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::emission_values::EmissionValues,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "SubtensorModule",
                        "EmissionValues",
                        vec![],
                        [
                            227u8, 105u8, 162u8, 157u8, 17u8, 19u8, 156u8, 92u8, 44u8, 112u8, 53u8,
                            136u8, 250u8, 110u8, 116u8, 130u8, 90u8, 214u8, 139u8, 167u8, 109u8,
                            180u8, 234u8, 133u8, 135u8, 166u8, 76u8, 210u8, 213u8, 149u8, 114u8,
                            12u8,
                        ],
                    )
                }
                pub fn emission_values(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::emission_values::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::emission_values::EmissionValues,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "SubtensorModule",
                        "EmissionValues",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            227u8, 105u8, 162u8, 157u8, 17u8, 19u8, 156u8, 92u8, 44u8, 112u8, 53u8,
                            136u8, 250u8, 110u8, 116u8, 130u8, 90u8, 214u8, 139u8, 167u8, 109u8,
                            180u8, 234u8, 133u8, 135u8, 166u8, 76u8, 210u8, 213u8, 149u8, 114u8,
                            12u8,
                        ],
                    )
                }
                pub fn pending_emission_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::pending_emission::PendingEmission,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "SubtensorModule",
                        "PendingEmission",
                        vec![],
                        [
                            32u8, 200u8, 249u8, 248u8, 77u8, 171u8, 166u8, 138u8, 93u8, 142u8, 0u8,
                            38u8, 195u8, 61u8, 42u8, 150u8, 198u8, 116u8, 135u8, 127u8, 91u8,
                            129u8, 142u8, 60u8, 52u8, 148u8, 201u8, 71u8, 185u8, 219u8, 185u8,
                            249u8,
                        ],
                    )
                }
                pub fn pending_emission(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::pending_emission::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::pending_emission::PendingEmission,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "SubtensorModule",
                        "PendingEmission",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            32u8, 200u8, 249u8, 248u8, 77u8, 171u8, 166u8, 138u8, 93u8, 142u8, 0u8,
                            38u8, 195u8, 61u8, 42u8, 150u8, 198u8, 116u8, 135u8, 127u8, 91u8,
                            129u8, 142u8, 60u8, 52u8, 148u8, 201u8, 71u8, 185u8, 219u8, 185u8,
                            249u8,
                        ],
                    )
                }
                pub fn blocks_since_last_step_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::blocks_since_last_step::BlocksSinceLastStep,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "SubtensorModule",
                        "BlocksSinceLastStep",
                        vec![],
                        [
                            109u8, 129u8, 181u8, 218u8, 224u8, 135u8, 137u8, 119u8, 202u8, 22u8,
                            243u8, 181u8, 118u8, 30u8, 154u8, 247u8, 188u8, 140u8, 187u8, 62u8,
                            30u8, 224u8, 126u8, 253u8, 47u8, 63u8, 4u8, 55u8, 74u8, 41u8, 156u8,
                            126u8,
                        ],
                    )
                }
                pub fn blocks_since_last_step(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::blocks_since_last_step::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::blocks_since_last_step::BlocksSinceLastStep,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "SubtensorModule",
                        "BlocksSinceLastStep",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            109u8, 129u8, 181u8, 218u8, 224u8, 135u8, 137u8, 119u8, 202u8, 22u8,
                            243u8, 181u8, 118u8, 30u8, 154u8, 247u8, 188u8, 140u8, 187u8, 62u8,
                            30u8, 224u8, 126u8, 253u8, 47u8, 63u8, 4u8, 55u8, 74u8, 41u8, 156u8,
                            126u8,
                        ],
                    )
                }
                pub fn last_mechansim_step_block_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::last_mechansim_step_block::LastMechansimStepBlock,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "SubtensorModule",
                        "LastMechansimStepBlock",
                        vec![],
                        [
                            1u8, 255u8, 178u8, 25u8, 130u8, 241u8, 246u8, 122u8, 11u8, 55u8, 138u8,
                            125u8, 4u8, 119u8, 247u8, 144u8, 254u8, 76u8, 169u8, 106u8, 202u8,
                            192u8, 222u8, 51u8, 90u8, 157u8, 155u8, 160u8, 85u8, 248u8, 250u8,
                            11u8,
                        ],
                    )
                }
                pub fn last_mechansim_step_block(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::last_mechansim_step_block::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::last_mechansim_step_block::LastMechansimStepBlock,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "SubtensorModule",
                        "LastMechansimStepBlock",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            1u8, 255u8, 178u8, 25u8, 130u8, 241u8, 246u8, 122u8, 11u8, 55u8, 138u8,
                            125u8, 4u8, 119u8, 247u8, 144u8, 254u8, 76u8, 169u8, 106u8, 202u8,
                            192u8, 222u8, 51u8, 90u8, 157u8, 155u8, 160u8, 85u8, 248u8, 250u8,
                            11u8,
                        ],
                    )
                }
                pub fn subnet_owner_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::subnet_owner::SubnetOwner,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "SubtensorModule",
                        "SubnetOwner",
                        vec![],
                        [
                            17u8, 66u8, 162u8, 10u8, 172u8, 179u8, 149u8, 54u8, 233u8, 98u8, 237u8,
                            13u8, 148u8, 126u8, 66u8, 29u8, 242u8, 85u8, 112u8, 201u8, 76u8, 90u8,
                            68u8, 156u8, 207u8, 190u8, 242u8, 175u8, 178u8, 137u8, 82u8, 137u8,
                        ],
                    )
                }
                pub fn subnet_owner(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::subnet_owner::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::subnet_owner::SubnetOwner,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "SubtensorModule",
                        "SubnetOwner",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            17u8, 66u8, 162u8, 10u8, 172u8, 179u8, 149u8, 54u8, 233u8, 98u8, 237u8,
                            13u8, 148u8, 126u8, 66u8, 29u8, 242u8, 85u8, 112u8, 201u8, 76u8, 90u8,
                            68u8, 156u8, 207u8, 190u8, 242u8, 175u8, 178u8, 137u8, 82u8, 137u8,
                        ],
                    )
                }
                pub fn subnet_locked_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::subnet_locked::SubnetLocked,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "SubtensorModule",
                        "SubnetLocked",
                        vec![],
                        [
                            30u8, 43u8, 18u8, 122u8, 32u8, 192u8, 68u8, 191u8, 178u8, 157u8, 100u8,
                            155u8, 254u8, 246u8, 87u8, 39u8, 252u8, 73u8, 76u8, 199u8, 255u8, 50u8,
                            203u8, 168u8, 207u8, 203u8, 7u8, 177u8, 160u8, 108u8, 188u8, 98u8,
                        ],
                    )
                }
                pub fn subnet_locked(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::subnet_locked::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::subnet_locked::SubnetLocked,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "SubtensorModule",
                        "SubnetLocked",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            30u8, 43u8, 18u8, 122u8, 32u8, 192u8, 68u8, 191u8, 178u8, 157u8, 100u8,
                            155u8, 254u8, 246u8, 87u8, 39u8, 252u8, 73u8, 76u8, 199u8, 255u8, 50u8,
                            203u8, 168u8, 207u8, 203u8, 7u8, 177u8, 160u8, 108u8, 188u8, 98u8,
                        ],
                    )
                }
                pub fn tx_rate_limit(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::tx_rate_limit::TxRateLimit,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "SubtensorModule",
                        "TxRateLimit",
                        vec![],
                        [
                            149u8, 107u8, 236u8, 201u8, 45u8, 84u8, 26u8, 52u8, 215u8, 61u8, 215u8,
                            137u8, 2u8, 193u8, 11u8, 177u8, 44u8, 107u8, 241u8, 14u8, 146u8, 150u8,
                            140u8, 87u8, 166u8, 91u8, 106u8, 55u8, 54u8, 38u8, 144u8, 135u8,
                        ],
                    )
                }
                pub fn last_tx_block_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::last_tx_block::LastTxBlock,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "SubtensorModule",
                        "LastTxBlock",
                        vec![],
                        [
                            110u8, 36u8, 249u8, 1u8, 181u8, 193u8, 146u8, 153u8, 25u8, 162u8,
                            230u8, 16u8, 223u8, 176u8, 189u8, 253u8, 109u8, 101u8, 151u8, 63u8,
                            199u8, 191u8, 114u8, 38u8, 207u8, 186u8, 96u8, 46u8, 45u8, 87u8, 182u8,
                            177u8,
                        ],
                    )
                }
                pub fn last_tx_block(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::last_tx_block::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::last_tx_block::LastTxBlock,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "SubtensorModule",
                        "LastTxBlock",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            110u8, 36u8, 249u8, 1u8, 181u8, 193u8, 146u8, 153u8, 25u8, 162u8,
                            230u8, 16u8, 223u8, 176u8, 189u8, 253u8, 109u8, 101u8, 151u8, 63u8,
                            199u8, 191u8, 114u8, 38u8, 207u8, 186u8, 96u8, 46u8, 45u8, 87u8, 182u8,
                            177u8,
                        ],
                    )
                }
                pub fn serving_rate_limit_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::serving_rate_limit::ServingRateLimit,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "SubtensorModule",
                        "ServingRateLimit",
                        vec![],
                        [
                            237u8, 16u8, 229u8, 115u8, 91u8, 1u8, 62u8, 29u8, 4u8, 1u8, 117u8,
                            76u8, 9u8, 40u8, 108u8, 16u8, 177u8, 117u8, 19u8, 171u8, 215u8, 145u8,
                            34u8, 143u8, 63u8, 177u8, 159u8, 19u8, 107u8, 175u8, 98u8, 29u8,
                        ],
                    )
                }
                pub fn serving_rate_limit(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::serving_rate_limit::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::serving_rate_limit::ServingRateLimit,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "SubtensorModule",
                        "ServingRateLimit",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            237u8, 16u8, 229u8, 115u8, 91u8, 1u8, 62u8, 29u8, 4u8, 1u8, 117u8,
                            76u8, 9u8, 40u8, 108u8, 16u8, 177u8, 117u8, 19u8, 171u8, 215u8, 145u8,
                            34u8, 143u8, 63u8, 177u8, 159u8, 19u8, 107u8, 175u8, 98u8, 29u8,
                        ],
                    )
                }
                pub fn axons_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::axons::Axons,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "SubtensorModule",
                        "Axons",
                        vec![],
                        [
                            88u8, 108u8, 102u8, 2u8, 44u8, 234u8, 133u8, 231u8, 190u8, 19u8, 185u8,
                            26u8, 74u8, 162u8, 11u8, 232u8, 85u8, 75u8, 180u8, 178u8, 220u8, 211u8,
                            60u8, 22u8, 66u8, 5u8, 78u8, 68u8, 70u8, 126u8, 125u8, 227u8,
                        ],
                    )
                }
                pub fn axons_iter1(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::axons::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::axons::Axons,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "SubtensorModule",
                        "Axons",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            88u8, 108u8, 102u8, 2u8, 44u8, 234u8, 133u8, 231u8, 190u8, 19u8, 185u8,
                            26u8, 74u8, 162u8, 11u8, 232u8, 85u8, 75u8, 180u8, 178u8, 220u8, 211u8,
                            60u8, 22u8, 66u8, 5u8, 78u8, 68u8, 70u8, 126u8, 125u8, 227u8,
                        ],
                    )
                }
                pub fn axons(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::axons::Param0>,
                    _1: impl ::std::borrow::Borrow<types::axons::Param1>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::axons::Axons,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "SubtensorModule",
                        "Axons",
                        vec![
                            ::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
                            ::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
                        ],
                        [
                            88u8, 108u8, 102u8, 2u8, 44u8, 234u8, 133u8, 231u8, 190u8, 19u8, 185u8,
                            26u8, 74u8, 162u8, 11u8, 232u8, 85u8, 75u8, 180u8, 178u8, 220u8, 211u8,
                            60u8, 22u8, 66u8, 5u8, 78u8, 68u8, 70u8, 126u8, 125u8, 227u8,
                        ],
                    )
                }
                pub fn prometheus_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::prometheus::Prometheus,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "SubtensorModule",
                        "Prometheus",
                        vec![],
                        [
                            145u8, 192u8, 240u8, 31u8, 78u8, 238u8, 87u8, 30u8, 67u8, 43u8, 132u8,
                            227u8, 210u8, 241u8, 202u8, 63u8, 250u8, 32u8, 30u8, 209u8, 31u8, 97u8,
                            34u8, 68u8, 16u8, 192u8, 24u8, 16u8, 210u8, 252u8, 164u8, 80u8,
                        ],
                    )
                }
                pub fn prometheus_iter1(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::prometheus::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::prometheus::Prometheus,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "SubtensorModule",
                        "Prometheus",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            145u8, 192u8, 240u8, 31u8, 78u8, 238u8, 87u8, 30u8, 67u8, 43u8, 132u8,
                            227u8, 210u8, 241u8, 202u8, 63u8, 250u8, 32u8, 30u8, 209u8, 31u8, 97u8,
                            34u8, 68u8, 16u8, 192u8, 24u8, 16u8, 210u8, 252u8, 164u8, 80u8,
                        ],
                    )
                }
                pub fn prometheus(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::prometheus::Param0>,
                    _1: impl ::std::borrow::Borrow<types::prometheus::Param1>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::prometheus::Prometheus,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "SubtensorModule",
                        "Prometheus",
                        vec![
                            ::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
                            ::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
                        ],
                        [
                            145u8, 192u8, 240u8, 31u8, 78u8, 238u8, 87u8, 30u8, 67u8, 43u8, 132u8,
                            227u8, 210u8, 241u8, 202u8, 63u8, 250u8, 32u8, 30u8, 209u8, 31u8, 97u8,
                            34u8, 68u8, 16u8, 192u8, 24u8, 16u8, 210u8, 252u8, 164u8, 80u8,
                        ],
                    )
                }
                pub fn rho_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::rho::Rho,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "SubtensorModule",
                        "Rho",
                        vec![],
                        [
                            217u8, 113u8, 127u8, 214u8, 58u8, 210u8, 84u8, 189u8, 225u8, 55u8, 9u8,
                            215u8, 246u8, 72u8, 225u8, 55u8, 137u8, 158u8, 141u8, 57u8, 246u8, 8u8,
                            16u8, 81u8, 75u8, 66u8, 211u8, 158u8, 83u8, 49u8, 130u8, 6u8,
                        ],
                    )
                }
                pub fn rho(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::rho::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::rho::Rho,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "SubtensorModule",
                        "Rho",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            217u8, 113u8, 127u8, 214u8, 58u8, 210u8, 84u8, 189u8, 225u8, 55u8, 9u8,
                            215u8, 246u8, 72u8, 225u8, 55u8, 137u8, 158u8, 141u8, 57u8, 246u8, 8u8,
                            16u8, 81u8, 75u8, 66u8, 211u8, 158u8, 83u8, 49u8, 130u8, 6u8,
                        ],
                    )
                }
                pub fn kappa_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::kappa::Kappa,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "SubtensorModule",
                        "Kappa",
                        vec![],
                        [
                            183u8, 63u8, 137u8, 235u8, 82u8, 130u8, 93u8, 189u8, 231u8, 143u8, 7u8,
                            148u8, 193u8, 80u8, 232u8, 62u8, 164u8, 161u8, 238u8, 79u8, 23u8, 36u8,
                            205u8, 44u8, 6u8, 74u8, 188u8, 254u8, 74u8, 177u8, 6u8, 147u8,
                        ],
                    )
                }
                pub fn kappa(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::kappa::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::kappa::Kappa,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "SubtensorModule",
                        "Kappa",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            183u8, 63u8, 137u8, 235u8, 82u8, 130u8, 93u8, 189u8, 231u8, 143u8, 7u8,
                            148u8, 193u8, 80u8, 232u8, 62u8, 164u8, 161u8, 238u8, 79u8, 23u8, 36u8,
                            205u8, 44u8, 6u8, 74u8, 188u8, 254u8, 74u8, 177u8, 6u8, 147u8,
                        ],
                    )
                }
                pub fn neurons_to_prune_at_next_epoch_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::neurons_to_prune_at_next_epoch::NeuronsToPruneAtNextEpoch,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "SubtensorModule",
                        "NeuronsToPruneAtNextEpoch",
                        vec![],
                        [
                            200u8, 16u8, 1u8, 175u8, 87u8, 2u8, 149u8, 188u8, 43u8, 81u8, 93u8,
                            66u8, 254u8, 61u8, 38u8, 4u8, 111u8, 29u8, 147u8, 6u8, 112u8, 34u8,
                            103u8, 25u8, 128u8, 31u8, 207u8, 249u8, 64u8, 49u8, 14u8, 88u8,
                        ],
                    )
                }
                pub fn neurons_to_prune_at_next_epoch(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::neurons_to_prune_at_next_epoch::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::neurons_to_prune_at_next_epoch::NeuronsToPruneAtNextEpoch,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "SubtensorModule",
                        "NeuronsToPruneAtNextEpoch",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            200u8, 16u8, 1u8, 175u8, 87u8, 2u8, 149u8, 188u8, 43u8, 81u8, 93u8,
                            66u8, 254u8, 61u8, 38u8, 4u8, 111u8, 29u8, 147u8, 6u8, 112u8, 34u8,
                            103u8, 25u8, 128u8, 31u8, 207u8, 249u8, 64u8, 49u8, 14u8, 88u8,
                        ],
                    )
                }
                pub fn registrations_this_interval_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::registrations_this_interval::RegistrationsThisInterval,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "SubtensorModule",
                        "RegistrationsThisInterval",
                        vec![],
                        [
                            82u8, 150u8, 225u8, 120u8, 61u8, 53u8, 156u8, 229u8, 196u8, 47u8,
                            209u8, 243u8, 207u8, 64u8, 233u8, 193u8, 130u8, 205u8, 58u8, 64u8,
                            184u8, 57u8, 219u8, 254u8, 164u8, 101u8, 168u8, 4u8, 225u8, 12u8,
                            116u8, 55u8,
                        ],
                    )
                }
                pub fn registrations_this_interval(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::registrations_this_interval::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::registrations_this_interval::RegistrationsThisInterval,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "SubtensorModule",
                        "RegistrationsThisInterval",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            82u8, 150u8, 225u8, 120u8, 61u8, 53u8, 156u8, 229u8, 196u8, 47u8,
                            209u8, 243u8, 207u8, 64u8, 233u8, 193u8, 130u8, 205u8, 58u8, 64u8,
                            184u8, 57u8, 219u8, 254u8, 164u8, 101u8, 168u8, 4u8, 225u8, 12u8,
                            116u8, 55u8,
                        ],
                    )
                }
                pub fn pow_registrations_this_interval_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::pow_registrations_this_interval::PowRegistrationsThisInterval,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "SubtensorModule",
                        "POWRegistrationsThisInterval",
                        vec![],
                        [
                            137u8, 0u8, 128u8, 92u8, 62u8, 201u8, 248u8, 253u8, 92u8, 50u8, 81u8,
                            86u8, 59u8, 216u8, 49u8, 61u8, 120u8, 197u8, 237u8, 172u8, 97u8, 101u8,
                            249u8, 122u8, 169u8, 246u8, 23u8, 69u8, 98u8, 74u8, 108u8, 183u8,
                        ],
                    )
                }
                pub fn pow_registrations_this_interval(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::pow_registrations_this_interval::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::pow_registrations_this_interval::PowRegistrationsThisInterval,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "SubtensorModule",
                        "POWRegistrationsThisInterval",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            137u8, 0u8, 128u8, 92u8, 62u8, 201u8, 248u8, 253u8, 92u8, 50u8, 81u8,
                            86u8, 59u8, 216u8, 49u8, 61u8, 120u8, 197u8, 237u8, 172u8, 97u8, 101u8,
                            249u8, 122u8, 169u8, 246u8, 23u8, 69u8, 98u8, 74u8, 108u8, 183u8,
                        ],
                    )
                }
                pub fn burn_registrations_this_interval_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::burn_registrations_this_interval::BurnRegistrationsThisInterval,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "SubtensorModule",
                        "BurnRegistrationsThisInterval",
                        vec![],
                        [
                            41u8, 170u8, 250u8, 166u8, 41u8, 18u8, 190u8, 42u8, 45u8, 103u8, 105u8,
                            137u8, 86u8, 241u8, 101u8, 43u8, 205u8, 174u8, 251u8, 227u8, 82u8,
                            119u8, 19u8, 94u8, 41u8, 10u8, 132u8, 0u8, 171u8, 248u8, 147u8, 114u8,
                        ],
                    )
                }
                pub fn burn_registrations_this_interval(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::burn_registrations_this_interval::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::burn_registrations_this_interval::BurnRegistrationsThisInterval,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "SubtensorModule",
                        "BurnRegistrationsThisInterval",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            41u8, 170u8, 250u8, 166u8, 41u8, 18u8, 190u8, 42u8, 45u8, 103u8, 105u8,
                            137u8, 86u8, 241u8, 101u8, 43u8, 205u8, 174u8, 251u8, 227u8, 82u8,
                            119u8, 19u8, 94u8, 41u8, 10u8, 132u8, 0u8, 171u8, 248u8, 147u8, 114u8,
                        ],
                    )
                }
                pub fn max_allowed_uids_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::max_allowed_uids::MaxAllowedUids,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "SubtensorModule",
                        "MaxAllowedUids",
                        vec![],
                        [
                            103u8, 194u8, 4u8, 173u8, 182u8, 163u8, 163u8, 1u8, 186u8, 185u8, 66u8,
                            126u8, 65u8, 255u8, 56u8, 124u8, 32u8, 146u8, 248u8, 172u8, 106u8,
                            230u8, 16u8, 17u8, 58u8, 105u8, 32u8, 199u8, 104u8, 148u8, 89u8, 220u8,
                        ],
                    )
                }
                pub fn max_allowed_uids(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::max_allowed_uids::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::max_allowed_uids::MaxAllowedUids,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "SubtensorModule",
                        "MaxAllowedUids",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            103u8, 194u8, 4u8, 173u8, 182u8, 163u8, 163u8, 1u8, 186u8, 185u8, 66u8,
                            126u8, 65u8, 255u8, 56u8, 124u8, 32u8, 146u8, 248u8, 172u8, 106u8,
                            230u8, 16u8, 17u8, 58u8, 105u8, 32u8, 199u8, 104u8, 148u8, 89u8, 220u8,
                        ],
                    )
                }
                pub fn immunity_period_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::immunity_period::ImmunityPeriod,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "SubtensorModule",
                        "ImmunityPeriod",
                        vec![],
                        [
                            70u8, 128u8, 190u8, 139u8, 24u8, 7u8, 169u8, 148u8, 152u8, 190u8,
                            182u8, 15u8, 153u8, 243u8, 173u8, 164u8, 90u8, 126u8, 88u8, 147u8,
                            204u8, 184u8, 113u8, 40u8, 239u8, 243u8, 172u8, 127u8, 255u8, 98u8,
                            163u8, 185u8,
                        ],
                    )
                }
                pub fn immunity_period(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::immunity_period::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::immunity_period::ImmunityPeriod,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "SubtensorModule",
                        "ImmunityPeriod",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            70u8, 128u8, 190u8, 139u8, 24u8, 7u8, 169u8, 148u8, 152u8, 190u8,
                            182u8, 15u8, 153u8, 243u8, 173u8, 164u8, 90u8, 126u8, 88u8, 147u8,
                            204u8, 184u8, 113u8, 40u8, 239u8, 243u8, 172u8, 127u8, 255u8, 98u8,
                            163u8, 185u8,
                        ],
                    )
                }
                pub fn activity_cutoff_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::activity_cutoff::ActivityCutoff,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "SubtensorModule",
                        "ActivityCutoff",
                        vec![],
                        [
                            89u8, 224u8, 144u8, 219u8, 103u8, 178u8, 43u8, 161u8, 8u8, 116u8, 75u8,
                            181u8, 177u8, 97u8, 38u8, 12u8, 230u8, 202u8, 240u8, 40u8, 163u8,
                            225u8, 236u8, 151u8, 197u8, 24u8, 193u8, 70u8, 47u8, 214u8, 240u8,
                            83u8,
                        ],
                    )
                }
                pub fn activity_cutoff(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::activity_cutoff::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::activity_cutoff::ActivityCutoff,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "SubtensorModule",
                        "ActivityCutoff",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            89u8, 224u8, 144u8, 219u8, 103u8, 178u8, 43u8, 161u8, 8u8, 116u8, 75u8,
                            181u8, 177u8, 97u8, 38u8, 12u8, 230u8, 202u8, 240u8, 40u8, 163u8,
                            225u8, 236u8, 151u8, 197u8, 24u8, 193u8, 70u8, 47u8, 214u8, 240u8,
                            83u8,
                        ],
                    )
                }
                pub fn max_weights_limit_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::max_weights_limit::MaxWeightsLimit,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "SubtensorModule",
                        "MaxWeightsLimit",
                        vec![],
                        [
                            198u8, 221u8, 166u8, 90u8, 109u8, 226u8, 24u8, 172u8, 8u8, 92u8, 3u8,
                            179u8, 61u8, 108u8, 46u8, 173u8, 79u8, 176u8, 231u8, 164u8, 178u8,
                            33u8, 159u8, 184u8, 204u8, 159u8, 129u8, 227u8, 62u8, 79u8, 147u8,
                            179u8,
                        ],
                    )
                }
                pub fn max_weights_limit(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::max_weights_limit::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::max_weights_limit::MaxWeightsLimit,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "SubtensorModule",
                        "MaxWeightsLimit",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            198u8, 221u8, 166u8, 90u8, 109u8, 226u8, 24u8, 172u8, 8u8, 92u8, 3u8,
                            179u8, 61u8, 108u8, 46u8, 173u8, 79u8, 176u8, 231u8, 164u8, 178u8,
                            33u8, 159u8, 184u8, 204u8, 159u8, 129u8, 227u8, 62u8, 79u8, 147u8,
                            179u8,
                        ],
                    )
                }
                pub fn weights_version_key_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::weights_version_key::WeightsVersionKey,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "SubtensorModule",
                        "WeightsVersionKey",
                        vec![],
                        [
                            21u8, 190u8, 212u8, 229u8, 10u8, 128u8, 146u8, 53u8, 14u8, 95u8, 216u8,
                            17u8, 0u8, 196u8, 96u8, 121u8, 100u8, 183u8, 80u8, 81u8, 116u8, 83u8,
                            3u8, 105u8, 49u8, 82u8, 37u8, 43u8, 15u8, 225u8, 181u8, 13u8,
                        ],
                    )
                }
                pub fn weights_version_key(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::weights_version_key::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::weights_version_key::WeightsVersionKey,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "SubtensorModule",
                        "WeightsVersionKey",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            21u8, 190u8, 212u8, 229u8, 10u8, 128u8, 146u8, 53u8, 14u8, 95u8, 216u8,
                            17u8, 0u8, 196u8, 96u8, 121u8, 100u8, 183u8, 80u8, 81u8, 116u8, 83u8,
                            3u8, 105u8, 49u8, 82u8, 37u8, 43u8, 15u8, 225u8, 181u8, 13u8,
                        ],
                    )
                }
                pub fn min_allowed_weights_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::min_allowed_weights::MinAllowedWeights,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "SubtensorModule",
                        "MinAllowedWeights",
                        vec![],
                        [
                            113u8, 188u8, 139u8, 178u8, 162u8, 34u8, 89u8, 245u8, 248u8, 78u8,
                            152u8, 110u8, 240u8, 138u8, 117u8, 226u8, 247u8, 84u8, 43u8, 89u8,
                            219u8, 75u8, 228u8, 50u8, 212u8, 17u8, 128u8, 228u8, 4u8, 247u8, 173u8,
                            138u8,
                        ],
                    )
                }
                pub fn min_allowed_weights(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::min_allowed_weights::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::min_allowed_weights::MinAllowedWeights,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "SubtensorModule",
                        "MinAllowedWeights",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            113u8, 188u8, 139u8, 178u8, 162u8, 34u8, 89u8, 245u8, 248u8, 78u8,
                            152u8, 110u8, 240u8, 138u8, 117u8, 226u8, 247u8, 84u8, 43u8, 89u8,
                            219u8, 75u8, 228u8, 50u8, 212u8, 17u8, 128u8, 228u8, 4u8, 247u8, 173u8,
                            138u8,
                        ],
                    )
                }
                pub fn max_allowed_validators_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::max_allowed_validators::MaxAllowedValidators,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "SubtensorModule",
                        "MaxAllowedValidators",
                        vec![],
                        [
                            94u8, 68u8, 128u8, 243u8, 87u8, 104u8, 50u8, 96u8, 190u8, 109u8, 70u8,
                            25u8, 40u8, 54u8, 181u8, 68u8, 187u8, 79u8, 42u8, 131u8, 132u8, 52u8,
                            209u8, 7u8, 93u8, 235u8, 162u8, 168u8, 32u8, 170u8, 214u8, 211u8,
                        ],
                    )
                }
                pub fn max_allowed_validators(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::max_allowed_validators::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::max_allowed_validators::MaxAllowedValidators,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "SubtensorModule",
                        "MaxAllowedValidators",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            94u8, 68u8, 128u8, 243u8, 87u8, 104u8, 50u8, 96u8, 190u8, 109u8, 70u8,
                            25u8, 40u8, 54u8, 181u8, 68u8, 187u8, 79u8, 42u8, 131u8, 132u8, 52u8,
                            209u8, 7u8, 93u8, 235u8, 162u8, 168u8, 32u8, 170u8, 214u8, 211u8,
                        ],
                    )
                }
                pub fn adjustment_interval_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::adjustment_interval::AdjustmentInterval,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "SubtensorModule",
                        "AdjustmentInterval",
                        vec![],
                        [
                            15u8, 129u8, 107u8, 246u8, 81u8, 165u8, 110u8, 41u8, 213u8, 47u8,
                            234u8, 166u8, 249u8, 35u8, 197u8, 152u8, 31u8, 7u8, 189u8, 120u8, 17u8,
                            254u8, 156u8, 91u8, 135u8, 51u8, 166u8, 229u8, 115u8, 41u8, 33u8, 7u8,
                        ],
                    )
                }
                pub fn adjustment_interval(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::adjustment_interval::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::adjustment_interval::AdjustmentInterval,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "SubtensorModule",
                        "AdjustmentInterval",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            15u8, 129u8, 107u8, 246u8, 81u8, 165u8, 110u8, 41u8, 213u8, 47u8,
                            234u8, 166u8, 249u8, 35u8, 197u8, 152u8, 31u8, 7u8, 189u8, 120u8, 17u8,
                            254u8, 156u8, 91u8, 135u8, 51u8, 166u8, 229u8, 115u8, 41u8, 33u8, 7u8,
                        ],
                    )
                }
                pub fn bonds_moving_average_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::bonds_moving_average::BondsMovingAverage,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "SubtensorModule",
                        "BondsMovingAverage",
                        vec![],
                        [
                            180u8, 93u8, 149u8, 65u8, 179u8, 150u8, 79u8, 96u8, 198u8, 26u8, 139u8,
                            204u8, 144u8, 76u8, 179u8, 99u8, 57u8, 231u8, 43u8, 202u8, 40u8, 230u8,
                            192u8, 248u8, 53u8, 225u8, 201u8, 143u8, 48u8, 161u8, 90u8, 111u8,
                        ],
                    )
                }
                pub fn bonds_moving_average(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::bonds_moving_average::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::bonds_moving_average::BondsMovingAverage,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "SubtensorModule",
                        "BondsMovingAverage",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            180u8, 93u8, 149u8, 65u8, 179u8, 150u8, 79u8, 96u8, 198u8, 26u8, 139u8,
                            204u8, 144u8, 76u8, 179u8, 99u8, 57u8, 231u8, 43u8, 202u8, 40u8, 230u8,
                            192u8, 248u8, 53u8, 225u8, 201u8, 143u8, 48u8, 161u8, 90u8, 111u8,
                        ],
                    )
                }
                pub fn weights_set_rate_limit_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::weights_set_rate_limit::WeightsSetRateLimit,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "SubtensorModule",
                        "WeightsSetRateLimit",
                        vec![],
                        [
                            70u8, 81u8, 142u8, 75u8, 162u8, 207u8, 75u8, 24u8, 120u8, 233u8, 253u8,
                            71u8, 249u8, 9u8, 62u8, 169u8, 119u8, 124u8, 45u8, 113u8, 77u8, 186u8,
                            55u8, 4u8, 5u8, 91u8, 166u8, 171u8, 41u8, 215u8, 57u8, 132u8,
                        ],
                    )
                }
                pub fn weights_set_rate_limit(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::weights_set_rate_limit::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::weights_set_rate_limit::WeightsSetRateLimit,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "SubtensorModule",
                        "WeightsSetRateLimit",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            70u8, 81u8, 142u8, 75u8, 162u8, 207u8, 75u8, 24u8, 120u8, 233u8, 253u8,
                            71u8, 249u8, 9u8, 62u8, 169u8, 119u8, 124u8, 45u8, 113u8, 77u8, 186u8,
                            55u8, 4u8, 5u8, 91u8, 166u8, 171u8, 41u8, 215u8, 57u8, 132u8,
                        ],
                    )
                }
                pub fn validator_prune_len_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::validator_prune_len::ValidatorPruneLen,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "SubtensorModule",
                        "ValidatorPruneLen",
                        vec![],
                        [
                            225u8, 241u8, 182u8, 243u8, 247u8, 144u8, 187u8, 64u8, 15u8, 223u8,
                            8u8, 214u8, 171u8, 122u8, 162u8, 33u8, 163u8, 216u8, 48u8, 146u8,
                            253u8, 230u8, 250u8, 22u8, 22u8, 110u8, 204u8, 70u8, 126u8, 246u8,
                            100u8, 69u8,
                        ],
                    )
                }
                pub fn validator_prune_len(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::validator_prune_len::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::validator_prune_len::ValidatorPruneLen,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "SubtensorModule",
                        "ValidatorPruneLen",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            225u8, 241u8, 182u8, 243u8, 247u8, 144u8, 187u8, 64u8, 15u8, 223u8,
                            8u8, 214u8, 171u8, 122u8, 162u8, 33u8, 163u8, 216u8, 48u8, 146u8,
                            253u8, 230u8, 250u8, 22u8, 22u8, 110u8, 204u8, 70u8, 126u8, 246u8,
                            100u8, 69u8,
                        ],
                    )
                }
                pub fn scaling_law_power_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::scaling_law_power::ScalingLawPower,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "SubtensorModule",
                        "ScalingLawPower",
                        vec![],
                        [
                            195u8, 171u8, 225u8, 2u8, 211u8, 254u8, 87u8, 76u8, 255u8, 7u8, 175u8,
                            101u8, 123u8, 92u8, 44u8, 26u8, 124u8, 92u8, 9u8, 207u8, 82u8, 30u8,
                            243u8, 26u8, 52u8, 12u8, 200u8, 149u8, 93u8, 23u8, 204u8, 141u8,
                        ],
                    )
                }
                pub fn scaling_law_power(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::scaling_law_power::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::scaling_law_power::ScalingLawPower,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "SubtensorModule",
                        "ScalingLawPower",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            195u8, 171u8, 225u8, 2u8, 211u8, 254u8, 87u8, 76u8, 255u8, 7u8, 175u8,
                            101u8, 123u8, 92u8, 44u8, 26u8, 124u8, 92u8, 9u8, 207u8, 82u8, 30u8,
                            243u8, 26u8, 52u8, 12u8, 200u8, 149u8, 93u8, 23u8, 204u8, 141u8,
                        ],
                    )
                }
                pub fn target_registrations_per_interval_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::target_registrations_per_interval::TargetRegistrationsPerInterval,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "SubtensorModule",
                        "TargetRegistrationsPerInterval",
                        vec![],
                        [
                            247u8, 135u8, 194u8, 5u8, 122u8, 104u8, 128u8, 94u8, 82u8, 135u8, 63u8,
                            72u8, 251u8, 3u8, 214u8, 85u8, 135u8, 197u8, 37u8, 148u8, 25u8, 94u8,
                            245u8, 248u8, 154u8, 200u8, 14u8, 171u8, 123u8, 45u8, 120u8, 169u8,
                        ],
                    )
                }
                pub fn target_registrations_per_interval(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::target_registrations_per_interval::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::target_registrations_per_interval::TargetRegistrationsPerInterval,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "SubtensorModule",
                        "TargetRegistrationsPerInterval",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            247u8, 135u8, 194u8, 5u8, 122u8, 104u8, 128u8, 94u8, 82u8, 135u8, 63u8,
                            72u8, 251u8, 3u8, 214u8, 85u8, 135u8, 197u8, 37u8, 148u8, 25u8, 94u8,
                            245u8, 248u8, 154u8, 200u8, 14u8, 171u8, 123u8, 45u8, 120u8, 169u8,
                        ],
                    )
                }
                pub fn block_at_registration_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::block_at_registration::BlockAtRegistration,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "SubtensorModule",
                        "BlockAtRegistration",
                        vec![],
                        [
                            25u8, 46u8, 139u8, 65u8, 206u8, 245u8, 13u8, 118u8, 40u8, 94u8, 35u8,
                            157u8, 161u8, 120u8, 219u8, 76u8, 172u8, 107u8, 237u8, 29u8, 213u8,
                            177u8, 196u8, 162u8, 129u8, 29u8, 81u8, 3u8, 123u8, 116u8, 1u8, 81u8,
                        ],
                    )
                }
                pub fn block_at_registration_iter1(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::block_at_registration::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::block_at_registration::BlockAtRegistration,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "SubtensorModule",
                        "BlockAtRegistration",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            25u8, 46u8, 139u8, 65u8, 206u8, 245u8, 13u8, 118u8, 40u8, 94u8, 35u8,
                            157u8, 161u8, 120u8, 219u8, 76u8, 172u8, 107u8, 237u8, 29u8, 213u8,
                            177u8, 196u8, 162u8, 129u8, 29u8, 81u8, 3u8, 123u8, 116u8, 1u8, 81u8,
                        ],
                    )
                }
                pub fn block_at_registration(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::block_at_registration::Param0>,
                    _1: impl ::std::borrow::Borrow<types::block_at_registration::Param1>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::block_at_registration::BlockAtRegistration,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "SubtensorModule",
                        "BlockAtRegistration",
                        vec![
                            ::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
                            ::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
                        ],
                        [
                            25u8, 46u8, 139u8, 65u8, 206u8, 245u8, 13u8, 118u8, 40u8, 94u8, 35u8,
                            157u8, 161u8, 120u8, 219u8, 76u8, 172u8, 107u8, 237u8, 29u8, 213u8,
                            177u8, 196u8, 162u8, 129u8, 29u8, 81u8, 3u8, 123u8, 116u8, 1u8, 81u8,
                        ],
                    )
                }
                pub fn adjustment_alpha_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::adjustment_alpha::AdjustmentAlpha,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "SubtensorModule",
                        "AdjustmentAlpha",
                        vec![],
                        [
                            196u8, 142u8, 243u8, 223u8, 191u8, 243u8, 62u8, 46u8, 192u8, 200u8,
                            86u8, 147u8, 223u8, 1u8, 114u8, 131u8, 243u8, 132u8, 109u8, 102u8,
                            227u8, 126u8, 100u8, 135u8, 200u8, 31u8, 16u8, 3u8, 232u8, 169u8, 50u8,
                            202u8,
                        ],
                    )
                }
                pub fn adjustment_alpha(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::adjustment_alpha::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::adjustment_alpha::AdjustmentAlpha,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "SubtensorModule",
                        "AdjustmentAlpha",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            196u8, 142u8, 243u8, 223u8, 191u8, 243u8, 62u8, 46u8, 192u8, 200u8,
                            86u8, 147u8, 223u8, 1u8, 114u8, 131u8, 243u8, 132u8, 109u8, 102u8,
                            227u8, 126u8, 100u8, 135u8, 200u8, 31u8, 16u8, 3u8, 232u8, 169u8, 50u8,
                            202u8,
                        ],
                    )
                }
                pub fn uids_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::uids::Uids,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "SubtensorModule",
                        "Uids",
                        vec![],
                        [
                            33u8, 64u8, 48u8, 239u8, 201u8, 205u8, 31u8, 252u8, 134u8, 235u8, 58u8,
                            176u8, 244u8, 181u8, 9u8, 16u8, 21u8, 92u8, 2u8, 171u8, 13u8, 215u8,
                            67u8, 212u8, 139u8, 193u8, 145u8, 164u8, 186u8, 86u8, 163u8, 44u8,
                        ],
                    )
                }
                pub fn uids_iter1(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::uids::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::uids::Uids,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "SubtensorModule",
                        "Uids",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            33u8, 64u8, 48u8, 239u8, 201u8, 205u8, 31u8, 252u8, 134u8, 235u8, 58u8,
                            176u8, 244u8, 181u8, 9u8, 16u8, 21u8, 92u8, 2u8, 171u8, 13u8, 215u8,
                            67u8, 212u8, 139u8, 193u8, 145u8, 164u8, 186u8, 86u8, 163u8, 44u8,
                        ],
                    )
                }
                pub fn uids(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::uids::Param0>,
                    _1: impl ::std::borrow::Borrow<types::uids::Param1>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::uids::Uids,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "SubtensorModule",
                        "Uids",
                        vec![
                            ::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
                            ::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
                        ],
                        [
                            33u8, 64u8, 48u8, 239u8, 201u8, 205u8, 31u8, 252u8, 134u8, 235u8, 58u8,
                            176u8, 244u8, 181u8, 9u8, 16u8, 21u8, 92u8, 2u8, 171u8, 13u8, 215u8,
                            67u8, 212u8, 139u8, 193u8, 145u8, 164u8, 186u8, 86u8, 163u8, 44u8,
                        ],
                    )
                }
                pub fn keys_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::keys::Keys,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "SubtensorModule",
                        "Keys",
                        vec![],
                        [
                            110u8, 251u8, 14u8, 35u8, 199u8, 87u8, 231u8, 16u8, 178u8, 193u8,
                            240u8, 20u8, 184u8, 57u8, 187u8, 227u8, 67u8, 80u8, 120u8, 148u8, 51u8,
                            239u8, 130u8, 12u8, 35u8, 84u8, 213u8, 233u8, 239u8, 79u8, 153u8,
                            141u8,
                        ],
                    )
                }
                pub fn keys_iter1(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::keys::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::keys::Keys,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "SubtensorModule",
                        "Keys",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            110u8, 251u8, 14u8, 35u8, 199u8, 87u8, 231u8, 16u8, 178u8, 193u8,
                            240u8, 20u8, 184u8, 57u8, 187u8, 227u8, 67u8, 80u8, 120u8, 148u8, 51u8,
                            239u8, 130u8, 12u8, 35u8, 84u8, 213u8, 233u8, 239u8, 79u8, 153u8,
                            141u8,
                        ],
                    )
                }
                pub fn keys(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::keys::Param0>,
                    _1: impl ::std::borrow::Borrow<types::keys::Param1>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::keys::Keys,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "SubtensorModule",
                        "Keys",
                        vec![
                            ::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
                            ::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
                        ],
                        [
                            110u8, 251u8, 14u8, 35u8, 199u8, 87u8, 231u8, 16u8, 178u8, 193u8,
                            240u8, 20u8, 184u8, 57u8, 187u8, 227u8, 67u8, 80u8, 120u8, 148u8, 51u8,
                            239u8, 130u8, 12u8, 35u8, 84u8, 213u8, 233u8, 239u8, 79u8, 153u8,
                            141u8,
                        ],
                    )
                }
                pub fn loaded_emission_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::loaded_emission::LoadedEmission,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "SubtensorModule",
                        "LoadedEmission",
                        vec![],
                        [
                            99u8, 238u8, 26u8, 122u8, 183u8, 3u8, 163u8, 126u8, 63u8, 141u8, 224u8,
                            228u8, 59u8, 73u8, 241u8, 12u8, 25u8, 95u8, 185u8, 31u8, 35u8, 168u8,
                            166u8, 104u8, 233u8, 10u8, 246u8, 80u8, 62u8, 8u8, 187u8, 16u8,
                        ],
                    )
                }
                pub fn loaded_emission(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::loaded_emission::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::loaded_emission::LoadedEmission,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "SubtensorModule",
                        "LoadedEmission",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            99u8, 238u8, 26u8, 122u8, 183u8, 3u8, 163u8, 126u8, 63u8, 141u8, 224u8,
                            228u8, 59u8, 73u8, 241u8, 12u8, 25u8, 95u8, 185u8, 31u8, 35u8, 168u8,
                            166u8, 104u8, 233u8, 10u8, 246u8, 80u8, 62u8, 8u8, 187u8, 16u8,
                        ],
                    )
                }
                pub fn active_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::active::Active,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "SubtensorModule",
                        "Active",
                        vec![],
                        [
                            109u8, 164u8, 208u8, 202u8, 150u8, 33u8, 250u8, 59u8, 200u8, 234u8,
                            174u8, 246u8, 204u8, 164u8, 219u8, 4u8, 30u8, 216u8, 35u8, 171u8,
                            114u8, 26u8, 160u8, 36u8, 0u8, 44u8, 242u8, 135u8, 105u8, 101u8, 94u8,
                            193u8,
                        ],
                    )
                }
                pub fn active(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::active::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::active::Active,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "SubtensorModule",
                        "Active",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            109u8, 164u8, 208u8, 202u8, 150u8, 33u8, 250u8, 59u8, 200u8, 234u8,
                            174u8, 246u8, 204u8, 164u8, 219u8, 4u8, 30u8, 216u8, 35u8, 171u8,
                            114u8, 26u8, 160u8, 36u8, 0u8, 44u8, 242u8, 135u8, 105u8, 101u8, 94u8,
                            193u8,
                        ],
                    )
                }
                pub fn rank_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::rank::Rank,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "SubtensorModule",
                        "Rank",
                        vec![],
                        [
                            33u8, 31u8, 249u8, 241u8, 86u8, 164u8, 206u8, 129u8, 237u8, 230u8,
                            157u8, 154u8, 167u8, 190u8, 153u8, 34u8, 68u8, 77u8, 205u8, 51u8,
                            187u8, 123u8, 177u8, 19u8, 59u8, 235u8, 249u8, 108u8, 91u8, 120u8,
                            138u8, 50u8,
                        ],
                    )
                }
                pub fn rank(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::rank::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::rank::Rank,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "SubtensorModule",
                        "Rank",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            33u8, 31u8, 249u8, 241u8, 86u8, 164u8, 206u8, 129u8, 237u8, 230u8,
                            157u8, 154u8, 167u8, 190u8, 153u8, 34u8, 68u8, 77u8, 205u8, 51u8,
                            187u8, 123u8, 177u8, 19u8, 59u8, 235u8, 249u8, 108u8, 91u8, 120u8,
                            138u8, 50u8,
                        ],
                    )
                }
                pub fn trust_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::trust::Trust,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "SubtensorModule",
                        "Trust",
                        vec![],
                        [
                            124u8, 193u8, 206u8, 175u8, 93u8, 13u8, 212u8, 40u8, 57u8, 119u8,
                            182u8, 240u8, 115u8, 122u8, 158u8, 206u8, 213u8, 0u8, 131u8, 182u8,
                            129u8, 81u8, 116u8, 120u8, 79u8, 234u8, 216u8, 157u8, 32u8, 10u8,
                            190u8, 76u8,
                        ],
                    )
                }
                pub fn trust(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::trust::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::trust::Trust,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "SubtensorModule",
                        "Trust",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            124u8, 193u8, 206u8, 175u8, 93u8, 13u8, 212u8, 40u8, 57u8, 119u8,
                            182u8, 240u8, 115u8, 122u8, 158u8, 206u8, 213u8, 0u8, 131u8, 182u8,
                            129u8, 81u8, 116u8, 120u8, 79u8, 234u8, 216u8, 157u8, 32u8, 10u8,
                            190u8, 76u8,
                        ],
                    )
                }
                pub fn consensus_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::consensus::Consensus,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "SubtensorModule",
                        "Consensus",
                        vec![],
                        [
                            93u8, 54u8, 160u8, 28u8, 186u8, 64u8, 70u8, 52u8, 248u8, 65u8, 214u8,
                            233u8, 206u8, 104u8, 178u8, 232u8, 241u8, 242u8, 206u8, 207u8, 247u8,
                            43u8, 4u8, 120u8, 97u8, 48u8, 148u8, 9u8, 223u8, 240u8, 172u8, 147u8,
                        ],
                    )
                }
                pub fn consensus(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::consensus::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::consensus::Consensus,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "SubtensorModule",
                        "Consensus",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            93u8, 54u8, 160u8, 28u8, 186u8, 64u8, 70u8, 52u8, 248u8, 65u8, 214u8,
                            233u8, 206u8, 104u8, 178u8, 232u8, 241u8, 242u8, 206u8, 207u8, 247u8,
                            43u8, 4u8, 120u8, 97u8, 48u8, 148u8, 9u8, 223u8, 240u8, 172u8, 147u8,
                        ],
                    )
                }
                pub fn incentive_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::incentive::Incentive,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "SubtensorModule",
                        "Incentive",
                        vec![],
                        [
                            24u8, 160u8, 83u8, 255u8, 196u8, 69u8, 170u8, 68u8, 16u8, 239u8, 220u8,
                            198u8, 137u8, 89u8, 222u8, 247u8, 198u8, 16u8, 120u8, 147u8, 63u8,
                            186u8, 113u8, 137u8, 106u8, 143u8, 254u8, 211u8, 205u8, 217u8, 232u8,
                            64u8,
                        ],
                    )
                }
                pub fn incentive(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::incentive::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::incentive::Incentive,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "SubtensorModule",
                        "Incentive",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            24u8, 160u8, 83u8, 255u8, 196u8, 69u8, 170u8, 68u8, 16u8, 239u8, 220u8,
                            198u8, 137u8, 89u8, 222u8, 247u8, 198u8, 16u8, 120u8, 147u8, 63u8,
                            186u8, 113u8, 137u8, 106u8, 143u8, 254u8, 211u8, 205u8, 217u8, 232u8,
                            64u8,
                        ],
                    )
                }
                pub fn dividends_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::dividends::Dividends,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "SubtensorModule",
                        "Dividends",
                        vec![],
                        [
                            192u8, 174u8, 115u8, 10u8, 78u8, 219u8, 26u8, 255u8, 247u8, 93u8,
                            212u8, 176u8, 96u8, 104u8, 218u8, 130u8, 200u8, 16u8, 119u8, 7u8,
                            184u8, 207u8, 12u8, 210u8, 128u8, 46u8, 252u8, 79u8, 236u8, 44u8,
                            148u8, 171u8,
                        ],
                    )
                }
                pub fn dividends(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::dividends::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::dividends::Dividends,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "SubtensorModule",
                        "Dividends",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            192u8, 174u8, 115u8, 10u8, 78u8, 219u8, 26u8, 255u8, 247u8, 93u8,
                            212u8, 176u8, 96u8, 104u8, 218u8, 130u8, 200u8, 16u8, 119u8, 7u8,
                            184u8, 207u8, 12u8, 210u8, 128u8, 46u8, 252u8, 79u8, 236u8, 44u8,
                            148u8, 171u8,
                        ],
                    )
                }
                pub fn emission_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::emission::Emission,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "SubtensorModule",
                        "Emission",
                        vec![],
                        [
                            35u8, 81u8, 81u8, 182u8, 207u8, 133u8, 177u8, 90u8, 159u8, 99u8, 40u8,
                            204u8, 179u8, 79u8, 71u8, 168u8, 58u8, 69u8, 10u8, 162u8, 249u8, 105u8,
                            180u8, 223u8, 14u8, 143u8, 1u8, 154u8, 68u8, 91u8, 184u8, 65u8,
                        ],
                    )
                }
                pub fn emission(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::emission::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::emission::Emission,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "SubtensorModule",
                        "Emission",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            35u8, 81u8, 81u8, 182u8, 207u8, 133u8, 177u8, 90u8, 159u8, 99u8, 40u8,
                            204u8, 179u8, 79u8, 71u8, 168u8, 58u8, 69u8, 10u8, 162u8, 249u8, 105u8,
                            180u8, 223u8, 14u8, 143u8, 1u8, 154u8, 68u8, 91u8, 184u8, 65u8,
                        ],
                    )
                }
                pub fn last_update_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::last_update::LastUpdate,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "SubtensorModule",
                        "LastUpdate",
                        vec![],
                        [
                            165u8, 55u8, 107u8, 0u8, 155u8, 221u8, 102u8, 151u8, 146u8, 66u8,
                            253u8, 253u8, 42u8, 191u8, 192u8, 2u8, 154u8, 217u8, 200u8, 178u8,
                            10u8, 252u8, 240u8, 68u8, 69u8, 104u8, 77u8, 121u8, 197u8, 114u8,
                            248u8, 105u8,
                        ],
                    )
                }
                pub fn last_update(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::last_update::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::last_update::LastUpdate,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "SubtensorModule",
                        "LastUpdate",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            165u8, 55u8, 107u8, 0u8, 155u8, 221u8, 102u8, 151u8, 146u8, 66u8,
                            253u8, 253u8, 42u8, 191u8, 192u8, 2u8, 154u8, 217u8, 200u8, 178u8,
                            10u8, 252u8, 240u8, 68u8, 69u8, 104u8, 77u8, 121u8, 197u8, 114u8,
                            248u8, 105u8,
                        ],
                    )
                }
                pub fn validator_trust_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::validator_trust::ValidatorTrust,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "SubtensorModule",
                        "ValidatorTrust",
                        vec![],
                        [
                            23u8, 132u8, 192u8, 102u8, 41u8, 24u8, 238u8, 124u8, 6u8, 70u8, 199u8,
                            26u8, 245u8, 193u8, 241u8, 24u8, 142u8, 77u8, 82u8, 153u8, 16u8, 221u8,
                            221u8, 164u8, 159u8, 225u8, 144u8, 129u8, 159u8, 116u8, 203u8, 125u8,
                        ],
                    )
                }
                pub fn validator_trust(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::validator_trust::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::validator_trust::ValidatorTrust,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "SubtensorModule",
                        "ValidatorTrust",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            23u8, 132u8, 192u8, 102u8, 41u8, 24u8, 238u8, 124u8, 6u8, 70u8, 199u8,
                            26u8, 245u8, 193u8, 241u8, 24u8, 142u8, 77u8, 82u8, 153u8, 16u8, 221u8,
                            221u8, 164u8, 159u8, 225u8, 144u8, 129u8, 159u8, 116u8, 203u8, 125u8,
                        ],
                    )
                }
                pub fn pruning_scores_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::pruning_scores::PruningScores,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "SubtensorModule",
                        "PruningScores",
                        vec![],
                        [
                            141u8, 17u8, 95u8, 238u8, 81u8, 29u8, 210u8, 253u8, 112u8, 15u8, 35u8,
                            185u8, 226u8, 155u8, 189u8, 250u8, 28u8, 115u8, 254u8, 177u8, 11u8,
                            86u8, 212u8, 176u8, 154u8, 193u8, 5u8, 120u8, 163u8, 172u8, 97u8,
                            173u8,
                        ],
                    )
                }
                pub fn pruning_scores(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::pruning_scores::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::pruning_scores::PruningScores,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "SubtensorModule",
                        "PruningScores",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            141u8, 17u8, 95u8, 238u8, 81u8, 29u8, 210u8, 253u8, 112u8, 15u8, 35u8,
                            185u8, 226u8, 155u8, 189u8, 250u8, 28u8, 115u8, 254u8, 177u8, 11u8,
                            86u8, 212u8, 176u8, 154u8, 193u8, 5u8, 120u8, 163u8, 172u8, 97u8,
                            173u8,
                        ],
                    )
                }
                pub fn validator_permit_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::validator_permit::ValidatorPermit,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "SubtensorModule",
                        "ValidatorPermit",
                        vec![],
                        [
                            237u8, 135u8, 31u8, 115u8, 236u8, 108u8, 3u8, 83u8, 142u8, 232u8,
                            250u8, 100u8, 140u8, 89u8, 128u8, 24u8, 85u8, 68u8, 214u8, 111u8,
                            152u8, 203u8, 105u8, 6u8, 38u8, 154u8, 124u8, 176u8, 119u8, 181u8,
                            246u8, 169u8,
                        ],
                    )
                }
                pub fn validator_permit(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::validator_permit::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::validator_permit::ValidatorPermit,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "SubtensorModule",
                        "ValidatorPermit",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            237u8, 135u8, 31u8, 115u8, 236u8, 108u8, 3u8, 83u8, 142u8, 232u8,
                            250u8, 100u8, 140u8, 89u8, 128u8, 24u8, 85u8, 68u8, 214u8, 111u8,
                            152u8, 203u8, 105u8, 6u8, 38u8, 154u8, 124u8, 176u8, 119u8, 181u8,
                            246u8, 169u8,
                        ],
                    )
                }
                pub fn weights_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::weights::Weights,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "SubtensorModule",
                        "Weights",
                        vec![],
                        [
                            33u8, 30u8, 129u8, 94u8, 20u8, 105u8, 255u8, 240u8, 125u8, 124u8,
                            139u8, 22u8, 163u8, 227u8, 39u8, 55u8, 220u8, 33u8, 130u8, 250u8, 42u8,
                            61u8, 200u8, 244u8, 125u8, 63u8, 228u8, 35u8, 183u8, 43u8, 7u8, 184u8,
                        ],
                    )
                }
                pub fn weights_iter1(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::weights::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::weights::Weights,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "SubtensorModule",
                        "Weights",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            33u8, 30u8, 129u8, 94u8, 20u8, 105u8, 255u8, 240u8, 125u8, 124u8,
                            139u8, 22u8, 163u8, 227u8, 39u8, 55u8, 220u8, 33u8, 130u8, 250u8, 42u8,
                            61u8, 200u8, 244u8, 125u8, 63u8, 228u8, 35u8, 183u8, 43u8, 7u8, 184u8,
                        ],
                    )
                }
                pub fn weights(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::weights::Param0>,
                    _1: impl ::std::borrow::Borrow<types::weights::Param1>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::weights::Weights,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "SubtensorModule",
                        "Weights",
                        vec![
                            ::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
                            ::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
                        ],
                        [
                            33u8, 30u8, 129u8, 94u8, 20u8, 105u8, 255u8, 240u8, 125u8, 124u8,
                            139u8, 22u8, 163u8, 227u8, 39u8, 55u8, 220u8, 33u8, 130u8, 250u8, 42u8,
                            61u8, 200u8, 244u8, 125u8, 63u8, 228u8, 35u8, 183u8, 43u8, 7u8, 184u8,
                        ],
                    )
                }
                pub fn bonds_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::bonds::Bonds,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "SubtensorModule",
                        "Bonds",
                        vec![],
                        [
                            11u8, 36u8, 139u8, 245u8, 90u8, 20u8, 111u8, 189u8, 60u8, 65u8, 247u8,
                            126u8, 209u8, 110u8, 104u8, 140u8, 171u8, 248u8, 40u8, 94u8, 193u8,
                            61u8, 129u8, 130u8, 128u8, 114u8, 60u8, 60u8, 231u8, 227u8, 223u8,
                            202u8,
                        ],
                    )
                }
                pub fn bonds_iter1(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::bonds::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::bonds::Bonds,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "SubtensorModule",
                        "Bonds",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            11u8, 36u8, 139u8, 245u8, 90u8, 20u8, 111u8, 189u8, 60u8, 65u8, 247u8,
                            126u8, 209u8, 110u8, 104u8, 140u8, 171u8, 248u8, 40u8, 94u8, 193u8,
                            61u8, 129u8, 130u8, 128u8, 114u8, 60u8, 60u8, 231u8, 227u8, 223u8,
                            202u8,
                        ],
                    )
                }
                pub fn bonds(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::bonds::Param0>,
                    _1: impl ::std::borrow::Borrow<types::bonds::Param1>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::bonds::Bonds,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "SubtensorModule",
                        "Bonds",
                        vec![
                            ::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
                            ::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
                        ],
                        [
                            11u8, 36u8, 139u8, 245u8, 90u8, 20u8, 111u8, 189u8, 60u8, 65u8, 247u8,
                            126u8, 209u8, 110u8, 104u8, 140u8, 171u8, 248u8, 40u8, 94u8, 193u8,
                            61u8, 129u8, 130u8, 128u8, 114u8, 60u8, 60u8, 231u8, 227u8, 223u8,
                            202u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                pub fn initial_issuance(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u64> {
                    ::subxt::constants::Address::new_static(
                        "SubtensorModule",
                        "InitialIssuance",
                        [
                            128u8, 214u8, 205u8, 242u8, 181u8, 142u8, 124u8, 231u8, 190u8, 146u8,
                            59u8, 226u8, 157u8, 101u8, 103u8, 117u8, 249u8, 65u8, 18u8, 191u8,
                            103u8, 119u8, 53u8, 85u8, 81u8, 96u8, 220u8, 42u8, 184u8, 239u8, 42u8,
                            246u8,
                        ],
                    )
                }
                pub fn initial_min_allowed_weights(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u16> {
                    ::subxt::constants::Address::new_static(
                        "SubtensorModule",
                        "InitialMinAllowedWeights",
                        [
                            116u8, 33u8, 2u8, 170u8, 181u8, 147u8, 171u8, 169u8, 167u8, 227u8,
                            41u8, 144u8, 11u8, 236u8, 82u8, 100u8, 74u8, 60u8, 184u8, 72u8, 169u8,
                            90u8, 208u8, 135u8, 15u8, 117u8, 10u8, 123u8, 128u8, 193u8, 29u8, 70u8,
                        ],
                    )
                }
                pub fn initial_emission_value(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u16> {
                    ::subxt::constants::Address::new_static(
                        "SubtensorModule",
                        "InitialEmissionValue",
                        [
                            116u8, 33u8, 2u8, 170u8, 181u8, 147u8, 171u8, 169u8, 167u8, 227u8,
                            41u8, 144u8, 11u8, 236u8, 82u8, 100u8, 74u8, 60u8, 184u8, 72u8, 169u8,
                            90u8, 208u8, 135u8, 15u8, 117u8, 10u8, 123u8, 128u8, 193u8, 29u8, 70u8,
                        ],
                    )
                }
                pub fn initial_max_weights_limit(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u16> {
                    ::subxt::constants::Address::new_static(
                        "SubtensorModule",
                        "InitialMaxWeightsLimit",
                        [
                            116u8, 33u8, 2u8, 170u8, 181u8, 147u8, 171u8, 169u8, 167u8, 227u8,
                            41u8, 144u8, 11u8, 236u8, 82u8, 100u8, 74u8, 60u8, 184u8, 72u8, 169u8,
                            90u8, 208u8, 135u8, 15u8, 117u8, 10u8, 123u8, 128u8, 193u8, 29u8, 70u8,
                        ],
                    )
                }
                pub fn initial_tempo(&self) -> ::subxt::constants::Address<::core::primitive::u16> {
                    ::subxt::constants::Address::new_static(
                        "SubtensorModule",
                        "InitialTempo",
                        [
                            116u8, 33u8, 2u8, 170u8, 181u8, 147u8, 171u8, 169u8, 167u8, 227u8,
                            41u8, 144u8, 11u8, 236u8, 82u8, 100u8, 74u8, 60u8, 184u8, 72u8, 169u8,
                            90u8, 208u8, 135u8, 15u8, 117u8, 10u8, 123u8, 128u8, 193u8, 29u8, 70u8,
                        ],
                    )
                }
                pub fn initial_difficulty(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u64> {
                    ::subxt::constants::Address::new_static(
                        "SubtensorModule",
                        "InitialDifficulty",
                        [
                            128u8, 214u8, 205u8, 242u8, 181u8, 142u8, 124u8, 231u8, 190u8, 146u8,
                            59u8, 226u8, 157u8, 101u8, 103u8, 117u8, 249u8, 65u8, 18u8, 191u8,
                            103u8, 119u8, 53u8, 85u8, 81u8, 96u8, 220u8, 42u8, 184u8, 239u8, 42u8,
                            246u8,
                        ],
                    )
                }
                pub fn initial_max_difficulty(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u64> {
                    ::subxt::constants::Address::new_static(
                        "SubtensorModule",
                        "InitialMaxDifficulty",
                        [
                            128u8, 214u8, 205u8, 242u8, 181u8, 142u8, 124u8, 231u8, 190u8, 146u8,
                            59u8, 226u8, 157u8, 101u8, 103u8, 117u8, 249u8, 65u8, 18u8, 191u8,
                            103u8, 119u8, 53u8, 85u8, 81u8, 96u8, 220u8, 42u8, 184u8, 239u8, 42u8,
                            246u8,
                        ],
                    )
                }
                pub fn initial_min_difficulty(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u64> {
                    ::subxt::constants::Address::new_static(
                        "SubtensorModule",
                        "InitialMinDifficulty",
                        [
                            128u8, 214u8, 205u8, 242u8, 181u8, 142u8, 124u8, 231u8, 190u8, 146u8,
                            59u8, 226u8, 157u8, 101u8, 103u8, 117u8, 249u8, 65u8, 18u8, 191u8,
                            103u8, 119u8, 53u8, 85u8, 81u8, 96u8, 220u8, 42u8, 184u8, 239u8, 42u8,
                            246u8,
                        ],
                    )
                }
                pub fn initial_rao_recycled_for_registration(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u64> {
                    ::subxt::constants::Address::new_static(
                        "SubtensorModule",
                        "InitialRAORecycledForRegistration",
                        [
                            128u8, 214u8, 205u8, 242u8, 181u8, 142u8, 124u8, 231u8, 190u8, 146u8,
                            59u8, 226u8, 157u8, 101u8, 103u8, 117u8, 249u8, 65u8, 18u8, 191u8,
                            103u8, 119u8, 53u8, 85u8, 81u8, 96u8, 220u8, 42u8, 184u8, 239u8, 42u8,
                            246u8,
                        ],
                    )
                }
                pub fn initial_burn(&self) -> ::subxt::constants::Address<::core::primitive::u64> {
                    ::subxt::constants::Address::new_static(
                        "SubtensorModule",
                        "InitialBurn",
                        [
                            128u8, 214u8, 205u8, 242u8, 181u8, 142u8, 124u8, 231u8, 190u8, 146u8,
                            59u8, 226u8, 157u8, 101u8, 103u8, 117u8, 249u8, 65u8, 18u8, 191u8,
                            103u8, 119u8, 53u8, 85u8, 81u8, 96u8, 220u8, 42u8, 184u8, 239u8, 42u8,
                            246u8,
                        ],
                    )
                }
                pub fn initial_max_burn(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u64> {
                    ::subxt::constants::Address::new_static(
                        "SubtensorModule",
                        "InitialMaxBurn",
                        [
                            128u8, 214u8, 205u8, 242u8, 181u8, 142u8, 124u8, 231u8, 190u8, 146u8,
                            59u8, 226u8, 157u8, 101u8, 103u8, 117u8, 249u8, 65u8, 18u8, 191u8,
                            103u8, 119u8, 53u8, 85u8, 81u8, 96u8, 220u8, 42u8, 184u8, 239u8, 42u8,
                            246u8,
                        ],
                    )
                }
                pub fn initial_min_burn(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u64> {
                    ::subxt::constants::Address::new_static(
                        "SubtensorModule",
                        "InitialMinBurn",
                        [
                            128u8, 214u8, 205u8, 242u8, 181u8, 142u8, 124u8, 231u8, 190u8, 146u8,
                            59u8, 226u8, 157u8, 101u8, 103u8, 117u8, 249u8, 65u8, 18u8, 191u8,
                            103u8, 119u8, 53u8, 85u8, 81u8, 96u8, 220u8, 42u8, 184u8, 239u8, 42u8,
                            246u8,
                        ],
                    )
                }
                pub fn initial_adjustment_interval(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u16> {
                    ::subxt::constants::Address::new_static(
                        "SubtensorModule",
                        "InitialAdjustmentInterval",
                        [
                            116u8, 33u8, 2u8, 170u8, 181u8, 147u8, 171u8, 169u8, 167u8, 227u8,
                            41u8, 144u8, 11u8, 236u8, 82u8, 100u8, 74u8, 60u8, 184u8, 72u8, 169u8,
                            90u8, 208u8, 135u8, 15u8, 117u8, 10u8, 123u8, 128u8, 193u8, 29u8, 70u8,
                        ],
                    )
                }
                pub fn initial_bonds_moving_average(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u64> {
                    ::subxt::constants::Address::new_static(
                        "SubtensorModule",
                        "InitialBondsMovingAverage",
                        [
                            128u8, 214u8, 205u8, 242u8, 181u8, 142u8, 124u8, 231u8, 190u8, 146u8,
                            59u8, 226u8, 157u8, 101u8, 103u8, 117u8, 249u8, 65u8, 18u8, 191u8,
                            103u8, 119u8, 53u8, 85u8, 81u8, 96u8, 220u8, 42u8, 184u8, 239u8, 42u8,
                            246u8,
                        ],
                    )
                }
                pub fn initial_target_registrations_per_interval(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u16> {
                    ::subxt::constants::Address::new_static(
                        "SubtensorModule",
                        "InitialTargetRegistrationsPerInterval",
                        [
                            116u8, 33u8, 2u8, 170u8, 181u8, 147u8, 171u8, 169u8, 167u8, 227u8,
                            41u8, 144u8, 11u8, 236u8, 82u8, 100u8, 74u8, 60u8, 184u8, 72u8, 169u8,
                            90u8, 208u8, 135u8, 15u8, 117u8, 10u8, 123u8, 128u8, 193u8, 29u8, 70u8,
                        ],
                    )
                }
                pub fn initial_rho(&self) -> ::subxt::constants::Address<::core::primitive::u16> {
                    ::subxt::constants::Address::new_static(
                        "SubtensorModule",
                        "InitialRho",
                        [
                            116u8, 33u8, 2u8, 170u8, 181u8, 147u8, 171u8, 169u8, 167u8, 227u8,
                            41u8, 144u8, 11u8, 236u8, 82u8, 100u8, 74u8, 60u8, 184u8, 72u8, 169u8,
                            90u8, 208u8, 135u8, 15u8, 117u8, 10u8, 123u8, 128u8, 193u8, 29u8, 70u8,
                        ],
                    )
                }
                pub fn initial_kappa(&self) -> ::subxt::constants::Address<::core::primitive::u16> {
                    ::subxt::constants::Address::new_static(
                        "SubtensorModule",
                        "InitialKappa",
                        [
                            116u8, 33u8, 2u8, 170u8, 181u8, 147u8, 171u8, 169u8, 167u8, 227u8,
                            41u8, 144u8, 11u8, 236u8, 82u8, 100u8, 74u8, 60u8, 184u8, 72u8, 169u8,
                            90u8, 208u8, 135u8, 15u8, 117u8, 10u8, 123u8, 128u8, 193u8, 29u8, 70u8,
                        ],
                    )
                }
                pub fn initial_max_allowed_uids(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u16> {
                    ::subxt::constants::Address::new_static(
                        "SubtensorModule",
                        "InitialMaxAllowedUids",
                        [
                            116u8, 33u8, 2u8, 170u8, 181u8, 147u8, 171u8, 169u8, 167u8, 227u8,
                            41u8, 144u8, 11u8, 236u8, 82u8, 100u8, 74u8, 60u8, 184u8, 72u8, 169u8,
                            90u8, 208u8, 135u8, 15u8, 117u8, 10u8, 123u8, 128u8, 193u8, 29u8, 70u8,
                        ],
                    )
                }
                pub fn initial_validator_prune_len(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u64> {
                    ::subxt::constants::Address::new_static(
                        "SubtensorModule",
                        "InitialValidatorPruneLen",
                        [
                            128u8, 214u8, 205u8, 242u8, 181u8, 142u8, 124u8, 231u8, 190u8, 146u8,
                            59u8, 226u8, 157u8, 101u8, 103u8, 117u8, 249u8, 65u8, 18u8, 191u8,
                            103u8, 119u8, 53u8, 85u8, 81u8, 96u8, 220u8, 42u8, 184u8, 239u8, 42u8,
                            246u8,
                        ],
                    )
                }
                pub fn initial_scaling_law_power(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u16> {
                    ::subxt::constants::Address::new_static(
                        "SubtensorModule",
                        "InitialScalingLawPower",
                        [
                            116u8, 33u8, 2u8, 170u8, 181u8, 147u8, 171u8, 169u8, 167u8, 227u8,
                            41u8, 144u8, 11u8, 236u8, 82u8, 100u8, 74u8, 60u8, 184u8, 72u8, 169u8,
                            90u8, 208u8, 135u8, 15u8, 117u8, 10u8, 123u8, 128u8, 193u8, 29u8, 70u8,
                        ],
                    )
                }
                pub fn initial_immunity_period(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u16> {
                    ::subxt::constants::Address::new_static(
                        "SubtensorModule",
                        "InitialImmunityPeriod",
                        [
                            116u8, 33u8, 2u8, 170u8, 181u8, 147u8, 171u8, 169u8, 167u8, 227u8,
                            41u8, 144u8, 11u8, 236u8, 82u8, 100u8, 74u8, 60u8, 184u8, 72u8, 169u8,
                            90u8, 208u8, 135u8, 15u8, 117u8, 10u8, 123u8, 128u8, 193u8, 29u8, 70u8,
                        ],
                    )
                }
                pub fn initial_activity_cutoff(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u16> {
                    ::subxt::constants::Address::new_static(
                        "SubtensorModule",
                        "InitialActivityCutoff",
                        [
                            116u8, 33u8, 2u8, 170u8, 181u8, 147u8, 171u8, 169u8, 167u8, 227u8,
                            41u8, 144u8, 11u8, 236u8, 82u8, 100u8, 74u8, 60u8, 184u8, 72u8, 169u8,
                            90u8, 208u8, 135u8, 15u8, 117u8, 10u8, 123u8, 128u8, 193u8, 29u8, 70u8,
                        ],
                    )
                }
                pub fn initial_max_registrations_per_block(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u16> {
                    ::subxt::constants::Address::new_static(
                        "SubtensorModule",
                        "InitialMaxRegistrationsPerBlock",
                        [
                            116u8, 33u8, 2u8, 170u8, 181u8, 147u8, 171u8, 169u8, 167u8, 227u8,
                            41u8, 144u8, 11u8, 236u8, 82u8, 100u8, 74u8, 60u8, 184u8, 72u8, 169u8,
                            90u8, 208u8, 135u8, 15u8, 117u8, 10u8, 123u8, 128u8, 193u8, 29u8, 70u8,
                        ],
                    )
                }
                pub fn initial_pruning_score(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u16> {
                    ::subxt::constants::Address::new_static(
                        "SubtensorModule",
                        "InitialPruningScore",
                        [
                            116u8, 33u8, 2u8, 170u8, 181u8, 147u8, 171u8, 169u8, 167u8, 227u8,
                            41u8, 144u8, 11u8, 236u8, 82u8, 100u8, 74u8, 60u8, 184u8, 72u8, 169u8,
                            90u8, 208u8, 135u8, 15u8, 117u8, 10u8, 123u8, 128u8, 193u8, 29u8, 70u8,
                        ],
                    )
                }
                pub fn initial_max_allowed_validators(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u16> {
                    ::subxt::constants::Address::new_static(
                        "SubtensorModule",
                        "InitialMaxAllowedValidators",
                        [
                            116u8, 33u8, 2u8, 170u8, 181u8, 147u8, 171u8, 169u8, 167u8, 227u8,
                            41u8, 144u8, 11u8, 236u8, 82u8, 100u8, 74u8, 60u8, 184u8, 72u8, 169u8,
                            90u8, 208u8, 135u8, 15u8, 117u8, 10u8, 123u8, 128u8, 193u8, 29u8, 70u8,
                        ],
                    )
                }
                pub fn initial_default_take(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u16> {
                    ::subxt::constants::Address::new_static(
                        "SubtensorModule",
                        "InitialDefaultTake",
                        [
                            116u8, 33u8, 2u8, 170u8, 181u8, 147u8, 171u8, 169u8, 167u8, 227u8,
                            41u8, 144u8, 11u8, 236u8, 82u8, 100u8, 74u8, 60u8, 184u8, 72u8, 169u8,
                            90u8, 208u8, 135u8, 15u8, 117u8, 10u8, 123u8, 128u8, 193u8, 29u8, 70u8,
                        ],
                    )
                }
                pub fn initial_weights_version_key(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u64> {
                    ::subxt::constants::Address::new_static(
                        "SubtensorModule",
                        "InitialWeightsVersionKey",
                        [
                            128u8, 214u8, 205u8, 242u8, 181u8, 142u8, 124u8, 231u8, 190u8, 146u8,
                            59u8, 226u8, 157u8, 101u8, 103u8, 117u8, 249u8, 65u8, 18u8, 191u8,
                            103u8, 119u8, 53u8, 85u8, 81u8, 96u8, 220u8, 42u8, 184u8, 239u8, 42u8,
                            246u8,
                        ],
                    )
                }
                pub fn initial_serving_rate_limit(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u64> {
                    ::subxt::constants::Address::new_static(
                        "SubtensorModule",
                        "InitialServingRateLimit",
                        [
                            128u8, 214u8, 205u8, 242u8, 181u8, 142u8, 124u8, 231u8, 190u8, 146u8,
                            59u8, 226u8, 157u8, 101u8, 103u8, 117u8, 249u8, 65u8, 18u8, 191u8,
                            103u8, 119u8, 53u8, 85u8, 81u8, 96u8, 220u8, 42u8, 184u8, 239u8, 42u8,
                            246u8,
                        ],
                    )
                }
                pub fn initial_tx_rate_limit(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u64> {
                    ::subxt::constants::Address::new_static(
                        "SubtensorModule",
                        "InitialTxRateLimit",
                        [
                            128u8, 214u8, 205u8, 242u8, 181u8, 142u8, 124u8, 231u8, 190u8, 146u8,
                            59u8, 226u8, 157u8, 101u8, 103u8, 117u8, 249u8, 65u8, 18u8, 191u8,
                            103u8, 119u8, 53u8, 85u8, 81u8, 96u8, 220u8, 42u8, 184u8, 239u8, 42u8,
                            246u8,
                        ],
                    )
                }
                pub fn initial_senate_required_stake_percentage(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u64> {
                    ::subxt::constants::Address::new_static(
                        "SubtensorModule",
                        "InitialSenateRequiredStakePercentage",
                        [
                            128u8, 214u8, 205u8, 242u8, 181u8, 142u8, 124u8, 231u8, 190u8, 146u8,
                            59u8, 226u8, 157u8, 101u8, 103u8, 117u8, 249u8, 65u8, 18u8, 191u8,
                            103u8, 119u8, 53u8, 85u8, 81u8, 96u8, 220u8, 42u8, 184u8, 239u8, 42u8,
                            246u8,
                        ],
                    )
                }
                pub fn initial_adjustment_alpha(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u64> {
                    ::subxt::constants::Address::new_static(
                        "SubtensorModule",
                        "InitialAdjustmentAlpha",
                        [
                            128u8, 214u8, 205u8, 242u8, 181u8, 142u8, 124u8, 231u8, 190u8, 146u8,
                            59u8, 226u8, 157u8, 101u8, 103u8, 117u8, 249u8, 65u8, 18u8, 191u8,
                            103u8, 119u8, 53u8, 85u8, 81u8, 96u8, 220u8, 42u8, 184u8, 239u8, 42u8,
                            246u8,
                        ],
                    )
                }
                pub fn initial_network_immunity_period(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u64> {
                    ::subxt::constants::Address::new_static(
                        "SubtensorModule",
                        "InitialNetworkImmunityPeriod",
                        [
                            128u8, 214u8, 205u8, 242u8, 181u8, 142u8, 124u8, 231u8, 190u8, 146u8,
                            59u8, 226u8, 157u8, 101u8, 103u8, 117u8, 249u8, 65u8, 18u8, 191u8,
                            103u8, 119u8, 53u8, 85u8, 81u8, 96u8, 220u8, 42u8, 184u8, 239u8, 42u8,
                            246u8,
                        ],
                    )
                }
                pub fn initial_network_min_allowed_uids(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u16> {
                    ::subxt::constants::Address::new_static(
                        "SubtensorModule",
                        "InitialNetworkMinAllowedUids",
                        [
                            116u8, 33u8, 2u8, 170u8, 181u8, 147u8, 171u8, 169u8, 167u8, 227u8,
                            41u8, 144u8, 11u8, 236u8, 82u8, 100u8, 74u8, 60u8, 184u8, 72u8, 169u8,
                            90u8, 208u8, 135u8, 15u8, 117u8, 10u8, 123u8, 128u8, 193u8, 29u8, 70u8,
                        ],
                    )
                }
                pub fn initial_network_min_lock_cost(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u64> {
                    ::subxt::constants::Address::new_static(
                        "SubtensorModule",
                        "InitialNetworkMinLockCost",
                        [
                            128u8, 214u8, 205u8, 242u8, 181u8, 142u8, 124u8, 231u8, 190u8, 146u8,
                            59u8, 226u8, 157u8, 101u8, 103u8, 117u8, 249u8, 65u8, 18u8, 191u8,
                            103u8, 119u8, 53u8, 85u8, 81u8, 96u8, 220u8, 42u8, 184u8, 239u8, 42u8,
                            246u8,
                        ],
                    )
                }
                pub fn initial_subnet_owner_cut(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u16> {
                    ::subxt::constants::Address::new_static(
                        "SubtensorModule",
                        "InitialSubnetOwnerCut",
                        [
                            116u8, 33u8, 2u8, 170u8, 181u8, 147u8, 171u8, 169u8, 167u8, 227u8,
                            41u8, 144u8, 11u8, 236u8, 82u8, 100u8, 74u8, 60u8, 184u8, 72u8, 169u8,
                            90u8, 208u8, 135u8, 15u8, 117u8, 10u8, 123u8, 128u8, 193u8, 29u8, 70u8,
                        ],
                    )
                }
                pub fn initial_network_lock_reduction_interval(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u64> {
                    ::subxt::constants::Address::new_static(
                        "SubtensorModule",
                        "InitialNetworkLockReductionInterval",
                        [
                            128u8, 214u8, 205u8, 242u8, 181u8, 142u8, 124u8, 231u8, 190u8, 146u8,
                            59u8, 226u8, 157u8, 101u8, 103u8, 117u8, 249u8, 65u8, 18u8, 191u8,
                            103u8, 119u8, 53u8, 85u8, 81u8, 96u8, 220u8, 42u8, 184u8, 239u8, 42u8,
                            246u8,
                        ],
                    )
                }
                pub fn initial_subnet_limit(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u16> {
                    ::subxt::constants::Address::new_static(
                        "SubtensorModule",
                        "InitialSubnetLimit",
                        [
                            116u8, 33u8, 2u8, 170u8, 181u8, 147u8, 171u8, 169u8, 167u8, 227u8,
                            41u8, 144u8, 11u8, 236u8, 82u8, 100u8, 74u8, 60u8, 184u8, 72u8, 169u8,
                            90u8, 208u8, 135u8, 15u8, 117u8, 10u8, 123u8, 128u8, 193u8, 29u8, 70u8,
                        ],
                    )
                }
                pub fn initial_network_rate_limit(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u64> {
                    ::subxt::constants::Address::new_static(
                        "SubtensorModule",
                        "InitialNetworkRateLimit",
                        [
                            128u8, 214u8, 205u8, 242u8, 181u8, 142u8, 124u8, 231u8, 190u8, 146u8,
                            59u8, 226u8, 157u8, 101u8, 103u8, 117u8, 249u8, 65u8, 18u8, 191u8,
                            103u8, 119u8, 53u8, 85u8, 81u8, 96u8, 220u8, 42u8, 184u8, 239u8, 42u8,
                            246u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod triumvirate {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
        pub type Error = runtime_types::pallet_collective::pallet::Error;
        #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
        pub type Call = runtime_types::pallet_collective::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Set the collective's membership."]
                #[doc = ""]
                #[doc = "- `new_members`: The new member list. Be nice to the chain and provide it sorted."]
                #[doc = "- `prime`: The prime member whose vote sets the default."]
                #[doc = "- `old_count`: The upper bound for the previous number of members in storage. Used for"]
                #[doc = "  weight estimation."]
                #[doc = ""]
                #[doc = "The dispatch of this call must be `SetMembersOrigin`."]
                #[doc = ""]
                #[doc = "NOTE: Does not enforce the expected `MaxMembers` limit on the amount of members, but"]
                #[doc = "      the weight estimations rely on it to estimate dispatchable weight."]
                #[doc = ""]
                #[doc = "# WARNING:"]
                #[doc = ""]
                #[doc = "The `pallet-collective` can also be managed by logic outside of the pallet through the"]
                #[doc = "implementation of the trait [`ChangeMembers`]."]
                #[doc = "Any call to `set_members` must be careful that the member set doesn't get out of sync"]
                #[doc = "with other logic managing the member set."]
                #[doc = ""]
                #[doc = "## Complexity:"]
                #[doc = "- `O(MP + N)` where:"]
                #[doc = "  - `M` old-members-count (code- and governance-bounded)"]
                #[doc = "  - `N` new-members-count (code- and governance-bounded)"]
                #[doc = "  - `P` proposals-count (code-bounded)"]
                pub struct SetMembers {
                    pub new_members: set_members::NewMembers,
                    pub prime: set_members::Prime,
                    pub old_count: set_members::OldCount,
                }
                pub mod set_members {
                    use super::runtime_types;
                    pub type NewMembers = ::std::vec::Vec<::subxt::utils::AccountId32>;
                    pub type Prime = ::core::option::Option<::subxt::utils::AccountId32>;
                    pub type OldCount = ::core::primitive::u32;
                }
                impl ::subxt::blocks::StaticExtrinsic for SetMembers {
                    const PALLET: &'static str = "Triumvirate";
                    const CALL: &'static str = "set_members";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Dispatch a proposal from a member using the `Member` origin."]
                #[doc = ""]
                #[doc = "Origin must be a member of the collective."]
                #[doc = ""]
                #[doc = "## Complexity:"]
                #[doc = "- `O(B + M + P)` where:"]
                #[doc = "- `B` is `proposal` size in bytes (length-fee-bounded)"]
                #[doc = "- `M` members-count (code-bounded)"]
                #[doc = "- `P` complexity of dispatching `proposal`"]
                pub struct Execute {
                    pub proposal: ::std::boxed::Box<execute::Proposal>,
                    #[codec(compact)]
                    pub length_bound: execute::LengthBound,
                }
                pub mod execute {
                    use super::runtime_types;
                    pub type Proposal = runtime_types::node_subtensor_runtime::RuntimeCall;
                    pub type LengthBound = ::core::primitive::u32;
                }
                impl ::subxt::blocks::StaticExtrinsic for Execute {
                    const PALLET: &'static str = "Triumvirate";
                    const CALL: &'static str = "execute";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Add a new proposal to either be voted on or executed directly."]
                #[doc = ""]
                #[doc = "Requires the sender to be member."]
                #[doc = ""]
                #[doc = "`threshold` determines whether `proposal` is executed directly (`threshold < 2`)"]
                #[doc = "or put up for voting."]
                #[doc = ""]
                #[doc = "## Complexity"]
                #[doc = "- `O(B + M + P1)` or `O(B + M + P2)` where:"]
                #[doc = "  - `B` is `proposal` size in bytes (length-fee-bounded)"]
                #[doc = "  - `M` is members-count (code- and governance-bounded)"]
                #[doc = "  - branching is influenced by `threshold` where:"]
                #[doc = "    - `P1` is proposal execution complexity (`threshold < 2`)"]
                #[doc = "    - `P2` is proposals-count (code-bounded) (`threshold >= 2`)"]
                pub struct Propose {
                    pub proposal: ::std::boxed::Box<propose::Proposal>,
                    #[codec(compact)]
                    pub length_bound: propose::LengthBound,
                    pub duration: propose::Duration,
                }
                pub mod propose {
                    use super::runtime_types;
                    pub type Proposal = runtime_types::node_subtensor_runtime::RuntimeCall;
                    pub type LengthBound = ::core::primitive::u32;
                    pub type Duration = ::core::primitive::u32;
                }
                impl ::subxt::blocks::StaticExtrinsic for Propose {
                    const PALLET: &'static str = "Triumvirate";
                    const CALL: &'static str = "propose";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Add an aye or nay vote for the sender to the given proposal."]
                #[doc = ""]
                #[doc = "Requires the sender to be a member."]
                #[doc = ""]
                #[doc = "Transaction fees will be waived if the member is voting on any particular proposal"]
                #[doc = "for the first time and the call is successful. Subsequent vote changes will charge a"]
                #[doc = "fee."]
                #[doc = "## Complexity"]
                #[doc = "- `O(M)` where `M` is members-count (code- and governance-bounded)"]
                pub struct Vote {
                    pub proposal: vote::Proposal,
                    #[codec(compact)]
                    pub index: vote::Index,
                    pub approve: vote::Approve,
                }
                pub mod vote {
                    use super::runtime_types;
                    pub type Proposal = ::subxt::utils::H256;
                    pub type Index = ::core::primitive::u32;
                    pub type Approve = ::core::primitive::bool;
                }
                impl ::subxt::blocks::StaticExtrinsic for Vote {
                    const PALLET: &'static str = "Triumvirate";
                    const CALL: &'static str = "vote";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Close a vote that is either approved, disapproved or whose voting period has ended."]
                #[doc = ""]
                #[doc = "May be called by any signed account in order to finish voting and close the proposal."]
                #[doc = ""]
                #[doc = "If called before the end of the voting period it will only close the vote if it is"]
                #[doc = "has enough votes to be approved or disapproved."]
                #[doc = ""]
                #[doc = "If called after the end of the voting period abstentions are counted as rejections"]
                #[doc = "unless there is a prime member set and the prime member cast an approval."]
                #[doc = ""]
                #[doc = "If the close operation completes successfully with disapproval, the transaction fee will"]
                #[doc = "be waived. Otherwise execution of the approved operation will be charged to the caller."]
                #[doc = ""]
                #[doc = "+ `proposal_weight_bound`: The maximum amount of weight consumed by executing the closed"]
                #[doc = "proposal."]
                #[doc = "+ `length_bound`: The upper bound for the length of the proposal in storage. Checked via"]
                #[doc = "`storage::read` so it is `size_of::<u32>() == 4` larger than the pure length."]
                #[doc = ""]
                #[doc = "## Complexity"]
                #[doc = "- `O(B + M + P1 + P2)` where:"]
                #[doc = "  - `B` is `proposal` size in bytes (length-fee-bounded)"]
                #[doc = "  - `M` is members-count (code- and governance-bounded)"]
                #[doc = "  - `P1` is the complexity of `proposal` preimage."]
                #[doc = "  - `P2` is proposal-count (code-bounded)"]
                pub struct CloseOldWeight {
                    pub proposal_hash: close_old_weight::ProposalHash,
                    #[codec(compact)]
                    pub index: close_old_weight::Index,
                    #[codec(compact)]
                    pub proposal_weight_bound: close_old_weight::ProposalWeightBound,
                    #[codec(compact)]
                    pub length_bound: close_old_weight::LengthBound,
                }
                pub mod close_old_weight {
                    use super::runtime_types;
                    pub type ProposalHash = ::subxt::utils::H256;
                    pub type Index = ::core::primitive::u32;
                    pub type ProposalWeightBound = runtime_types::sp_weights::OldWeight;
                    pub type LengthBound = ::core::primitive::u32;
                }
                impl ::subxt::blocks::StaticExtrinsic for CloseOldWeight {
                    const PALLET: &'static str = "Triumvirate";
                    const CALL: &'static str = "close_old_weight";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Disapprove a proposal, close, and remove it from the system, regardless of its current"]
                #[doc = "state."]
                #[doc = ""]
                #[doc = "Must be called by the Root origin."]
                #[doc = ""]
                #[doc = "Parameters:"]
                #[doc = "* `proposal_hash`: The hash of the proposal that should be disapproved."]
                #[doc = ""]
                #[doc = "## Complexity"]
                #[doc = "O(P) where P is the number of max proposals"]
                pub struct DisapproveProposal {
                    pub proposal_hash: disapprove_proposal::ProposalHash,
                }
                pub mod disapprove_proposal {
                    use super::runtime_types;
                    pub type ProposalHash = ::subxt::utils::H256;
                }
                impl ::subxt::blocks::StaticExtrinsic for DisapproveProposal {
                    const PALLET: &'static str = "Triumvirate";
                    const CALL: &'static str = "disapprove_proposal";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Close a vote that is either approved, disapproved or whose voting period has ended."]
                #[doc = ""]
                #[doc = "May be called by any signed account in order to finish voting and close the proposal."]
                #[doc = ""]
                #[doc = "If called before the end of the voting period it will only close the vote if it is"]
                #[doc = "has enough votes to be approved or disapproved."]
                #[doc = ""]
                #[doc = "If called after the end of the voting period abstentions are counted as rejections"]
                #[doc = "unless there is a prime member set and the prime member cast an approval."]
                #[doc = ""]
                #[doc = "If the close operation completes successfully with disapproval, the transaction fee will"]
                #[doc = "be waived. Otherwise execution of the approved operation will be charged to the caller."]
                #[doc = ""]
                #[doc = "+ `proposal_weight_bound`: The maximum amount of weight consumed by executing the closed"]
                #[doc = "proposal."]
                #[doc = "+ `length_bound`: The upper bound for the length of the proposal in storage. Checked via"]
                #[doc = "`storage::read` so it is `size_of::<u32>() == 4` larger than the pure length."]
                #[doc = ""]
                #[doc = "## Complexity"]
                #[doc = "- `O(B + M + P1 + P2)` where:"]
                #[doc = "  - `B` is `proposal` size in bytes (length-fee-bounded)"]
                #[doc = "  - `M` is members-count (code- and governance-bounded)"]
                #[doc = "  - `P1` is the complexity of `proposal` preimage."]
                #[doc = "  - `P2` is proposal-count (code-bounded)"]
                pub struct Close {
                    pub proposal_hash: close::ProposalHash,
                    #[codec(compact)]
                    pub index: close::Index,
                    pub proposal_weight_bound: close::ProposalWeightBound,
                    #[codec(compact)]
                    pub length_bound: close::LengthBound,
                }
                pub mod close {
                    use super::runtime_types;
                    pub type ProposalHash = ::subxt::utils::H256;
                    pub type Index = ::core::primitive::u32;
                    pub type ProposalWeightBound = runtime_types::sp_weights::weight_v2::Weight;
                    pub type LengthBound = ::core::primitive::u32;
                }
                impl ::subxt::blocks::StaticExtrinsic for Close {
                    const PALLET: &'static str = "Triumvirate";
                    const CALL: &'static str = "close";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "Set the collective's membership."]
                #[doc = ""]
                #[doc = "- `new_members`: The new member list. Be nice to the chain and provide it sorted."]
                #[doc = "- `prime`: The prime member whose vote sets the default."]
                #[doc = "- `old_count`: The upper bound for the previous number of members in storage. Used for"]
                #[doc = "  weight estimation."]
                #[doc = ""]
                #[doc = "The dispatch of this call must be `SetMembersOrigin`."]
                #[doc = ""]
                #[doc = "NOTE: Does not enforce the expected `MaxMembers` limit on the amount of members, but"]
                #[doc = "      the weight estimations rely on it to estimate dispatchable weight."]
                #[doc = ""]
                #[doc = "# WARNING:"]
                #[doc = ""]
                #[doc = "The `pallet-collective` can also be managed by logic outside of the pallet through the"]
                #[doc = "implementation of the trait [`ChangeMembers`]."]
                #[doc = "Any call to `set_members` must be careful that the member set doesn't get out of sync"]
                #[doc = "with other logic managing the member set."]
                #[doc = ""]
                #[doc = "## Complexity:"]
                #[doc = "- `O(MP + N)` where:"]
                #[doc = "  - `M` old-members-count (code- and governance-bounded)"]
                #[doc = "  - `N` new-members-count (code- and governance-bounded)"]
                #[doc = "  - `P` proposals-count (code-bounded)"]
                pub fn set_members(
                    &self,
                    new_members: types::set_members::NewMembers,
                    prime: types::set_members::Prime,
                    old_count: types::set_members::OldCount,
                ) -> ::subxt::tx::Payload<types::SetMembers> {
                    ::subxt::tx::Payload::new_static(
                        "Triumvirate",
                        "set_members",
                        types::SetMembers {
                            new_members,
                            prime,
                            old_count,
                        },
                        [
                            66u8, 224u8, 186u8, 178u8, 41u8, 208u8, 67u8, 192u8, 57u8, 242u8,
                            141u8, 31u8, 216u8, 118u8, 192u8, 43u8, 125u8, 213u8, 226u8, 85u8,
                            142u8, 225u8, 131u8, 45u8, 172u8, 142u8, 12u8, 9u8, 73u8, 7u8, 218u8,
                            61u8,
                        ],
                    )
                }
                #[doc = "Dispatch a proposal from a member using the `Member` origin."]
                #[doc = ""]
                #[doc = "Origin must be a member of the collective."]
                #[doc = ""]
                #[doc = "## Complexity:"]
                #[doc = "- `O(B + M + P)` where:"]
                #[doc = "- `B` is `proposal` size in bytes (length-fee-bounded)"]
                #[doc = "- `M` members-count (code-bounded)"]
                #[doc = "- `P` complexity of dispatching `proposal`"]
                pub fn execute(
                    &self,
                    proposal: types::execute::Proposal,
                    length_bound: types::execute::LengthBound,
                ) -> ::subxt::tx::Payload<types::Execute> {
                    ::subxt::tx::Payload::new_static(
                        "Triumvirate",
                        "execute",
                        types::Execute {
                            proposal: ::std::boxed::Box::new(proposal),
                            length_bound,
                        },
                        [
                            99u8, 112u8, 159u8, 46u8, 48u8, 84u8, 147u8, 165u8, 148u8, 90u8, 178u8,
                            182u8, 10u8, 179u8, 135u8, 146u8, 169u8, 19u8, 7u8, 96u8, 76u8, 155u8,
                            189u8, 62u8, 34u8, 98u8, 56u8, 43u8, 107u8, 100u8, 1u8, 69u8,
                        ],
                    )
                }
                #[doc = "Add a new proposal to either be voted on or executed directly."]
                #[doc = ""]
                #[doc = "Requires the sender to be member."]
                #[doc = ""]
                #[doc = "`threshold` determines whether `proposal` is executed directly (`threshold < 2`)"]
                #[doc = "or put up for voting."]
                #[doc = ""]
                #[doc = "## Complexity"]
                #[doc = "- `O(B + M + P1)` or `O(B + M + P2)` where:"]
                #[doc = "  - `B` is `proposal` size in bytes (length-fee-bounded)"]
                #[doc = "  - `M` is members-count (code- and governance-bounded)"]
                #[doc = "  - branching is influenced by `threshold` where:"]
                #[doc = "    - `P1` is proposal execution complexity (`threshold < 2`)"]
                #[doc = "    - `P2` is proposals-count (code-bounded) (`threshold >= 2`)"]
                pub fn propose(
                    &self,
                    proposal: types::propose::Proposal,
                    length_bound: types::propose::LengthBound,
                    duration: types::propose::Duration,
                ) -> ::subxt::tx::Payload<types::Propose> {
                    ::subxt::tx::Payload::new_static(
                        "Triumvirate",
                        "propose",
                        types::Propose {
                            proposal: ::std::boxed::Box::new(proposal),
                            length_bound,
                            duration,
                        },
                        [
                            170u8, 91u8, 79u8, 232u8, 232u8, 26u8, 33u8, 214u8, 208u8, 114u8, 17u8,
                            239u8, 146u8, 182u8, 163u8, 132u8, 90u8, 169u8, 238u8, 103u8, 150u8,
                            58u8, 115u8, 14u8, 137u8, 159u8, 65u8, 172u8, 127u8, 39u8, 244u8,
                            144u8,
                        ],
                    )
                }
                #[doc = "Add an aye or nay vote for the sender to the given proposal."]
                #[doc = ""]
                #[doc = "Requires the sender to be a member."]
                #[doc = ""]
                #[doc = "Transaction fees will be waived if the member is voting on any particular proposal"]
                #[doc = "for the first time and the call is successful. Subsequent vote changes will charge a"]
                #[doc = "fee."]
                #[doc = "## Complexity"]
                #[doc = "- `O(M)` where `M` is members-count (code- and governance-bounded)"]
                pub fn vote(
                    &self,
                    proposal: types::vote::Proposal,
                    index: types::vote::Index,
                    approve: types::vote::Approve,
                ) -> ::subxt::tx::Payload<types::Vote> {
                    ::subxt::tx::Payload::new_static(
                        "Triumvirate",
                        "vote",
                        types::Vote {
                            proposal,
                            index,
                            approve,
                        },
                        [
                            110u8, 141u8, 24u8, 33u8, 91u8, 7u8, 89u8, 198u8, 54u8, 10u8, 76u8,
                            129u8, 45u8, 20u8, 216u8, 104u8, 231u8, 246u8, 174u8, 205u8, 190u8,
                            176u8, 171u8, 113u8, 33u8, 37u8, 155u8, 203u8, 251u8, 34u8, 25u8,
                            120u8,
                        ],
                    )
                }
                #[doc = "Close a vote that is either approved, disapproved or whose voting period has ended."]
                #[doc = ""]
                #[doc = "May be called by any signed account in order to finish voting and close the proposal."]
                #[doc = ""]
                #[doc = "If called before the end of the voting period it will only close the vote if it is"]
                #[doc = "has enough votes to be approved or disapproved."]
                #[doc = ""]
                #[doc = "If called after the end of the voting period abstentions are counted as rejections"]
                #[doc = "unless there is a prime member set and the prime member cast an approval."]
                #[doc = ""]
                #[doc = "If the close operation completes successfully with disapproval, the transaction fee will"]
                #[doc = "be waived. Otherwise execution of the approved operation will be charged to the caller."]
                #[doc = ""]
                #[doc = "+ `proposal_weight_bound`: The maximum amount of weight consumed by executing the closed"]
                #[doc = "proposal."]
                #[doc = "+ `length_bound`: The upper bound for the length of the proposal in storage. Checked via"]
                #[doc = "`storage::read` so it is `size_of::<u32>() == 4` larger than the pure length."]
                #[doc = ""]
                #[doc = "## Complexity"]
                #[doc = "- `O(B + M + P1 + P2)` where:"]
                #[doc = "  - `B` is `proposal` size in bytes (length-fee-bounded)"]
                #[doc = "  - `M` is members-count (code- and governance-bounded)"]
                #[doc = "  - `P1` is the complexity of `proposal` preimage."]
                #[doc = "  - `P2` is proposal-count (code-bounded)"]
                pub fn close_old_weight(
                    &self,
                    proposal_hash: types::close_old_weight::ProposalHash,
                    index: types::close_old_weight::Index,
                    proposal_weight_bound: types::close_old_weight::ProposalWeightBound,
                    length_bound: types::close_old_weight::LengthBound,
                ) -> ::subxt::tx::Payload<types::CloseOldWeight> {
                    ::subxt::tx::Payload::new_static(
                        "Triumvirate",
                        "close_old_weight",
                        types::CloseOldWeight {
                            proposal_hash,
                            index,
                            proposal_weight_bound,
                            length_bound,
                        },
                        [
                            121u8, 45u8, 63u8, 33u8, 230u8, 94u8, 125u8, 81u8, 89u8, 96u8, 247u8,
                            228u8, 148u8, 166u8, 46u8, 135u8, 232u8, 107u8, 44u8, 77u8, 10u8,
                            180u8, 121u8, 208u8, 127u8, 111u8, 249u8, 92u8, 108u8, 119u8, 156u8,
                            220u8,
                        ],
                    )
                }
                #[doc = "Disapprove a proposal, close, and remove it from the system, regardless of its current"]
                #[doc = "state."]
                #[doc = ""]
                #[doc = "Must be called by the Root origin."]
                #[doc = ""]
                #[doc = "Parameters:"]
                #[doc = "* `proposal_hash`: The hash of the proposal that should be disapproved."]
                #[doc = ""]
                #[doc = "## Complexity"]
                #[doc = "O(P) where P is the number of max proposals"]
                pub fn disapprove_proposal(
                    &self,
                    proposal_hash: types::disapprove_proposal::ProposalHash,
                ) -> ::subxt::tx::Payload<types::DisapproveProposal> {
                    ::subxt::tx::Payload::new_static(
                        "Triumvirate",
                        "disapprove_proposal",
                        types::DisapproveProposal { proposal_hash },
                        [
                            26u8, 140u8, 111u8, 193u8, 229u8, 59u8, 53u8, 196u8, 230u8, 60u8, 7u8,
                            155u8, 168u8, 7u8, 201u8, 177u8, 70u8, 103u8, 190u8, 57u8, 244u8,
                            156u8, 67u8, 101u8, 228u8, 6u8, 213u8, 83u8, 225u8, 95u8, 148u8, 96u8,
                        ],
                    )
                }
                #[doc = "Close a vote that is either approved, disapproved or whose voting period has ended."]
                #[doc = ""]
                #[doc = "May be called by any signed account in order to finish voting and close the proposal."]
                #[doc = ""]
                #[doc = "If called before the end of the voting period it will only close the vote if it is"]
                #[doc = "has enough votes to be approved or disapproved."]
                #[doc = ""]
                #[doc = "If called after the end of the voting period abstentions are counted as rejections"]
                #[doc = "unless there is a prime member set and the prime member cast an approval."]
                #[doc = ""]
                #[doc = "If the close operation completes successfully with disapproval, the transaction fee will"]
                #[doc = "be waived. Otherwise execution of the approved operation will be charged to the caller."]
                #[doc = ""]
                #[doc = "+ `proposal_weight_bound`: The maximum amount of weight consumed by executing the closed"]
                #[doc = "proposal."]
                #[doc = "+ `length_bound`: The upper bound for the length of the proposal in storage. Checked via"]
                #[doc = "`storage::read` so it is `size_of::<u32>() == 4` larger than the pure length."]
                #[doc = ""]
                #[doc = "## Complexity"]
                #[doc = "- `O(B + M + P1 + P2)` where:"]
                #[doc = "  - `B` is `proposal` size in bytes (length-fee-bounded)"]
                #[doc = "  - `M` is members-count (code- and governance-bounded)"]
                #[doc = "  - `P1` is the complexity of `proposal` preimage."]
                #[doc = "  - `P2` is proposal-count (code-bounded)"]
                pub fn close(
                    &self,
                    proposal_hash: types::close::ProposalHash,
                    index: types::close::Index,
                    proposal_weight_bound: types::close::ProposalWeightBound,
                    length_bound: types::close::LengthBound,
                ) -> ::subxt::tx::Payload<types::Close> {
                    ::subxt::tx::Payload::new_static(
                        "Triumvirate",
                        "close",
                        types::Close {
                            proposal_hash,
                            index,
                            proposal_weight_bound,
                            length_bound,
                        },
                        [
                            136u8, 48u8, 243u8, 34u8, 60u8, 109u8, 186u8, 158u8, 72u8, 48u8, 62u8,
                            34u8, 167u8, 46u8, 33u8, 142u8, 239u8, 43u8, 238u8, 125u8, 94u8, 80u8,
                            157u8, 245u8, 220u8, 126u8, 58u8, 244u8, 186u8, 195u8, 30u8, 127u8,
                        ],
                    )
                }
            }
        }
        #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
        pub type Event = runtime_types::pallet_collective::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A motion (given hash) has been proposed (by given account) with a threshold (given"]
            #[doc = "`MemberCount`)."]
            pub struct Proposed {
                pub account: proposed::Account,
                pub proposal_index: proposed::ProposalIndex,
                pub proposal_hash: proposed::ProposalHash,
                pub threshold: proposed::Threshold,
            }
            pub mod proposed {
                use super::runtime_types;
                pub type Account = ::subxt::utils::AccountId32;
                pub type ProposalIndex = ::core::primitive::u32;
                pub type ProposalHash = ::subxt::utils::H256;
                pub type Threshold = ::core::primitive::u32;
            }
            impl ::subxt::events::StaticEvent for Proposed {
                const PALLET: &'static str = "Triumvirate";
                const EVENT: &'static str = "Proposed";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A motion (given hash) has been voted on by given account, leaving"]
            #[doc = "a tally (yes votes and no votes given respectively as `MemberCount`)."]
            pub struct Voted {
                pub account: voted::Account,
                pub proposal_hash: voted::ProposalHash,
                pub voted: voted::Voted,
                pub yes: voted::Yes,
                pub no: voted::No,
            }
            pub mod voted {
                use super::runtime_types;
                pub type Account = ::subxt::utils::AccountId32;
                pub type ProposalHash = ::subxt::utils::H256;
                pub type Voted = ::core::primitive::bool;
                pub type Yes = ::core::primitive::u32;
                pub type No = ::core::primitive::u32;
            }
            impl ::subxt::events::StaticEvent for Voted {
                const PALLET: &'static str = "Triumvirate";
                const EVENT: &'static str = "Voted";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A motion was approved by the required threshold."]
            pub struct Approved {
                pub proposal_hash: approved::ProposalHash,
            }
            pub mod approved {
                use super::runtime_types;
                pub type ProposalHash = ::subxt::utils::H256;
            }
            impl ::subxt::events::StaticEvent for Approved {
                const PALLET: &'static str = "Triumvirate";
                const EVENT: &'static str = "Approved";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A motion was not approved by the required threshold."]
            pub struct Disapproved {
                pub proposal_hash: disapproved::ProposalHash,
            }
            pub mod disapproved {
                use super::runtime_types;
                pub type ProposalHash = ::subxt::utils::H256;
            }
            impl ::subxt::events::StaticEvent for Disapproved {
                const PALLET: &'static str = "Triumvirate";
                const EVENT: &'static str = "Disapproved";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A motion was executed; result will be `Ok` if it returned without error."]
            pub struct Executed {
                pub proposal_hash: executed::ProposalHash,
                pub result: executed::Result,
            }
            pub mod executed {
                use super::runtime_types;
                pub type ProposalHash = ::subxt::utils::H256;
                pub type Result =
                    ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>;
            }
            impl ::subxt::events::StaticEvent for Executed {
                const PALLET: &'static str = "Triumvirate";
                const EVENT: &'static str = "Executed";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A single member did some action; result will be `Ok` if it returned without error."]
            pub struct MemberExecuted {
                pub proposal_hash: member_executed::ProposalHash,
                pub result: member_executed::Result,
            }
            pub mod member_executed {
                use super::runtime_types;
                pub type ProposalHash = ::subxt::utils::H256;
                pub type Result =
                    ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>;
            }
            impl ::subxt::events::StaticEvent for MemberExecuted {
                const PALLET: &'static str = "Triumvirate";
                const EVENT: &'static str = "MemberExecuted";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A proposal was closed because its threshold was reached or after its duration was up."]
            pub struct Closed {
                pub proposal_hash: closed::ProposalHash,
                pub yes: closed::Yes,
                pub no: closed::No,
            }
            pub mod closed {
                use super::runtime_types;
                pub type ProposalHash = ::subxt::utils::H256;
                pub type Yes = ::core::primitive::u32;
                pub type No = ::core::primitive::u32;
            }
            impl ::subxt::events::StaticEvent for Closed {
                const PALLET: &'static str = "Triumvirate";
                const EVENT: &'static str = "Closed";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub mod types {
                use super::runtime_types;
                pub mod proposals {
                    use super::runtime_types;
                    pub type Proposals =
                        runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            ::subxt::utils::H256,
                        >;
                }
                pub mod proposal_of {
                    use super::runtime_types;
                    pub type ProposalOf = runtime_types::node_subtensor_runtime::RuntimeCall;
                    pub type Param0 = ::subxt::utils::H256;
                }
                pub mod voting {
                    use super::runtime_types;
                    pub type Voting = runtime_types::pallet_collective::Votes<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u32,
                    >;
                    pub type Param0 = ::subxt::utils::H256;
                }
                pub mod proposal_count {
                    use super::runtime_types;
                    pub type ProposalCount = ::core::primitive::u32;
                }
                pub mod members {
                    use super::runtime_types;
                    pub type Members = ::std::vec::Vec<::subxt::utils::AccountId32>;
                }
                pub mod prime {
                    use super::runtime_types;
                    pub type Prime = ::subxt::utils::AccountId32;
                }
            }
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " The hashes of the active proposals."]
                pub fn proposals(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::proposals::Proposals,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Triumvirate",
                        "Proposals",
                        vec![],
                        [
                            210u8, 234u8, 7u8, 29u8, 231u8, 80u8, 17u8, 36u8, 189u8, 34u8, 175u8,
                            147u8, 56u8, 92u8, 201u8, 104u8, 207u8, 150u8, 58u8, 110u8, 90u8, 28u8,
                            198u8, 79u8, 236u8, 245u8, 19u8, 38u8, 68u8, 59u8, 215u8, 74u8,
                        ],
                    )
                }
                #[doc = " Actual proposal for a given hash, if it's current."]
                pub fn proposal_of_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::proposal_of::ProposalOf,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Triumvirate",
                        "ProposalOf",
                        vec![],
                        [
                            21u8, 44u8, 248u8, 226u8, 84u8, 81u8, 74u8, 213u8, 34u8, 107u8, 163u8,
                            128u8, 232u8, 174u8, 217u8, 12u8, 107u8, 19u8, 39u8, 112u8, 155u8,
                            158u8, 110u8, 153u8, 129u8, 61u8, 66u8, 15u8, 20u8, 197u8, 186u8,
                            144u8,
                        ],
                    )
                }
                #[doc = " Actual proposal for a given hash, if it's current."]
                pub fn proposal_of(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::proposal_of::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::proposal_of::ProposalOf,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Triumvirate",
                        "ProposalOf",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            21u8, 44u8, 248u8, 226u8, 84u8, 81u8, 74u8, 213u8, 34u8, 107u8, 163u8,
                            128u8, 232u8, 174u8, 217u8, 12u8, 107u8, 19u8, 39u8, 112u8, 155u8,
                            158u8, 110u8, 153u8, 129u8, 61u8, 66u8, 15u8, 20u8, 197u8, 186u8,
                            144u8,
                        ],
                    )
                }
                #[doc = " Votes on a given proposal, if it is ongoing."]
                pub fn voting_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::voting::Voting,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Triumvirate",
                        "Voting",
                        vec![],
                        [
                            109u8, 198u8, 2u8, 13u8, 29u8, 14u8, 241u8, 217u8, 55u8, 147u8, 147u8,
                            4u8, 176u8, 69u8, 132u8, 228u8, 158u8, 203u8, 110u8, 239u8, 158u8,
                            137u8, 97u8, 46u8, 228u8, 118u8, 251u8, 201u8, 88u8, 208u8, 94u8,
                            132u8,
                        ],
                    )
                }
                #[doc = " Votes on a given proposal, if it is ongoing."]
                pub fn voting(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::voting::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::voting::Voting,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Triumvirate",
                        "Voting",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            109u8, 198u8, 2u8, 13u8, 29u8, 14u8, 241u8, 217u8, 55u8, 147u8, 147u8,
                            4u8, 176u8, 69u8, 132u8, 228u8, 158u8, 203u8, 110u8, 239u8, 158u8,
                            137u8, 97u8, 46u8, 228u8, 118u8, 251u8, 201u8, 88u8, 208u8, 94u8,
                            132u8,
                        ],
                    )
                }
                #[doc = " Proposals so far."]
                pub fn proposal_count(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::proposal_count::ProposalCount,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Triumvirate",
                        "ProposalCount",
                        vec![],
                        [
                            91u8, 238u8, 246u8, 106u8, 95u8, 66u8, 83u8, 134u8, 1u8, 225u8, 164u8,
                            216u8, 113u8, 101u8, 203u8, 200u8, 113u8, 97u8, 246u8, 228u8, 140u8,
                            29u8, 29u8, 48u8, 176u8, 137u8, 93u8, 230u8, 56u8, 75u8, 51u8, 149u8,
                        ],
                    )
                }
                #[doc = " The current members of the collective. This is stored sorted (just by value)."]
                pub fn members(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::members::Members,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Triumvirate",
                        "Members",
                        vec![],
                        [
                            16u8, 29u8, 32u8, 222u8, 175u8, 136u8, 111u8, 101u8, 43u8, 74u8, 209u8,
                            81u8, 47u8, 97u8, 129u8, 39u8, 225u8, 243u8, 110u8, 229u8, 237u8, 21u8,
                            90u8, 127u8, 80u8, 239u8, 156u8, 32u8, 90u8, 109u8, 179u8, 0u8,
                        ],
                    )
                }
                #[doc = " The prime member that helps determine the default vote behavior in case of absentations."]
                pub fn prime(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::prime::Prime,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Triumvirate",
                        "Prime",
                        vec![],
                        [
                            72u8, 128u8, 214u8, 72u8, 78u8, 80u8, 100u8, 198u8, 114u8, 215u8, 59u8,
                            3u8, 103u8, 14u8, 152u8, 202u8, 12u8, 165u8, 224u8, 10u8, 41u8, 154u8,
                            77u8, 95u8, 116u8, 143u8, 250u8, 250u8, 176u8, 92u8, 238u8, 154u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod triumvirate_members {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
        pub type Error = runtime_types::pallet_membership::pallet::Error;
        #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
        pub type Call = runtime_types::pallet_membership::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Add a member `who` to the set."]
                #[doc = ""]
                #[doc = "May only be called from `T::AddOrigin`."]
                pub struct AddMember {
                    pub who: add_member::Who,
                }
                pub mod add_member {
                    use super::runtime_types;
                    pub type Who = ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>;
                }
                impl ::subxt::blocks::StaticExtrinsic for AddMember {
                    const PALLET: &'static str = "TriumvirateMembers";
                    const CALL: &'static str = "add_member";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Remove a member `who` from the set."]
                #[doc = ""]
                #[doc = "May only be called from `T::RemoveOrigin`."]
                pub struct RemoveMember {
                    pub who: remove_member::Who,
                }
                pub mod remove_member {
                    use super::runtime_types;
                    pub type Who = ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>;
                }
                impl ::subxt::blocks::StaticExtrinsic for RemoveMember {
                    const PALLET: &'static str = "TriumvirateMembers";
                    const CALL: &'static str = "remove_member";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Swap out one member `remove` for another `add`."]
                #[doc = ""]
                #[doc = "May only be called from `T::SwapOrigin`."]
                #[doc = ""]
                #[doc = "Prime membership is *not* passed from `remove` to `add`, if extant."]
                pub struct SwapMember {
                    pub remove: swap_member::Remove,
                    pub add: swap_member::Add,
                }
                pub mod swap_member {
                    use super::runtime_types;
                    pub type Remove = ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>;
                    pub type Add = ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>;
                }
                impl ::subxt::blocks::StaticExtrinsic for SwapMember {
                    const PALLET: &'static str = "TriumvirateMembers";
                    const CALL: &'static str = "swap_member";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Change the membership to a new set, disregarding the existing membership. Be nice and"]
                #[doc = "pass `members` pre-sorted."]
                #[doc = ""]
                #[doc = "May only be called from `T::ResetOrigin`."]
                pub struct ResetMembers {
                    pub members: reset_members::Members,
                }
                pub mod reset_members {
                    use super::runtime_types;
                    pub type Members = ::std::vec::Vec<::subxt::utils::AccountId32>;
                }
                impl ::subxt::blocks::StaticExtrinsic for ResetMembers {
                    const PALLET: &'static str = "TriumvirateMembers";
                    const CALL: &'static str = "reset_members";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Swap out the sending member for some other key `new`."]
                #[doc = ""]
                #[doc = "May only be called from `Signed` origin of a current member."]
                #[doc = ""]
                #[doc = "Prime membership is passed from the origin account to `new`, if extant."]
                pub struct ChangeKey {
                    pub new: change_key::New,
                }
                pub mod change_key {
                    use super::runtime_types;
                    pub type New = ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>;
                }
                impl ::subxt::blocks::StaticExtrinsic for ChangeKey {
                    const PALLET: &'static str = "TriumvirateMembers";
                    const CALL: &'static str = "change_key";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Set the prime member. Must be a current member."]
                #[doc = ""]
                #[doc = "May only be called from `T::PrimeOrigin`."]
                pub struct SetPrime {
                    pub who: set_prime::Who,
                }
                pub mod set_prime {
                    use super::runtime_types;
                    pub type Who = ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>;
                }
                impl ::subxt::blocks::StaticExtrinsic for SetPrime {
                    const PALLET: &'static str = "TriumvirateMembers";
                    const CALL: &'static str = "set_prime";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Remove the prime member if it exists."]
                #[doc = ""]
                #[doc = "May only be called from `T::PrimeOrigin`."]
                pub struct ClearPrime;
                impl ::subxt::blocks::StaticExtrinsic for ClearPrime {
                    const PALLET: &'static str = "TriumvirateMembers";
                    const CALL: &'static str = "clear_prime";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "Add a member `who` to the set."]
                #[doc = ""]
                #[doc = "May only be called from `T::AddOrigin`."]
                pub fn add_member(
                    &self,
                    who: types::add_member::Who,
                ) -> ::subxt::tx::Payload<types::AddMember> {
                    ::subxt::tx::Payload::new_static(
                        "TriumvirateMembers",
                        "add_member",
                        types::AddMember { who },
                        [
                            2u8, 131u8, 37u8, 217u8, 112u8, 46u8, 86u8, 165u8, 248u8, 244u8, 33u8,
                            236u8, 155u8, 28u8, 163u8, 169u8, 213u8, 32u8, 70u8, 217u8, 97u8,
                            194u8, 138u8, 77u8, 133u8, 97u8, 188u8, 49u8, 49u8, 31u8, 177u8, 206u8,
                        ],
                    )
                }
                #[doc = "Remove a member `who` from the set."]
                #[doc = ""]
                #[doc = "May only be called from `T::RemoveOrigin`."]
                pub fn remove_member(
                    &self,
                    who: types::remove_member::Who,
                ) -> ::subxt::tx::Payload<types::RemoveMember> {
                    ::subxt::tx::Payload::new_static(
                        "TriumvirateMembers",
                        "remove_member",
                        types::RemoveMember { who },
                        [
                            78u8, 153u8, 97u8, 110u8, 121u8, 242u8, 112u8, 56u8, 195u8, 217u8,
                            10u8, 202u8, 114u8, 134u8, 220u8, 237u8, 198u8, 109u8, 247u8, 85u8,
                            156u8, 88u8, 138u8, 79u8, 189u8, 37u8, 230u8, 55u8, 1u8, 27u8, 89u8,
                            80u8,
                        ],
                    )
                }
                #[doc = "Swap out one member `remove` for another `add`."]
                #[doc = ""]
                #[doc = "May only be called from `T::SwapOrigin`."]
                #[doc = ""]
                #[doc = "Prime membership is *not* passed from `remove` to `add`, if extant."]
                pub fn swap_member(
                    &self,
                    remove: types::swap_member::Remove,
                    add: types::swap_member::Add,
                ) -> ::subxt::tx::Payload<types::SwapMember> {
                    ::subxt::tx::Payload::new_static(
                        "TriumvirateMembers",
                        "swap_member",
                        types::SwapMember { remove, add },
                        [
                            170u8, 68u8, 212u8, 185u8, 186u8, 38u8, 222u8, 227u8, 255u8, 119u8,
                            187u8, 170u8, 247u8, 101u8, 138u8, 167u8, 232u8, 33u8, 116u8, 1u8,
                            229u8, 171u8, 94u8, 150u8, 193u8, 51u8, 254u8, 106u8, 44u8, 96u8, 28u8,
                            88u8,
                        ],
                    )
                }
                #[doc = "Change the membership to a new set, disregarding the existing membership. Be nice and"]
                #[doc = "pass `members` pre-sorted."]
                #[doc = ""]
                #[doc = "May only be called from `T::ResetOrigin`."]
                pub fn reset_members(
                    &self,
                    members: types::reset_members::Members,
                ) -> ::subxt::tx::Payload<types::ResetMembers> {
                    ::subxt::tx::Payload::new_static(
                        "TriumvirateMembers",
                        "reset_members",
                        types::ResetMembers { members },
                        [
                            212u8, 144u8, 99u8, 156u8, 70u8, 4u8, 219u8, 227u8, 150u8, 25u8, 86u8,
                            8u8, 215u8, 128u8, 193u8, 206u8, 33u8, 193u8, 71u8, 15u8, 20u8, 92u8,
                            99u8, 89u8, 174u8, 236u8, 102u8, 82u8, 164u8, 234u8, 12u8, 45u8,
                        ],
                    )
                }
                #[doc = "Swap out the sending member for some other key `new`."]
                #[doc = ""]
                #[doc = "May only be called from `Signed` origin of a current member."]
                #[doc = ""]
                #[doc = "Prime membership is passed from the origin account to `new`, if extant."]
                pub fn change_key(
                    &self,
                    new: types::change_key::New,
                ) -> ::subxt::tx::Payload<types::ChangeKey> {
                    ::subxt::tx::Payload::new_static(
                        "TriumvirateMembers",
                        "change_key",
                        types::ChangeKey { new },
                        [
                            129u8, 233u8, 205u8, 107u8, 5u8, 50u8, 160u8, 60u8, 161u8, 248u8, 44u8,
                            53u8, 50u8, 141u8, 169u8, 36u8, 182u8, 195u8, 173u8, 142u8, 121u8,
                            153u8, 249u8, 234u8, 253u8, 64u8, 110u8, 51u8, 207u8, 127u8, 166u8,
                            108u8,
                        ],
                    )
                }
                #[doc = "Set the prime member. Must be a current member."]
                #[doc = ""]
                #[doc = "May only be called from `T::PrimeOrigin`."]
                pub fn set_prime(
                    &self,
                    who: types::set_prime::Who,
                ) -> ::subxt::tx::Payload<types::SetPrime> {
                    ::subxt::tx::Payload::new_static(
                        "TriumvirateMembers",
                        "set_prime",
                        types::SetPrime { who },
                        [
                            213u8, 60u8, 220u8, 4u8, 28u8, 111u8, 6u8, 128u8, 228u8, 150u8, 14u8,
                            182u8, 183u8, 94u8, 120u8, 238u8, 15u8, 241u8, 107u8, 152u8, 182u8,
                            33u8, 154u8, 203u8, 172u8, 217u8, 31u8, 212u8, 112u8, 158u8, 17u8,
                            188u8,
                        ],
                    )
                }
                #[doc = "Remove the prime member if it exists."]
                #[doc = ""]
                #[doc = "May only be called from `T::PrimeOrigin`."]
                pub fn clear_prime(&self) -> ::subxt::tx::Payload<types::ClearPrime> {
                    ::subxt::tx::Payload::new_static(
                        "TriumvirateMembers",
                        "clear_prime",
                        types::ClearPrime {},
                        [
                            71u8, 213u8, 34u8, 23u8, 186u8, 63u8, 240u8, 216u8, 190u8, 251u8, 84u8,
                            109u8, 140u8, 137u8, 210u8, 211u8, 242u8, 231u8, 212u8, 133u8, 151u8,
                            125u8, 25u8, 46u8, 210u8, 53u8, 133u8, 222u8, 21u8, 107u8, 120u8, 52u8,
                        ],
                    )
                }
            }
        }
        #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
        pub type Event = runtime_types::pallet_membership::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "The given member was added; see the transaction for who."]
            pub struct MemberAdded;
            impl ::subxt::events::StaticEvent for MemberAdded {
                const PALLET: &'static str = "TriumvirateMembers";
                const EVENT: &'static str = "MemberAdded";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "The given member was removed; see the transaction for who."]
            pub struct MemberRemoved;
            impl ::subxt::events::StaticEvent for MemberRemoved {
                const PALLET: &'static str = "TriumvirateMembers";
                const EVENT: &'static str = "MemberRemoved";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Two members were swapped; see the transaction for who."]
            pub struct MembersSwapped;
            impl ::subxt::events::StaticEvent for MembersSwapped {
                const PALLET: &'static str = "TriumvirateMembers";
                const EVENT: &'static str = "MembersSwapped";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "The membership was reset; see the transaction for who the new set is."]
            pub struct MembersReset;
            impl ::subxt::events::StaticEvent for MembersReset {
                const PALLET: &'static str = "TriumvirateMembers";
                const EVENT: &'static str = "MembersReset";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "One of the members' keys changed."]
            pub struct KeyChanged;
            impl ::subxt::events::StaticEvent for KeyChanged {
                const PALLET: &'static str = "TriumvirateMembers";
                const EVENT: &'static str = "KeyChanged";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Phantom member, never used."]
            pub struct Dummy;
            impl ::subxt::events::StaticEvent for Dummy {
                const PALLET: &'static str = "TriumvirateMembers";
                const EVENT: &'static str = "Dummy";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub mod types {
                use super::runtime_types;
                pub mod members {
                    use super::runtime_types;
                    pub type Members = runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        ::subxt::utils::AccountId32,
                    >;
                }
                pub mod prime {
                    use super::runtime_types;
                    pub type Prime = ::subxt::utils::AccountId32;
                }
            }
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " The current membership, stored as an ordered Vec."]
                pub fn members(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::members::Members,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "TriumvirateMembers",
                        "Members",
                        vec![],
                        [
                            109u8, 100u8, 14u8, 195u8, 213u8, 67u8, 44u8, 218u8, 84u8, 254u8, 76u8,
                            80u8, 210u8, 155u8, 155u8, 30u8, 18u8, 169u8, 195u8, 92u8, 208u8,
                            223u8, 242u8, 97u8, 147u8, 20u8, 168u8, 145u8, 254u8, 115u8, 225u8,
                            193u8,
                        ],
                    )
                }
                #[doc = " The current prime member, if one exists."]
                pub fn prime(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::prime::Prime,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "TriumvirateMembers",
                        "Prime",
                        vec![],
                        [
                            72u8, 128u8, 214u8, 72u8, 78u8, 80u8, 100u8, 198u8, 114u8, 215u8, 59u8,
                            3u8, 103u8, 14u8, 152u8, 202u8, 12u8, 165u8, 224u8, 10u8, 41u8, 154u8,
                            77u8, 95u8, 116u8, 143u8, 250u8, 250u8, 176u8, 92u8, 238u8, 154u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod senate_members {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
        pub type Error = runtime_types::pallet_membership::pallet::Error2;
        #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
        pub type Call = runtime_types::pallet_membership::pallet::Call2;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Add a member `who` to the set."]
                #[doc = ""]
                #[doc = "May only be called from `T::AddOrigin`."]
                pub struct AddMember {
                    pub who: add_member::Who,
                }
                pub mod add_member {
                    use super::runtime_types;
                    pub type Who = ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>;
                }
                impl ::subxt::blocks::StaticExtrinsic for AddMember {
                    const PALLET: &'static str = "SenateMembers";
                    const CALL: &'static str = "add_member";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Remove a member `who` from the set."]
                #[doc = ""]
                #[doc = "May only be called from `T::RemoveOrigin`."]
                pub struct RemoveMember {
                    pub who: remove_member::Who,
                }
                pub mod remove_member {
                    use super::runtime_types;
                    pub type Who = ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>;
                }
                impl ::subxt::blocks::StaticExtrinsic for RemoveMember {
                    const PALLET: &'static str = "SenateMembers";
                    const CALL: &'static str = "remove_member";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Swap out one member `remove` for another `add`."]
                #[doc = ""]
                #[doc = "May only be called from `T::SwapOrigin`."]
                #[doc = ""]
                #[doc = "Prime membership is *not* passed from `remove` to `add`, if extant."]
                pub struct SwapMember {
                    pub remove: swap_member::Remove,
                    pub add: swap_member::Add,
                }
                pub mod swap_member {
                    use super::runtime_types;
                    pub type Remove = ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>;
                    pub type Add = ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>;
                }
                impl ::subxt::blocks::StaticExtrinsic for SwapMember {
                    const PALLET: &'static str = "SenateMembers";
                    const CALL: &'static str = "swap_member";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Change the membership to a new set, disregarding the existing membership. Be nice and"]
                #[doc = "pass `members` pre-sorted."]
                #[doc = ""]
                #[doc = "May only be called from `T::ResetOrigin`."]
                pub struct ResetMembers {
                    pub members: reset_members::Members,
                }
                pub mod reset_members {
                    use super::runtime_types;
                    pub type Members = ::std::vec::Vec<::subxt::utils::AccountId32>;
                }
                impl ::subxt::blocks::StaticExtrinsic for ResetMembers {
                    const PALLET: &'static str = "SenateMembers";
                    const CALL: &'static str = "reset_members";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Swap out the sending member for some other key `new`."]
                #[doc = ""]
                #[doc = "May only be called from `Signed` origin of a current member."]
                #[doc = ""]
                #[doc = "Prime membership is passed from the origin account to `new`, if extant."]
                pub struct ChangeKey {
                    pub new: change_key::New,
                }
                pub mod change_key {
                    use super::runtime_types;
                    pub type New = ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>;
                }
                impl ::subxt::blocks::StaticExtrinsic for ChangeKey {
                    const PALLET: &'static str = "SenateMembers";
                    const CALL: &'static str = "change_key";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Set the prime member. Must be a current member."]
                #[doc = ""]
                #[doc = "May only be called from `T::PrimeOrigin`."]
                pub struct SetPrime {
                    pub who: set_prime::Who,
                }
                pub mod set_prime {
                    use super::runtime_types;
                    pub type Who = ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>;
                }
                impl ::subxt::blocks::StaticExtrinsic for SetPrime {
                    const PALLET: &'static str = "SenateMembers";
                    const CALL: &'static str = "set_prime";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Remove the prime member if it exists."]
                #[doc = ""]
                #[doc = "May only be called from `T::PrimeOrigin`."]
                pub struct ClearPrime;
                impl ::subxt::blocks::StaticExtrinsic for ClearPrime {
                    const PALLET: &'static str = "SenateMembers";
                    const CALL: &'static str = "clear_prime";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "Add a member `who` to the set."]
                #[doc = ""]
                #[doc = "May only be called from `T::AddOrigin`."]
                pub fn add_member(
                    &self,
                    who: types::add_member::Who,
                ) -> ::subxt::tx::Payload<types::AddMember> {
                    ::subxt::tx::Payload::new_static(
                        "SenateMembers",
                        "add_member",
                        types::AddMember { who },
                        [
                            2u8, 131u8, 37u8, 217u8, 112u8, 46u8, 86u8, 165u8, 248u8, 244u8, 33u8,
                            236u8, 155u8, 28u8, 163u8, 169u8, 213u8, 32u8, 70u8, 217u8, 97u8,
                            194u8, 138u8, 77u8, 133u8, 97u8, 188u8, 49u8, 49u8, 31u8, 177u8, 206u8,
                        ],
                    )
                }
                #[doc = "Remove a member `who` from the set."]
                #[doc = ""]
                #[doc = "May only be called from `T::RemoveOrigin`."]
                pub fn remove_member(
                    &self,
                    who: types::remove_member::Who,
                ) -> ::subxt::tx::Payload<types::RemoveMember> {
                    ::subxt::tx::Payload::new_static(
                        "SenateMembers",
                        "remove_member",
                        types::RemoveMember { who },
                        [
                            78u8, 153u8, 97u8, 110u8, 121u8, 242u8, 112u8, 56u8, 195u8, 217u8,
                            10u8, 202u8, 114u8, 134u8, 220u8, 237u8, 198u8, 109u8, 247u8, 85u8,
                            156u8, 88u8, 138u8, 79u8, 189u8, 37u8, 230u8, 55u8, 1u8, 27u8, 89u8,
                            80u8,
                        ],
                    )
                }
                #[doc = "Swap out one member `remove` for another `add`."]
                #[doc = ""]
                #[doc = "May only be called from `T::SwapOrigin`."]
                #[doc = ""]
                #[doc = "Prime membership is *not* passed from `remove` to `add`, if extant."]
                pub fn swap_member(
                    &self,
                    remove: types::swap_member::Remove,
                    add: types::swap_member::Add,
                ) -> ::subxt::tx::Payload<types::SwapMember> {
                    ::subxt::tx::Payload::new_static(
                        "SenateMembers",
                        "swap_member",
                        types::SwapMember { remove, add },
                        [
                            170u8, 68u8, 212u8, 185u8, 186u8, 38u8, 222u8, 227u8, 255u8, 119u8,
                            187u8, 170u8, 247u8, 101u8, 138u8, 167u8, 232u8, 33u8, 116u8, 1u8,
                            229u8, 171u8, 94u8, 150u8, 193u8, 51u8, 254u8, 106u8, 44u8, 96u8, 28u8,
                            88u8,
                        ],
                    )
                }
                #[doc = "Change the membership to a new set, disregarding the existing membership. Be nice and"]
                #[doc = "pass `members` pre-sorted."]
                #[doc = ""]
                #[doc = "May only be called from `T::ResetOrigin`."]
                pub fn reset_members(
                    &self,
                    members: types::reset_members::Members,
                ) -> ::subxt::tx::Payload<types::ResetMembers> {
                    ::subxt::tx::Payload::new_static(
                        "SenateMembers",
                        "reset_members",
                        types::ResetMembers { members },
                        [
                            212u8, 144u8, 99u8, 156u8, 70u8, 4u8, 219u8, 227u8, 150u8, 25u8, 86u8,
                            8u8, 215u8, 128u8, 193u8, 206u8, 33u8, 193u8, 71u8, 15u8, 20u8, 92u8,
                            99u8, 89u8, 174u8, 236u8, 102u8, 82u8, 164u8, 234u8, 12u8, 45u8,
                        ],
                    )
                }
                #[doc = "Swap out the sending member for some other key `new`."]
                #[doc = ""]
                #[doc = "May only be called from `Signed` origin of a current member."]
                #[doc = ""]
                #[doc = "Prime membership is passed from the origin account to `new`, if extant."]
                pub fn change_key(
                    &self,
                    new: types::change_key::New,
                ) -> ::subxt::tx::Payload<types::ChangeKey> {
                    ::subxt::tx::Payload::new_static(
                        "SenateMembers",
                        "change_key",
                        types::ChangeKey { new },
                        [
                            129u8, 233u8, 205u8, 107u8, 5u8, 50u8, 160u8, 60u8, 161u8, 248u8, 44u8,
                            53u8, 50u8, 141u8, 169u8, 36u8, 182u8, 195u8, 173u8, 142u8, 121u8,
                            153u8, 249u8, 234u8, 253u8, 64u8, 110u8, 51u8, 207u8, 127u8, 166u8,
                            108u8,
                        ],
                    )
                }
                #[doc = "Set the prime member. Must be a current member."]
                #[doc = ""]
                #[doc = "May only be called from `T::PrimeOrigin`."]
                pub fn set_prime(
                    &self,
                    who: types::set_prime::Who,
                ) -> ::subxt::tx::Payload<types::SetPrime> {
                    ::subxt::tx::Payload::new_static(
                        "SenateMembers",
                        "set_prime",
                        types::SetPrime { who },
                        [
                            213u8, 60u8, 220u8, 4u8, 28u8, 111u8, 6u8, 128u8, 228u8, 150u8, 14u8,
                            182u8, 183u8, 94u8, 120u8, 238u8, 15u8, 241u8, 107u8, 152u8, 182u8,
                            33u8, 154u8, 203u8, 172u8, 217u8, 31u8, 212u8, 112u8, 158u8, 17u8,
                            188u8,
                        ],
                    )
                }
                #[doc = "Remove the prime member if it exists."]
                #[doc = ""]
                #[doc = "May only be called from `T::PrimeOrigin`."]
                pub fn clear_prime(&self) -> ::subxt::tx::Payload<types::ClearPrime> {
                    ::subxt::tx::Payload::new_static(
                        "SenateMembers",
                        "clear_prime",
                        types::ClearPrime {},
                        [
                            71u8, 213u8, 34u8, 23u8, 186u8, 63u8, 240u8, 216u8, 190u8, 251u8, 84u8,
                            109u8, 140u8, 137u8, 210u8, 211u8, 242u8, 231u8, 212u8, 133u8, 151u8,
                            125u8, 25u8, 46u8, 210u8, 53u8, 133u8, 222u8, 21u8, 107u8, 120u8, 52u8,
                        ],
                    )
                }
            }
        }
        #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
        pub type Event = runtime_types::pallet_membership::pallet::Event2;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "The given member was added; see the transaction for who."]
            pub struct MemberAdded;
            impl ::subxt::events::StaticEvent for MemberAdded {
                const PALLET: &'static str = "SenateMembers";
                const EVENT: &'static str = "MemberAdded";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "The given member was removed; see the transaction for who."]
            pub struct MemberRemoved;
            impl ::subxt::events::StaticEvent for MemberRemoved {
                const PALLET: &'static str = "SenateMembers";
                const EVENT: &'static str = "MemberRemoved";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Two members were swapped; see the transaction for who."]
            pub struct MembersSwapped;
            impl ::subxt::events::StaticEvent for MembersSwapped {
                const PALLET: &'static str = "SenateMembers";
                const EVENT: &'static str = "MembersSwapped";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "The membership was reset; see the transaction for who the new set is."]
            pub struct MembersReset;
            impl ::subxt::events::StaticEvent for MembersReset {
                const PALLET: &'static str = "SenateMembers";
                const EVENT: &'static str = "MembersReset";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "One of the members' keys changed."]
            pub struct KeyChanged;
            impl ::subxt::events::StaticEvent for KeyChanged {
                const PALLET: &'static str = "SenateMembers";
                const EVENT: &'static str = "KeyChanged";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Phantom member, never used."]
            pub struct Dummy;
            impl ::subxt::events::StaticEvent for Dummy {
                const PALLET: &'static str = "SenateMembers";
                const EVENT: &'static str = "Dummy";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub mod types {
                use super::runtime_types;
                pub mod members {
                    use super::runtime_types;
                    pub type Members = runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        ::subxt::utils::AccountId32,
                    >;
                }
                pub mod prime {
                    use super::runtime_types;
                    pub type Prime = ::subxt::utils::AccountId32;
                }
            }
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " The current membership, stored as an ordered Vec."]
                pub fn members(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::members::Members,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "SenateMembers",
                        "Members",
                        vec![],
                        [
                            109u8, 100u8, 14u8, 195u8, 213u8, 67u8, 44u8, 218u8, 84u8, 254u8, 76u8,
                            80u8, 210u8, 155u8, 155u8, 30u8, 18u8, 169u8, 195u8, 92u8, 208u8,
                            223u8, 242u8, 97u8, 147u8, 20u8, 168u8, 145u8, 254u8, 115u8, 225u8,
                            193u8,
                        ],
                    )
                }
                #[doc = " The current prime member, if one exists."]
                pub fn prime(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::prime::Prime,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "SenateMembers",
                        "Prime",
                        vec![],
                        [
                            72u8, 128u8, 214u8, 72u8, 78u8, 80u8, 100u8, 198u8, 114u8, 215u8, 59u8,
                            3u8, 103u8, 14u8, 152u8, 202u8, 12u8, 165u8, 224u8, 10u8, 41u8, 154u8,
                            77u8, 95u8, 116u8, 143u8, 250u8, 250u8, 176u8, 92u8, 238u8, 154u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod utility {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
        pub type Error = runtime_types::pallet_utility::pallet::Error;
        #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
        pub type Call = runtime_types::pallet_utility::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Send a batch of dispatch calls."]
                #[doc = ""]
                #[doc = "May be called from any origin except `None`."]
                #[doc = ""]
                #[doc = "- `calls`: The calls to be dispatched from the same origin. The number of call must not"]
                #[doc = "  exceed the constant: `batched_calls_limit` (available in constant metadata)."]
                #[doc = ""]
                #[doc = "If origin is root then the calls are dispatched without checking origin filter. (This"]
                #[doc = "includes bypassing `frame_system::Config::BaseCallFilter`)."]
                #[doc = ""]
                #[doc = "## Complexity"]
                #[doc = "- O(C) where C is the number of calls to be batched."]
                #[doc = ""]
                #[doc = "This will return `Ok` in all circumstances. To determine the success of the batch, an"]
                #[doc = "event is deposited. If a call failed and the batch was interrupted, then the"]
                #[doc = "`BatchInterrupted` event is deposited, along with the number of successful calls made"]
                #[doc = "and the error of the failed call. If all were successful, then the `BatchCompleted`"]
                #[doc = "event is deposited."]
                pub struct Batch {
                    pub calls: batch::Calls,
                }
                pub mod batch {
                    use super::runtime_types;
                    pub type Calls =
                        ::std::vec::Vec<runtime_types::node_subtensor_runtime::RuntimeCall>;
                }
                impl ::subxt::blocks::StaticExtrinsic for Batch {
                    const PALLET: &'static str = "Utility";
                    const CALL: &'static str = "batch";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Send a call through an indexed pseudonym of the sender."]
                #[doc = ""]
                #[doc = "Filter from origin are passed along. The call will be dispatched with an origin which"]
                #[doc = "use the same filter as the origin of this call."]
                #[doc = ""]
                #[doc = "NOTE: If you need to ensure that any account-based filtering is not honored (i.e."]
                #[doc = "because you expect `proxy` to have been used prior in the call stack and you do not want"]
                #[doc = "the call restrictions to apply to any sub-accounts), then use `as_multi_threshold_1`"]
                #[doc = "in the Multisig pallet instead."]
                #[doc = ""]
                #[doc = "NOTE: Prior to version *12, this was called `as_limited_sub`."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_."]
                pub struct AsDerivative {
                    pub index: as_derivative::Index,
                    pub call: ::std::boxed::Box<as_derivative::Call>,
                }
                pub mod as_derivative {
                    use super::runtime_types;
                    pub type Index = ::core::primitive::u16;
                    pub type Call = runtime_types::node_subtensor_runtime::RuntimeCall;
                }
                impl ::subxt::blocks::StaticExtrinsic for AsDerivative {
                    const PALLET: &'static str = "Utility";
                    const CALL: &'static str = "as_derivative";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Send a batch of dispatch calls and atomically execute them."]
                #[doc = "The whole transaction will rollback and fail if any of the calls failed."]
                #[doc = ""]
                #[doc = "May be called from any origin except `None`."]
                #[doc = ""]
                #[doc = "- `calls`: The calls to be dispatched from the same origin. The number of call must not"]
                #[doc = "  exceed the constant: `batched_calls_limit` (available in constant metadata)."]
                #[doc = ""]
                #[doc = "If origin is root then the calls are dispatched without checking origin filter. (This"]
                #[doc = "includes bypassing `frame_system::Config::BaseCallFilter`)."]
                #[doc = ""]
                #[doc = "## Complexity"]
                #[doc = "- O(C) where C is the number of calls to be batched."]
                pub struct BatchAll {
                    pub calls: batch_all::Calls,
                }
                pub mod batch_all {
                    use super::runtime_types;
                    pub type Calls =
                        ::std::vec::Vec<runtime_types::node_subtensor_runtime::RuntimeCall>;
                }
                impl ::subxt::blocks::StaticExtrinsic for BatchAll {
                    const PALLET: &'static str = "Utility";
                    const CALL: &'static str = "batch_all";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Dispatches a function call with a provided origin."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Root_."]
                #[doc = ""]
                #[doc = "## Complexity"]
                #[doc = "- O(1)."]
                pub struct DispatchAs {
                    pub as_origin: ::std::boxed::Box<dispatch_as::AsOrigin>,
                    pub call: ::std::boxed::Box<dispatch_as::Call>,
                }
                pub mod dispatch_as {
                    use super::runtime_types;
                    pub type AsOrigin = runtime_types::node_subtensor_runtime::OriginCaller;
                    pub type Call = runtime_types::node_subtensor_runtime::RuntimeCall;
                }
                impl ::subxt::blocks::StaticExtrinsic for DispatchAs {
                    const PALLET: &'static str = "Utility";
                    const CALL: &'static str = "dispatch_as";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Send a batch of dispatch calls."]
                #[doc = "Unlike `batch`, it allows errors and won't interrupt."]
                #[doc = ""]
                #[doc = "May be called from any origin except `None`."]
                #[doc = ""]
                #[doc = "- `calls`: The calls to be dispatched from the same origin. The number of call must not"]
                #[doc = "  exceed the constant: `batched_calls_limit` (available in constant metadata)."]
                #[doc = ""]
                #[doc = "If origin is root then the calls are dispatch without checking origin filter. (This"]
                #[doc = "includes bypassing `frame_system::Config::BaseCallFilter`)."]
                #[doc = ""]
                #[doc = "## Complexity"]
                #[doc = "- O(C) where C is the number of calls to be batched."]
                pub struct ForceBatch {
                    pub calls: force_batch::Calls,
                }
                pub mod force_batch {
                    use super::runtime_types;
                    pub type Calls =
                        ::std::vec::Vec<runtime_types::node_subtensor_runtime::RuntimeCall>;
                }
                impl ::subxt::blocks::StaticExtrinsic for ForceBatch {
                    const PALLET: &'static str = "Utility";
                    const CALL: &'static str = "force_batch";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Dispatch a function call with a specified weight."]
                #[doc = ""]
                #[doc = "This function does not check the weight of the call, and instead allows the"]
                #[doc = "Root origin to specify the weight of the call."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Root_."]
                pub struct WithWeight {
                    pub call: ::std::boxed::Box<with_weight::Call>,
                    pub weight: with_weight::Weight,
                }
                pub mod with_weight {
                    use super::runtime_types;
                    pub type Call = runtime_types::node_subtensor_runtime::RuntimeCall;
                    pub type Weight = runtime_types::sp_weights::weight_v2::Weight;
                }
                impl ::subxt::blocks::StaticExtrinsic for WithWeight {
                    const PALLET: &'static str = "Utility";
                    const CALL: &'static str = "with_weight";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "Send a batch of dispatch calls."]
                #[doc = ""]
                #[doc = "May be called from any origin except `None`."]
                #[doc = ""]
                #[doc = "- `calls`: The calls to be dispatched from the same origin. The number of call must not"]
                #[doc = "  exceed the constant: `batched_calls_limit` (available in constant metadata)."]
                #[doc = ""]
                #[doc = "If origin is root then the calls are dispatched without checking origin filter. (This"]
                #[doc = "includes bypassing `frame_system::Config::BaseCallFilter`)."]
                #[doc = ""]
                #[doc = "## Complexity"]
                #[doc = "- O(C) where C is the number of calls to be batched."]
                #[doc = ""]
                #[doc = "This will return `Ok` in all circumstances. To determine the success of the batch, an"]
                #[doc = "event is deposited. If a call failed and the batch was interrupted, then the"]
                #[doc = "`BatchInterrupted` event is deposited, along with the number of successful calls made"]
                #[doc = "and the error of the failed call. If all were successful, then the `BatchCompleted`"]
                #[doc = "event is deposited."]
                pub fn batch(
                    &self,
                    calls: types::batch::Calls,
                ) -> ::subxt::tx::Payload<types::Batch> {
                    ::subxt::tx::Payload::new_static(
                        "Utility",
                        "batch",
                        types::Batch { calls },
                        [
                            137u8, 50u8, 143u8, 179u8, 39u8, 24u8, 44u8, 22u8, 21u8, 129u8, 128u8,
                            102u8, 50u8, 109u8, 235u8, 245u8, 126u8, 176u8, 207u8, 185u8, 252u8,
                            235u8, 187u8, 113u8, 60u8, 167u8, 255u8, 141u8, 109u8, 38u8, 200u8,
                            15u8,
                        ],
                    )
                }
                #[doc = "Send a call through an indexed pseudonym of the sender."]
                #[doc = ""]
                #[doc = "Filter from origin are passed along. The call will be dispatched with an origin which"]
                #[doc = "use the same filter as the origin of this call."]
                #[doc = ""]
                #[doc = "NOTE: If you need to ensure that any account-based filtering is not honored (i.e."]
                #[doc = "because you expect `proxy` to have been used prior in the call stack and you do not want"]
                #[doc = "the call restrictions to apply to any sub-accounts), then use `as_multi_threshold_1`"]
                #[doc = "in the Multisig pallet instead."]
                #[doc = ""]
                #[doc = "NOTE: Prior to version *12, this was called `as_limited_sub`."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_."]
                pub fn as_derivative(
                    &self,
                    index: types::as_derivative::Index,
                    call: types::as_derivative::Call,
                ) -> ::subxt::tx::Payload<types::AsDerivative> {
                    ::subxt::tx::Payload::new_static(
                        "Utility",
                        "as_derivative",
                        types::AsDerivative {
                            index,
                            call: ::std::boxed::Box::new(call),
                        },
                        [
                            215u8, 209u8, 225u8, 226u8, 210u8, 251u8, 207u8, 62u8, 139u8, 61u8,
                            204u8, 183u8, 136u8, 46u8, 71u8, 197u8, 113u8, 228u8, 44u8, 77u8,
                            184u8, 171u8, 86u8, 47u8, 180u8, 152u8, 39u8, 207u8, 167u8, 84u8,
                            192u8, 227u8,
                        ],
                    )
                }
                #[doc = "Send a batch of dispatch calls and atomically execute them."]
                #[doc = "The whole transaction will rollback and fail if any of the calls failed."]
                #[doc = ""]
                #[doc = "May be called from any origin except `None`."]
                #[doc = ""]
                #[doc = "- `calls`: The calls to be dispatched from the same origin. The number of call must not"]
                #[doc = "  exceed the constant: `batched_calls_limit` (available in constant metadata)."]
                #[doc = ""]
                #[doc = "If origin is root then the calls are dispatched without checking origin filter. (This"]
                #[doc = "includes bypassing `frame_system::Config::BaseCallFilter`)."]
                #[doc = ""]
                #[doc = "## Complexity"]
                #[doc = "- O(C) where C is the number of calls to be batched."]
                pub fn batch_all(
                    &self,
                    calls: types::batch_all::Calls,
                ) -> ::subxt::tx::Payload<types::BatchAll> {
                    ::subxt::tx::Payload::new_static(
                        "Utility",
                        "batch_all",
                        types::BatchAll { calls },
                        [
                            4u8, 244u8, 210u8, 203u8, 93u8, 27u8, 42u8, 36u8, 138u8, 116u8, 34u8,
                            76u8, 26u8, 175u8, 125u8, 153u8, 94u8, 225u8, 61u8, 5u8, 193u8, 169u8,
                            158u8, 73u8, 88u8, 155u8, 66u8, 252u8, 125u8, 9u8, 23u8, 81u8,
                        ],
                    )
                }
                #[doc = "Dispatches a function call with a provided origin."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Root_."]
                #[doc = ""]
                #[doc = "## Complexity"]
                #[doc = "- O(1)."]
                pub fn dispatch_as(
                    &self,
                    as_origin: types::dispatch_as::AsOrigin,
                    call: types::dispatch_as::Call,
                ) -> ::subxt::tx::Payload<types::DispatchAs> {
                    ::subxt::tx::Payload::new_static(
                        "Utility",
                        "dispatch_as",
                        types::DispatchAs {
                            as_origin: ::std::boxed::Box::new(as_origin),
                            call: ::std::boxed::Box::new(call),
                        },
                        [
                            0u8, 51u8, 233u8, 203u8, 189u8, 111u8, 66u8, 203u8, 179u8, 20u8, 206u8,
                            193u8, 227u8, 236u8, 3u8, 78u8, 164u8, 163u8, 62u8, 146u8, 186u8, 48u8,
                            171u8, 195u8, 244u8, 12u8, 148u8, 136u8, 168u8, 245u8, 250u8, 115u8,
                        ],
                    )
                }
                #[doc = "Send a batch of dispatch calls."]
                #[doc = "Unlike `batch`, it allows errors and won't interrupt."]
                #[doc = ""]
                #[doc = "May be called from any origin except `None`."]
                #[doc = ""]
                #[doc = "- `calls`: The calls to be dispatched from the same origin. The number of call must not"]
                #[doc = "  exceed the constant: `batched_calls_limit` (available in constant metadata)."]
                #[doc = ""]
                #[doc = "If origin is root then the calls are dispatch without checking origin filter. (This"]
                #[doc = "includes bypassing `frame_system::Config::BaseCallFilter`)."]
                #[doc = ""]
                #[doc = "## Complexity"]
                #[doc = "- O(C) where C is the number of calls to be batched."]
                pub fn force_batch(
                    &self,
                    calls: types::force_batch::Calls,
                ) -> ::subxt::tx::Payload<types::ForceBatch> {
                    ::subxt::tx::Payload::new_static(
                        "Utility",
                        "force_batch",
                        types::ForceBatch { calls },
                        [
                            207u8, 94u8, 21u8, 125u8, 145u8, 21u8, 193u8, 34u8, 25u8, 27u8, 218u8,
                            91u8, 153u8, 183u8, 36u8, 177u8, 232u8, 200u8, 10u8, 2u8, 82u8, 27u8,
                            35u8, 198u8, 2u8, 26u8, 49u8, 205u8, 17u8, 114u8, 109u8, 116u8,
                        ],
                    )
                }
                #[doc = "Dispatch a function call with a specified weight."]
                #[doc = ""]
                #[doc = "This function does not check the weight of the call, and instead allows the"]
                #[doc = "Root origin to specify the weight of the call."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Root_."]
                pub fn with_weight(
                    &self,
                    call: types::with_weight::Call,
                    weight: types::with_weight::Weight,
                ) -> ::subxt::tx::Payload<types::WithWeight> {
                    ::subxt::tx::Payload::new_static(
                        "Utility",
                        "with_weight",
                        types::WithWeight {
                            call: ::std::boxed::Box::new(call),
                            weight,
                        },
                        [
                            160u8, 1u8, 210u8, 89u8, 88u8, 124u8, 247u8, 154u8, 40u8, 138u8, 195u8,
                            193u8, 68u8, 103u8, 25u8, 108u8, 65u8, 195u8, 254u8, 215u8, 203u8,
                            17u8, 65u8, 202u8, 65u8, 18u8, 185u8, 105u8, 142u8, 84u8, 228u8, 206u8,
                        ],
                    )
                }
            }
        }
        #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
        pub type Event = runtime_types::pallet_utility::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Batch of dispatches did not complete fully. Index of first failing dispatch given, as"]
            #[doc = "well as the error."]
            pub struct BatchInterrupted {
                pub index: batch_interrupted::Index,
                pub error: batch_interrupted::Error,
            }
            pub mod batch_interrupted {
                use super::runtime_types;
                pub type Index = ::core::primitive::u32;
                pub type Error = runtime_types::sp_runtime::DispatchError;
            }
            impl ::subxt::events::StaticEvent for BatchInterrupted {
                const PALLET: &'static str = "Utility";
                const EVENT: &'static str = "BatchInterrupted";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Batch of dispatches completed fully with no error."]
            pub struct BatchCompleted;
            impl ::subxt::events::StaticEvent for BatchCompleted {
                const PALLET: &'static str = "Utility";
                const EVENT: &'static str = "BatchCompleted";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Batch of dispatches completed but has errors."]
            pub struct BatchCompletedWithErrors;
            impl ::subxt::events::StaticEvent for BatchCompletedWithErrors {
                const PALLET: &'static str = "Utility";
                const EVENT: &'static str = "BatchCompletedWithErrors";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A single item within a Batch of dispatches has completed with no error."]
            pub struct ItemCompleted;
            impl ::subxt::events::StaticEvent for ItemCompleted {
                const PALLET: &'static str = "Utility";
                const EVENT: &'static str = "ItemCompleted";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A single item within a Batch of dispatches has completed with error."]
            pub struct ItemFailed {
                pub error: item_failed::Error,
            }
            pub mod item_failed {
                use super::runtime_types;
                pub type Error = runtime_types::sp_runtime::DispatchError;
            }
            impl ::subxt::events::StaticEvent for ItemFailed {
                const PALLET: &'static str = "Utility";
                const EVENT: &'static str = "ItemFailed";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A call was dispatched."]
            pub struct DispatchedAs {
                pub result: dispatched_as::Result,
            }
            pub mod dispatched_as {
                use super::runtime_types;
                pub type Result =
                    ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>;
            }
            impl ::subxt::events::StaticEvent for DispatchedAs {
                const PALLET: &'static str = "Utility";
                const EVENT: &'static str = "DispatchedAs";
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " The limit on the number of batched calls."]
                pub fn batched_calls_limit(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Utility",
                        "batched_calls_limit",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod sudo {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "Error for the Sudo pallet"]
        pub type Error = runtime_types::pallet_sudo::pallet::Error;
        #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
        pub type Call = runtime_types::pallet_sudo::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Authenticates the sudo key and dispatches a function call with `Root` origin."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_."]
                #[doc = ""]
                #[doc = "## Complexity"]
                #[doc = "- O(1)."]
                pub struct Sudo {
                    pub call: ::std::boxed::Box<sudo::Call>,
                }
                pub mod sudo {
                    use super::runtime_types;
                    pub type Call = runtime_types::node_subtensor_runtime::RuntimeCall;
                }
                impl ::subxt::blocks::StaticExtrinsic for Sudo {
                    const PALLET: &'static str = "Sudo";
                    const CALL: &'static str = "sudo";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Authenticates the sudo key and dispatches a function call with `Root` origin."]
                #[doc = "This function does not check the weight of the call, and instead allows the"]
                #[doc = "Sudo user to specify the weight of the call."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_."]
                #[doc = ""]
                #[doc = "## Complexity"]
                #[doc = "- O(1)."]
                pub struct SudoUncheckedWeight {
                    pub call: ::std::boxed::Box<sudo_unchecked_weight::Call>,
                    pub weight: sudo_unchecked_weight::Weight,
                }
                pub mod sudo_unchecked_weight {
                    use super::runtime_types;
                    pub type Call = runtime_types::node_subtensor_runtime::RuntimeCall;
                    pub type Weight = runtime_types::sp_weights::weight_v2::Weight;
                }
                impl ::subxt::blocks::StaticExtrinsic for SudoUncheckedWeight {
                    const PALLET: &'static str = "Sudo";
                    const CALL: &'static str = "sudo_unchecked_weight";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Authenticates the current sudo key and sets the given AccountId (`new`) as the new sudo"]
                #[doc = "key."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_."]
                #[doc = ""]
                #[doc = "## Complexity"]
                #[doc = "- O(1)."]
                pub struct SetKey {
                    pub new: set_key::New,
                }
                pub mod set_key {
                    use super::runtime_types;
                    pub type New = ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>;
                }
                impl ::subxt::blocks::StaticExtrinsic for SetKey {
                    const PALLET: &'static str = "Sudo";
                    const CALL: &'static str = "set_key";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Authenticates the sudo key and dispatches a function call with `Signed` origin from"]
                #[doc = "a given account."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_."]
                #[doc = ""]
                #[doc = "## Complexity"]
                #[doc = "- O(1)."]
                pub struct SudoAs {
                    pub who: sudo_as::Who,
                    pub call: ::std::boxed::Box<sudo_as::Call>,
                }
                pub mod sudo_as {
                    use super::runtime_types;
                    pub type Who = ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>;
                    pub type Call = runtime_types::node_subtensor_runtime::RuntimeCall;
                }
                impl ::subxt::blocks::StaticExtrinsic for SudoAs {
                    const PALLET: &'static str = "Sudo";
                    const CALL: &'static str = "sudo_as";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "Authenticates the sudo key and dispatches a function call with `Root` origin."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_."]
                #[doc = ""]
                #[doc = "## Complexity"]
                #[doc = "- O(1)."]
                pub fn sudo(&self, call: types::sudo::Call) -> ::subxt::tx::Payload<types::Sudo> {
                    ::subxt::tx::Payload::new_static(
                        "Sudo",
                        "sudo",
                        types::Sudo {
                            call: ::std::boxed::Box::new(call),
                        },
                        [
                            205u8, 202u8, 210u8, 62u8, 20u8, 218u8, 107u8, 164u8, 131u8, 179u8,
                            60u8, 125u8, 239u8, 131u8, 197u8, 77u8, 217u8, 135u8, 212u8, 204u8,
                            84u8, 4u8, 246u8, 218u8, 135u8, 230u8, 14u8, 68u8, 64u8, 84u8, 254u8,
                            125u8,
                        ],
                    )
                }
                #[doc = "Authenticates the sudo key and dispatches a function call with `Root` origin."]
                #[doc = "This function does not check the weight of the call, and instead allows the"]
                #[doc = "Sudo user to specify the weight of the call."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_."]
                #[doc = ""]
                #[doc = "## Complexity"]
                #[doc = "- O(1)."]
                pub fn sudo_unchecked_weight(
                    &self,
                    call: types::sudo_unchecked_weight::Call,
                    weight: types::sudo_unchecked_weight::Weight,
                ) -> ::subxt::tx::Payload<types::SudoUncheckedWeight> {
                    ::subxt::tx::Payload::new_static(
                        "Sudo",
                        "sudo_unchecked_weight",
                        types::SudoUncheckedWeight {
                            call: ::std::boxed::Box::new(call),
                            weight,
                        },
                        [
                            9u8, 79u8, 61u8, 164u8, 42u8, 178u8, 69u8, 199u8, 50u8, 152u8, 160u8,
                            140u8, 95u8, 116u8, 87u8, 66u8, 235u8, 115u8, 205u8, 52u8, 174u8,
                            247u8, 255u8, 124u8, 55u8, 59u8, 21u8, 164u8, 128u8, 129u8, 42u8, 25u8,
                        ],
                    )
                }
                #[doc = "Authenticates the current sudo key and sets the given AccountId (`new`) as the new sudo"]
                #[doc = "key."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_."]
                #[doc = ""]
                #[doc = "## Complexity"]
                #[doc = "- O(1)."]
                pub fn set_key(
                    &self,
                    new: types::set_key::New,
                ) -> ::subxt::tx::Payload<types::SetKey> {
                    ::subxt::tx::Payload::new_static(
                        "Sudo",
                        "set_key",
                        types::SetKey { new },
                        [
                            9u8, 73u8, 39u8, 205u8, 188u8, 127u8, 143u8, 54u8, 128u8, 94u8, 8u8,
                            227u8, 197u8, 44u8, 70u8, 93u8, 228u8, 196u8, 64u8, 165u8, 226u8,
                            158u8, 101u8, 192u8, 22u8, 193u8, 102u8, 84u8, 21u8, 35u8, 92u8, 198u8,
                        ],
                    )
                }
                #[doc = "Authenticates the sudo key and dispatches a function call with `Signed` origin from"]
                #[doc = "a given account."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_."]
                #[doc = ""]
                #[doc = "## Complexity"]
                #[doc = "- O(1)."]
                pub fn sudo_as(
                    &self,
                    who: types::sudo_as::Who,
                    call: types::sudo_as::Call,
                ) -> ::subxt::tx::Payload<types::SudoAs> {
                    ::subxt::tx::Payload::new_static(
                        "Sudo",
                        "sudo_as",
                        types::SudoAs {
                            who,
                            call: ::std::boxed::Box::new(call),
                        },
                        [
                            132u8, 123u8, 253u8, 4u8, 79u8, 13u8, 74u8, 1u8, 187u8, 186u8, 191u8,
                            147u8, 129u8, 48u8, 194u8, 13u8, 139u8, 71u8, 51u8, 0u8, 141u8, 184u8,
                            108u8, 198u8, 21u8, 207u8, 200u8, 250u8, 183u8, 77u8, 222u8, 58u8,
                        ],
                    )
                }
            }
        }
        #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
        pub type Event = runtime_types::pallet_sudo::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A sudo just took place. \\[result\\]"]
            pub struct Sudid {
                pub sudo_result: sudid::SudoResult,
            }
            pub mod sudid {
                use super::runtime_types;
                pub type SudoResult =
                    ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>;
            }
            impl ::subxt::events::StaticEvent for Sudid {
                const PALLET: &'static str = "Sudo";
                const EVENT: &'static str = "Sudid";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "The \\[sudoer\\] just switched identity; the old key is supplied if one existed."]
            pub struct KeyChanged {
                pub old_sudoer: key_changed::OldSudoer,
            }
            pub mod key_changed {
                use super::runtime_types;
                pub type OldSudoer = ::core::option::Option<::subxt::utils::AccountId32>;
            }
            impl ::subxt::events::StaticEvent for KeyChanged {
                const PALLET: &'static str = "Sudo";
                const EVENT: &'static str = "KeyChanged";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A sudo just took place. \\[result\\]"]
            pub struct SudoAsDone {
                pub sudo_result: sudo_as_done::SudoResult,
            }
            pub mod sudo_as_done {
                use super::runtime_types;
                pub type SudoResult =
                    ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>;
            }
            impl ::subxt::events::StaticEvent for SudoAsDone {
                const PALLET: &'static str = "Sudo";
                const EVENT: &'static str = "SudoAsDone";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub mod types {
                use super::runtime_types;
                pub mod key {
                    use super::runtime_types;
                    pub type Key = ::subxt::utils::AccountId32;
                }
            }
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " The `AccountId` of the sudo key."]
                pub fn key(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::key::Key,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Sudo",
                        "Key",
                        vec![],
                        [
                            72u8, 14u8, 225u8, 162u8, 205u8, 247u8, 227u8, 105u8, 116u8, 57u8, 4u8,
                            31u8, 84u8, 137u8, 227u8, 228u8, 133u8, 245u8, 206u8, 227u8, 117u8,
                            36u8, 252u8, 151u8, 107u8, 15u8, 180u8, 4u8, 4u8, 152u8, 195u8, 144u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod multisig {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
        pub type Error = runtime_types::pallet_multisig::pallet::Error;
        #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
        pub type Call = runtime_types::pallet_multisig::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Immediately dispatch a multi-signature call using a single approval from the caller."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_."]
                #[doc = ""]
                #[doc = "- `other_signatories`: The accounts (other than the sender) who are part of the"]
                #[doc = "multi-signature, but do not participate in the approval process."]
                #[doc = "- `call`: The call to be executed."]
                #[doc = ""]
                #[doc = "Result is equivalent to the dispatched result."]
                #[doc = ""]
                #[doc = "## Complexity"]
                #[doc = "O(Z + C) where Z is the length of the call and C its execution weight."]
                pub struct AsMultiThreshold1 {
                    pub other_signatories: as_multi_threshold1::OtherSignatories,
                    pub call: ::std::boxed::Box<as_multi_threshold1::Call>,
                }
                pub mod as_multi_threshold1 {
                    use super::runtime_types;
                    pub type OtherSignatories = ::std::vec::Vec<::subxt::utils::AccountId32>;
                    pub type Call = runtime_types::node_subtensor_runtime::RuntimeCall;
                }
                impl ::subxt::blocks::StaticExtrinsic for AsMultiThreshold1 {
                    const PALLET: &'static str = "Multisig";
                    const CALL: &'static str = "as_multi_threshold_1";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Register approval for a dispatch to be made from a deterministic composite account if"]
                #[doc = "approved by a total of `threshold - 1` of `other_signatories`."]
                #[doc = ""]
                #[doc = "If there are enough, then dispatch the call."]
                #[doc = ""]
                #[doc = "Payment: `DepositBase` will be reserved if this is the first approval, plus"]
                #[doc = "`threshold` times `DepositFactor`. It is returned once this dispatch happens or"]
                #[doc = "is cancelled."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_."]
                #[doc = ""]
                #[doc = "- `threshold`: The total number of approvals for this dispatch before it is executed."]
                #[doc = "- `other_signatories`: The accounts (other than the sender) who can approve this"]
                #[doc = "dispatch. May not be empty."]
                #[doc = "- `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is"]
                #[doc = "not the first approval, then it must be `Some`, with the timepoint (block number and"]
                #[doc = "transaction index) of the first approval transaction."]
                #[doc = "- `call`: The call to be executed."]
                #[doc = ""]
                #[doc = "NOTE: Unless this is the final approval, you will generally want to use"]
                #[doc = "`approve_as_multi` instead, since it only requires a hash of the call."]
                #[doc = ""]
                #[doc = "Result is equivalent to the dispatched result if `threshold` is exactly `1`. Otherwise"]
                #[doc = "on success, result is `Ok` and the result from the interior call, if it was executed,"]
                #[doc = "may be found in the deposited `MultisigExecuted` event."]
                #[doc = ""]
                #[doc = "## Complexity"]
                #[doc = "- `O(S + Z + Call)`."]
                #[doc = "- Up to one balance-reserve or unreserve operation."]
                #[doc = "- One passthrough operation, one insert, both `O(S)` where `S` is the number of"]
                #[doc = "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional."]
                #[doc = "- One call encode & hash, both of complexity `O(Z)` where `Z` is tx-len."]
                #[doc = "- One encode & hash, both of complexity `O(S)`."]
                #[doc = "- Up to one binary search and insert (`O(logS + S)`)."]
                #[doc = "- I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove."]
                #[doc = "- One event."]
                #[doc = "- The weight of the `call`."]
                #[doc = "- Storage: inserts one item, value size bounded by `MaxSignatories`, with a deposit"]
                #[doc = "  taken for its lifetime of `DepositBase + threshold * DepositFactor`."]
                pub struct AsMulti {
                    pub threshold: as_multi::Threshold,
                    pub other_signatories: as_multi::OtherSignatories,
                    pub maybe_timepoint: as_multi::MaybeTimepoint,
                    pub call: ::std::boxed::Box<as_multi::Call>,
                    pub max_weight: as_multi::MaxWeight,
                }
                pub mod as_multi {
                    use super::runtime_types;
                    pub type Threshold = ::core::primitive::u16;
                    pub type OtherSignatories = ::std::vec::Vec<::subxt::utils::AccountId32>;
                    pub type MaybeTimepoint = ::core::option::Option<
                        runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
                    >;
                    pub type Call = runtime_types::node_subtensor_runtime::RuntimeCall;
                    pub type MaxWeight = runtime_types::sp_weights::weight_v2::Weight;
                }
                impl ::subxt::blocks::StaticExtrinsic for AsMulti {
                    const PALLET: &'static str = "Multisig";
                    const CALL: &'static str = "as_multi";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Register approval for a dispatch to be made from a deterministic composite account if"]
                #[doc = "approved by a total of `threshold - 1` of `other_signatories`."]
                #[doc = ""]
                #[doc = "Payment: `DepositBase` will be reserved if this is the first approval, plus"]
                #[doc = "`threshold` times `DepositFactor`. It is returned once this dispatch happens or"]
                #[doc = "is cancelled."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_."]
                #[doc = ""]
                #[doc = "- `threshold`: The total number of approvals for this dispatch before it is executed."]
                #[doc = "- `other_signatories`: The accounts (other than the sender) who can approve this"]
                #[doc = "dispatch. May not be empty."]
                #[doc = "- `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is"]
                #[doc = "not the first approval, then it must be `Some`, with the timepoint (block number and"]
                #[doc = "transaction index) of the first approval transaction."]
                #[doc = "- `call_hash`: The hash of the call to be executed."]
                #[doc = ""]
                #[doc = "NOTE: If this is the final approval, you will want to use `as_multi` instead."]
                #[doc = ""]
                #[doc = "## Complexity"]
                #[doc = "- `O(S)`."]
                #[doc = "- Up to one balance-reserve or unreserve operation."]
                #[doc = "- One passthrough operation, one insert, both `O(S)` where `S` is the number of"]
                #[doc = "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional."]
                #[doc = "- One encode & hash, both of complexity `O(S)`."]
                #[doc = "- Up to one binary search and insert (`O(logS + S)`)."]
                #[doc = "- I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove."]
                #[doc = "- One event."]
                #[doc = "- Storage: inserts one item, value size bounded by `MaxSignatories`, with a deposit"]
                #[doc = "  taken for its lifetime of `DepositBase + threshold * DepositFactor`."]
                pub struct ApproveAsMulti {
                    pub threshold: approve_as_multi::Threshold,
                    pub other_signatories: approve_as_multi::OtherSignatories,
                    pub maybe_timepoint: approve_as_multi::MaybeTimepoint,
                    pub call_hash: approve_as_multi::CallHash,
                    pub max_weight: approve_as_multi::MaxWeight,
                }
                pub mod approve_as_multi {
                    use super::runtime_types;
                    pub type Threshold = ::core::primitive::u16;
                    pub type OtherSignatories = ::std::vec::Vec<::subxt::utils::AccountId32>;
                    pub type MaybeTimepoint = ::core::option::Option<
                        runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
                    >;
                    pub type CallHash = [::core::primitive::u8; 32usize];
                    pub type MaxWeight = runtime_types::sp_weights::weight_v2::Weight;
                }
                impl ::subxt::blocks::StaticExtrinsic for ApproveAsMulti {
                    const PALLET: &'static str = "Multisig";
                    const CALL: &'static str = "approve_as_multi";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Cancel a pre-existing, on-going multisig transaction. Any deposit reserved previously"]
                #[doc = "for this operation will be unreserved on success."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_."]
                #[doc = ""]
                #[doc = "- `threshold`: The total number of approvals for this dispatch before it is executed."]
                #[doc = "- `other_signatories`: The accounts (other than the sender) who can approve this"]
                #[doc = "dispatch. May not be empty."]
                #[doc = "- `timepoint`: The timepoint (block number and transaction index) of the first approval"]
                #[doc = "transaction for this dispatch."]
                #[doc = "- `call_hash`: The hash of the call to be executed."]
                #[doc = ""]
                #[doc = "## Complexity"]
                #[doc = "- `O(S)`."]
                #[doc = "- Up to one balance-reserve or unreserve operation."]
                #[doc = "- One passthrough operation, one insert, both `O(S)` where `S` is the number of"]
                #[doc = "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional."]
                #[doc = "- One encode & hash, both of complexity `O(S)`."]
                #[doc = "- One event."]
                #[doc = "- I/O: 1 read `O(S)`, one remove."]
                #[doc = "- Storage: removes one item."]
                pub struct CancelAsMulti {
                    pub threshold: cancel_as_multi::Threshold,
                    pub other_signatories: cancel_as_multi::OtherSignatories,
                    pub timepoint: cancel_as_multi::Timepoint,
                    pub call_hash: cancel_as_multi::CallHash,
                }
                pub mod cancel_as_multi {
                    use super::runtime_types;
                    pub type Threshold = ::core::primitive::u16;
                    pub type OtherSignatories = ::std::vec::Vec<::subxt::utils::AccountId32>;
                    pub type Timepoint =
                        runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>;
                    pub type CallHash = [::core::primitive::u8; 32usize];
                }
                impl ::subxt::blocks::StaticExtrinsic for CancelAsMulti {
                    const PALLET: &'static str = "Multisig";
                    const CALL: &'static str = "cancel_as_multi";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "Immediately dispatch a multi-signature call using a single approval from the caller."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_."]
                #[doc = ""]
                #[doc = "- `other_signatories`: The accounts (other than the sender) who are part of the"]
                #[doc = "multi-signature, but do not participate in the approval process."]
                #[doc = "- `call`: The call to be executed."]
                #[doc = ""]
                #[doc = "Result is equivalent to the dispatched result."]
                #[doc = ""]
                #[doc = "## Complexity"]
                #[doc = "O(Z + C) where Z is the length of the call and C its execution weight."]
                pub fn as_multi_threshold_1(
                    &self,
                    other_signatories: types::as_multi_threshold1::OtherSignatories,
                    call: types::as_multi_threshold1::Call,
                ) -> ::subxt::tx::Payload<types::AsMultiThreshold1> {
                    ::subxt::tx::Payload::new_static(
                        "Multisig",
                        "as_multi_threshold_1",
                        types::AsMultiThreshold1 {
                            other_signatories,
                            call: ::std::boxed::Box::new(call),
                        },
                        [
                            18u8, 215u8, 8u8, 6u8, 13u8, 159u8, 107u8, 139u8, 13u8, 76u8, 126u8,
                            231u8, 137u8, 98u8, 14u8, 7u8, 93u8, 103u8, 169u8, 204u8, 130u8, 52u8,
                            128u8, 152u8, 124u8, 239u8, 137u8, 12u8, 114u8, 244u8, 246u8, 76u8,
                        ],
                    )
                }
                #[doc = "Register approval for a dispatch to be made from a deterministic composite account if"]
                #[doc = "approved by a total of `threshold - 1` of `other_signatories`."]
                #[doc = ""]
                #[doc = "If there are enough, then dispatch the call."]
                #[doc = ""]
                #[doc = "Payment: `DepositBase` will be reserved if this is the first approval, plus"]
                #[doc = "`threshold` times `DepositFactor`. It is returned once this dispatch happens or"]
                #[doc = "is cancelled."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_."]
                #[doc = ""]
                #[doc = "- `threshold`: The total number of approvals for this dispatch before it is executed."]
                #[doc = "- `other_signatories`: The accounts (other than the sender) who can approve this"]
                #[doc = "dispatch. May not be empty."]
                #[doc = "- `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is"]
                #[doc = "not the first approval, then it must be `Some`, with the timepoint (block number and"]
                #[doc = "transaction index) of the first approval transaction."]
                #[doc = "- `call`: The call to be executed."]
                #[doc = ""]
                #[doc = "NOTE: Unless this is the final approval, you will generally want to use"]
                #[doc = "`approve_as_multi` instead, since it only requires a hash of the call."]
                #[doc = ""]
                #[doc = "Result is equivalent to the dispatched result if `threshold` is exactly `1`. Otherwise"]
                #[doc = "on success, result is `Ok` and the result from the interior call, if it was executed,"]
                #[doc = "may be found in the deposited `MultisigExecuted` event."]
                #[doc = ""]
                #[doc = "## Complexity"]
                #[doc = "- `O(S + Z + Call)`."]
                #[doc = "- Up to one balance-reserve or unreserve operation."]
                #[doc = "- One passthrough operation, one insert, both `O(S)` where `S` is the number of"]
                #[doc = "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional."]
                #[doc = "- One call encode & hash, both of complexity `O(Z)` where `Z` is tx-len."]
                #[doc = "- One encode & hash, both of complexity `O(S)`."]
                #[doc = "- Up to one binary search and insert (`O(logS + S)`)."]
                #[doc = "- I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove."]
                #[doc = "- One event."]
                #[doc = "- The weight of the `call`."]
                #[doc = "- Storage: inserts one item, value size bounded by `MaxSignatories`, with a deposit"]
                #[doc = "  taken for its lifetime of `DepositBase + threshold * DepositFactor`."]
                pub fn as_multi(
                    &self,
                    threshold: types::as_multi::Threshold,
                    other_signatories: types::as_multi::OtherSignatories,
                    maybe_timepoint: types::as_multi::MaybeTimepoint,
                    call: types::as_multi::Call,
                    max_weight: types::as_multi::MaxWeight,
                ) -> ::subxt::tx::Payload<types::AsMulti> {
                    ::subxt::tx::Payload::new_static(
                        "Multisig",
                        "as_multi",
                        types::AsMulti {
                            threshold,
                            other_signatories,
                            maybe_timepoint,
                            call: ::std::boxed::Box::new(call),
                            max_weight,
                        },
                        [
                            163u8, 150u8, 22u8, 148u8, 222u8, 51u8, 82u8, 15u8, 20u8, 8u8, 171u8,
                            84u8, 184u8, 145u8, 177u8, 152u8, 38u8, 9u8, 207u8, 104u8, 124u8, 80u8,
                            9u8, 107u8, 167u8, 74u8, 171u8, 58u8, 224u8, 200u8, 183u8, 9u8,
                        ],
                    )
                }
                #[doc = "Register approval for a dispatch to be made from a deterministic composite account if"]
                #[doc = "approved by a total of `threshold - 1` of `other_signatories`."]
                #[doc = ""]
                #[doc = "Payment: `DepositBase` will be reserved if this is the first approval, plus"]
                #[doc = "`threshold` times `DepositFactor`. It is returned once this dispatch happens or"]
                #[doc = "is cancelled."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_."]
                #[doc = ""]
                #[doc = "- `threshold`: The total number of approvals for this dispatch before it is executed."]
                #[doc = "- `other_signatories`: The accounts (other than the sender) who can approve this"]
                #[doc = "dispatch. May not be empty."]
                #[doc = "- `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is"]
                #[doc = "not the first approval, then it must be `Some`, with the timepoint (block number and"]
                #[doc = "transaction index) of the first approval transaction."]
                #[doc = "- `call_hash`: The hash of the call to be executed."]
                #[doc = ""]
                #[doc = "NOTE: If this is the final approval, you will want to use `as_multi` instead."]
                #[doc = ""]
                #[doc = "## Complexity"]
                #[doc = "- `O(S)`."]
                #[doc = "- Up to one balance-reserve or unreserve operation."]
                #[doc = "- One passthrough operation, one insert, both `O(S)` where `S` is the number of"]
                #[doc = "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional."]
                #[doc = "- One encode & hash, both of complexity `O(S)`."]
                #[doc = "- Up to one binary search and insert (`O(logS + S)`)."]
                #[doc = "- I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove."]
                #[doc = "- One event."]
                #[doc = "- Storage: inserts one item, value size bounded by `MaxSignatories`, with a deposit"]
                #[doc = "  taken for its lifetime of `DepositBase + threshold * DepositFactor`."]
                pub fn approve_as_multi(
                    &self,
                    threshold: types::approve_as_multi::Threshold,
                    other_signatories: types::approve_as_multi::OtherSignatories,
                    maybe_timepoint: types::approve_as_multi::MaybeTimepoint,
                    call_hash: types::approve_as_multi::CallHash,
                    max_weight: types::approve_as_multi::MaxWeight,
                ) -> ::subxt::tx::Payload<types::ApproveAsMulti> {
                    ::subxt::tx::Payload::new_static(
                        "Multisig",
                        "approve_as_multi",
                        types::ApproveAsMulti {
                            threshold,
                            other_signatories,
                            maybe_timepoint,
                            call_hash,
                            max_weight,
                        },
                        [
                            248u8, 46u8, 131u8, 35u8, 204u8, 12u8, 218u8, 150u8, 88u8, 131u8, 89u8,
                            13u8, 95u8, 122u8, 87u8, 107u8, 136u8, 154u8, 92u8, 199u8, 108u8, 92u8,
                            207u8, 171u8, 113u8, 8u8, 47u8, 248u8, 65u8, 26u8, 203u8, 135u8,
                        ],
                    )
                }
                #[doc = "Cancel a pre-existing, on-going multisig transaction. Any deposit reserved previously"]
                #[doc = "for this operation will be unreserved on success."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_."]
                #[doc = ""]
                #[doc = "- `threshold`: The total number of approvals for this dispatch before it is executed."]
                #[doc = "- `other_signatories`: The accounts (other than the sender) who can approve this"]
                #[doc = "dispatch. May not be empty."]
                #[doc = "- `timepoint`: The timepoint (block number and transaction index) of the first approval"]
                #[doc = "transaction for this dispatch."]
                #[doc = "- `call_hash`: The hash of the call to be executed."]
                #[doc = ""]
                #[doc = "## Complexity"]
                #[doc = "- `O(S)`."]
                #[doc = "- Up to one balance-reserve or unreserve operation."]
                #[doc = "- One passthrough operation, one insert, both `O(S)` where `S` is the number of"]
                #[doc = "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional."]
                #[doc = "- One encode & hash, both of complexity `O(S)`."]
                #[doc = "- One event."]
                #[doc = "- I/O: 1 read `O(S)`, one remove."]
                #[doc = "- Storage: removes one item."]
                pub fn cancel_as_multi(
                    &self,
                    threshold: types::cancel_as_multi::Threshold,
                    other_signatories: types::cancel_as_multi::OtherSignatories,
                    timepoint: types::cancel_as_multi::Timepoint,
                    call_hash: types::cancel_as_multi::CallHash,
                ) -> ::subxt::tx::Payload<types::CancelAsMulti> {
                    ::subxt::tx::Payload::new_static(
                        "Multisig",
                        "cancel_as_multi",
                        types::CancelAsMulti {
                            threshold,
                            other_signatories,
                            timepoint,
                            call_hash,
                        },
                        [
                            212u8, 179u8, 123u8, 40u8, 209u8, 228u8, 181u8, 0u8, 109u8, 28u8, 27u8,
                            48u8, 15u8, 47u8, 203u8, 54u8, 106u8, 114u8, 28u8, 118u8, 101u8, 201u8,
                            95u8, 187u8, 46u8, 182u8, 4u8, 30u8, 227u8, 105u8, 14u8, 81u8,
                        ],
                    )
                }
            }
        }
        #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
        pub type Event = runtime_types::pallet_multisig::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A new multisig operation has begun."]
            pub struct NewMultisig {
                pub approving: new_multisig::Approving,
                pub multisig: new_multisig::Multisig,
                pub call_hash: new_multisig::CallHash,
            }
            pub mod new_multisig {
                use super::runtime_types;
                pub type Approving = ::subxt::utils::AccountId32;
                pub type Multisig = ::subxt::utils::AccountId32;
                pub type CallHash = [::core::primitive::u8; 32usize];
            }
            impl ::subxt::events::StaticEvent for NewMultisig {
                const PALLET: &'static str = "Multisig";
                const EVENT: &'static str = "NewMultisig";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A multisig operation has been approved by someone."]
            pub struct MultisigApproval {
                pub approving: multisig_approval::Approving,
                pub timepoint: multisig_approval::Timepoint,
                pub multisig: multisig_approval::Multisig,
                pub call_hash: multisig_approval::CallHash,
            }
            pub mod multisig_approval {
                use super::runtime_types;
                pub type Approving = ::subxt::utils::AccountId32;
                pub type Timepoint =
                    runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>;
                pub type Multisig = ::subxt::utils::AccountId32;
                pub type CallHash = [::core::primitive::u8; 32usize];
            }
            impl ::subxt::events::StaticEvent for MultisigApproval {
                const PALLET: &'static str = "Multisig";
                const EVENT: &'static str = "MultisigApproval";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A multisig operation has been executed."]
            pub struct MultisigExecuted {
                pub approving: multisig_executed::Approving,
                pub timepoint: multisig_executed::Timepoint,
                pub multisig: multisig_executed::Multisig,
                pub call_hash: multisig_executed::CallHash,
                pub result: multisig_executed::Result,
            }
            pub mod multisig_executed {
                use super::runtime_types;
                pub type Approving = ::subxt::utils::AccountId32;
                pub type Timepoint =
                    runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>;
                pub type Multisig = ::subxt::utils::AccountId32;
                pub type CallHash = [::core::primitive::u8; 32usize];
                pub type Result =
                    ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>;
            }
            impl ::subxt::events::StaticEvent for MultisigExecuted {
                const PALLET: &'static str = "Multisig";
                const EVENT: &'static str = "MultisigExecuted";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A multisig operation has been cancelled."]
            pub struct MultisigCancelled {
                pub cancelling: multisig_cancelled::Cancelling,
                pub timepoint: multisig_cancelled::Timepoint,
                pub multisig: multisig_cancelled::Multisig,
                pub call_hash: multisig_cancelled::CallHash,
            }
            pub mod multisig_cancelled {
                use super::runtime_types;
                pub type Cancelling = ::subxt::utils::AccountId32;
                pub type Timepoint =
                    runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>;
                pub type Multisig = ::subxt::utils::AccountId32;
                pub type CallHash = [::core::primitive::u8; 32usize];
            }
            impl ::subxt::events::StaticEvent for MultisigCancelled {
                const PALLET: &'static str = "Multisig";
                const EVENT: &'static str = "MultisigCancelled";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub mod types {
                use super::runtime_types;
                pub mod multisigs {
                    use super::runtime_types;
                    pub type Multisigs = runtime_types::pallet_multisig::Multisig<
                        ::core::primitive::u32,
                        ::core::primitive::u64,
                        ::subxt::utils::AccountId32,
                    >;
                    pub type Param0 = ::subxt::utils::AccountId32;
                    pub type Param1 = [::core::primitive::u8; 32usize];
                }
            }
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " The set of open multisig operations."]
                pub fn multisigs_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::multisigs::Multisigs,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Multisig",
                        "Multisigs",
                        vec![],
                        [
                            208u8, 119u8, 103u8, 193u8, 220u8, 35u8, 173u8, 190u8, 239u8, 195u8,
                            81u8, 14u8, 114u8, 66u8, 251u8, 46u8, 29u8, 186u8, 184u8, 21u8, 202u8,
                            73u8, 249u8, 167u8, 204u8, 248u8, 106u8, 82u8, 138u8, 73u8, 9u8, 140u8,
                        ],
                    )
                }
                #[doc = " The set of open multisig operations."]
                pub fn multisigs_iter1(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::multisigs::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::multisigs::Multisigs,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Multisig",
                        "Multisigs",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            208u8, 119u8, 103u8, 193u8, 220u8, 35u8, 173u8, 190u8, 239u8, 195u8,
                            81u8, 14u8, 114u8, 66u8, 251u8, 46u8, 29u8, 186u8, 184u8, 21u8, 202u8,
                            73u8, 249u8, 167u8, 204u8, 248u8, 106u8, 82u8, 138u8, 73u8, 9u8, 140u8,
                        ],
                    )
                }
                #[doc = " The set of open multisig operations."]
                pub fn multisigs(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::multisigs::Param0>,
                    _1: impl ::std::borrow::Borrow<types::multisigs::Param1>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::multisigs::Multisigs,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Multisig",
                        "Multisigs",
                        vec![
                            ::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
                            ::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
                        ],
                        [
                            208u8, 119u8, 103u8, 193u8, 220u8, 35u8, 173u8, 190u8, 239u8, 195u8,
                            81u8, 14u8, 114u8, 66u8, 251u8, 46u8, 29u8, 186u8, 184u8, 21u8, 202u8,
                            73u8, 249u8, 167u8, 204u8, 248u8, 106u8, 82u8, 138u8, 73u8, 9u8, 140u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " The base amount of currency needed to reserve for creating a multisig execution or to"]
                #[doc = " store a dispatch call for later."]
                #[doc = ""]
                #[doc = " This is held for an additional storage item whose value size is"]
                #[doc = " `4 + sizeof((BlockNumber, Balance, AccountId))` bytes and whose key size is"]
                #[doc = " `32 + sizeof(AccountId)` bytes."]
                pub fn deposit_base(&self) -> ::subxt::constants::Address<::core::primitive::u64> {
                    ::subxt::constants::Address::new_static(
                        "Multisig",
                        "DepositBase",
                        [
                            128u8, 214u8, 205u8, 242u8, 181u8, 142u8, 124u8, 231u8, 190u8, 146u8,
                            59u8, 226u8, 157u8, 101u8, 103u8, 117u8, 249u8, 65u8, 18u8, 191u8,
                            103u8, 119u8, 53u8, 85u8, 81u8, 96u8, 220u8, 42u8, 184u8, 239u8, 42u8,
                            246u8,
                        ],
                    )
                }
                #[doc = " The amount of currency needed per unit threshold when creating a multisig execution."]
                #[doc = ""]
                #[doc = " This is held for adding 32 bytes more into a pre-existing storage value."]
                pub fn deposit_factor(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u64> {
                    ::subxt::constants::Address::new_static(
                        "Multisig",
                        "DepositFactor",
                        [
                            128u8, 214u8, 205u8, 242u8, 181u8, 142u8, 124u8, 231u8, 190u8, 146u8,
                            59u8, 226u8, 157u8, 101u8, 103u8, 117u8, 249u8, 65u8, 18u8, 191u8,
                            103u8, 119u8, 53u8, 85u8, 81u8, 96u8, 220u8, 42u8, 184u8, 239u8, 42u8,
                            246u8,
                        ],
                    )
                }
                #[doc = " The maximum amount of signatories allowed in the multisig."]
                pub fn max_signatories(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Multisig",
                        "MaxSignatories",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod preimage {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
        pub type Error = runtime_types::pallet_preimage::pallet::Error;
        #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
        pub type Call = runtime_types::pallet_preimage::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Register a preimage on-chain."]
                #[doc = ""]
                #[doc = "If the preimage was previously requested, no fees or deposits are taken for providing"]
                #[doc = "the preimage. Otherwise, a deposit is taken proportional to the size of the preimage."]
                pub struct NotePreimage {
                    pub bytes: note_preimage::Bytes,
                }
                pub mod note_preimage {
                    use super::runtime_types;
                    pub type Bytes = ::std::vec::Vec<::core::primitive::u8>;
                }
                impl ::subxt::blocks::StaticExtrinsic for NotePreimage {
                    const PALLET: &'static str = "Preimage";
                    const CALL: &'static str = "note_preimage";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Clear an unrequested preimage from the runtime storage."]
                #[doc = ""]
                #[doc = "If `len` is provided, then it will be a much cheaper operation."]
                #[doc = ""]
                #[doc = "- `hash`: The hash of the preimage to be removed from the store."]
                #[doc = "- `len`: The length of the preimage of `hash`."]
                pub struct UnnotePreimage {
                    pub hash: unnote_preimage::Hash,
                }
                pub mod unnote_preimage {
                    use super::runtime_types;
                    pub type Hash = ::subxt::utils::H256;
                }
                impl ::subxt::blocks::StaticExtrinsic for UnnotePreimage {
                    const PALLET: &'static str = "Preimage";
                    const CALL: &'static str = "unnote_preimage";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Request a preimage be uploaded to the chain without paying any fees or deposits."]
                #[doc = ""]
                #[doc = "If the preimage requests has already been provided on-chain, we unreserve any deposit"]
                #[doc = "a user may have paid, and take the control of the preimage out of their hands."]
                pub struct RequestPreimage {
                    pub hash: request_preimage::Hash,
                }
                pub mod request_preimage {
                    use super::runtime_types;
                    pub type Hash = ::subxt::utils::H256;
                }
                impl ::subxt::blocks::StaticExtrinsic for RequestPreimage {
                    const PALLET: &'static str = "Preimage";
                    const CALL: &'static str = "request_preimage";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Clear a previously made request for a preimage."]
                #[doc = ""]
                #[doc = "NOTE: THIS MUST NOT BE CALLED ON `hash` MORE TIMES THAN `request_preimage`."]
                pub struct UnrequestPreimage {
                    pub hash: unrequest_preimage::Hash,
                }
                pub mod unrequest_preimage {
                    use super::runtime_types;
                    pub type Hash = ::subxt::utils::H256;
                }
                impl ::subxt::blocks::StaticExtrinsic for UnrequestPreimage {
                    const PALLET: &'static str = "Preimage";
                    const CALL: &'static str = "unrequest_preimage";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "Register a preimage on-chain."]
                #[doc = ""]
                #[doc = "If the preimage was previously requested, no fees or deposits are taken for providing"]
                #[doc = "the preimage. Otherwise, a deposit is taken proportional to the size of the preimage."]
                pub fn note_preimage(
                    &self,
                    bytes: types::note_preimage::Bytes,
                ) -> ::subxt::tx::Payload<types::NotePreimage> {
                    ::subxt::tx::Payload::new_static(
                        "Preimage",
                        "note_preimage",
                        types::NotePreimage { bytes },
                        [
                            121u8, 88u8, 18u8, 92u8, 176u8, 15u8, 192u8, 198u8, 146u8, 198u8, 38u8,
                            242u8, 213u8, 83u8, 7u8, 230u8, 14u8, 110u8, 235u8, 32u8, 215u8, 26u8,
                            192u8, 217u8, 113u8, 224u8, 206u8, 96u8, 177u8, 198u8, 246u8, 33u8,
                        ],
                    )
                }
                #[doc = "Clear an unrequested preimage from the runtime storage."]
                #[doc = ""]
                #[doc = "If `len` is provided, then it will be a much cheaper operation."]
                #[doc = ""]
                #[doc = "- `hash`: The hash of the preimage to be removed from the store."]
                #[doc = "- `len`: The length of the preimage of `hash`."]
                pub fn unnote_preimage(
                    &self,
                    hash: types::unnote_preimage::Hash,
                ) -> ::subxt::tx::Payload<types::UnnotePreimage> {
                    ::subxt::tx::Payload::new_static(
                        "Preimage",
                        "unnote_preimage",
                        types::UnnotePreimage { hash },
                        [
                            188u8, 116u8, 222u8, 22u8, 127u8, 215u8, 2u8, 133u8, 96u8, 202u8,
                            190u8, 123u8, 203u8, 43u8, 200u8, 161u8, 226u8, 24u8, 49u8, 36u8,
                            221u8, 160u8, 130u8, 119u8, 30u8, 138u8, 144u8, 85u8, 5u8, 164u8,
                            252u8, 222u8,
                        ],
                    )
                }
                #[doc = "Request a preimage be uploaded to the chain without paying any fees or deposits."]
                #[doc = ""]
                #[doc = "If the preimage requests has already been provided on-chain, we unreserve any deposit"]
                #[doc = "a user may have paid, and take the control of the preimage out of their hands."]
                pub fn request_preimage(
                    &self,
                    hash: types::request_preimage::Hash,
                ) -> ::subxt::tx::Payload<types::RequestPreimage> {
                    ::subxt::tx::Payload::new_static(
                        "Preimage",
                        "request_preimage",
                        types::RequestPreimage { hash },
                        [
                            87u8, 0u8, 204u8, 111u8, 43u8, 115u8, 64u8, 209u8, 133u8, 13u8, 83u8,
                            45u8, 164u8, 166u8, 233u8, 105u8, 242u8, 238u8, 235u8, 208u8, 113u8,
                            134u8, 93u8, 242u8, 86u8, 32u8, 7u8, 152u8, 107u8, 208u8, 79u8, 59u8,
                        ],
                    )
                }
                #[doc = "Clear a previously made request for a preimage."]
                #[doc = ""]
                #[doc = "NOTE: THIS MUST NOT BE CALLED ON `hash` MORE TIMES THAN `request_preimage`."]
                pub fn unrequest_preimage(
                    &self,
                    hash: types::unrequest_preimage::Hash,
                ) -> ::subxt::tx::Payload<types::UnrequestPreimage> {
                    ::subxt::tx::Payload::new_static(
                        "Preimage",
                        "unrequest_preimage",
                        types::UnrequestPreimage { hash },
                        [
                            55u8, 37u8, 224u8, 149u8, 142u8, 120u8, 8u8, 68u8, 183u8, 225u8, 255u8,
                            240u8, 254u8, 111u8, 58u8, 200u8, 113u8, 217u8, 177u8, 203u8, 107u8,
                            104u8, 233u8, 87u8, 252u8, 53u8, 33u8, 112u8, 116u8, 254u8, 117u8,
                            134u8,
                        ],
                    )
                }
            }
        }
        #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
        pub type Event = runtime_types::pallet_preimage::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A preimage has been noted."]
            pub struct Noted {
                pub hash: noted::Hash,
            }
            pub mod noted {
                use super::runtime_types;
                pub type Hash = ::subxt::utils::H256;
            }
            impl ::subxt::events::StaticEvent for Noted {
                const PALLET: &'static str = "Preimage";
                const EVENT: &'static str = "Noted";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A preimage has been requested."]
            pub struct Requested {
                pub hash: requested::Hash,
            }
            pub mod requested {
                use super::runtime_types;
                pub type Hash = ::subxt::utils::H256;
            }
            impl ::subxt::events::StaticEvent for Requested {
                const PALLET: &'static str = "Preimage";
                const EVENT: &'static str = "Requested";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "A preimage has ben cleared."]
            pub struct Cleared {
                pub hash: cleared::Hash,
            }
            pub mod cleared {
                use super::runtime_types;
                pub type Hash = ::subxt::utils::H256;
            }
            impl ::subxt::events::StaticEvent for Cleared {
                const PALLET: &'static str = "Preimage";
                const EVENT: &'static str = "Cleared";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub mod types {
                use super::runtime_types;
                pub mod status_for {
                    use super::runtime_types;
                    pub type StatusFor = runtime_types::pallet_preimage::RequestStatus<
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u64,
                    >;
                    pub type Param0 = ::subxt::utils::H256;
                }
                pub mod preimage_for {
                    use super::runtime_types;
                    pub type PreimageFor =
                        runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            ::core::primitive::u8,
                        >;
                    pub type Param0 = ::subxt::utils::H256;
                    pub type Param1 = ::core::primitive::u32;
                }
            }
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " The request status of a given hash."]
                pub fn status_for_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::status_for::StatusFor,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Preimage",
                        "StatusFor",
                        vec![],
                        [
                            16u8, 95u8, 212u8, 193u8, 245u8, 56u8, 255u8, 183u8, 177u8, 15u8, 81u8,
                            194u8, 210u8, 12u8, 101u8, 227u8, 189u8, 125u8, 47u8, 186u8, 245u8,
                            94u8, 221u8, 238u8, 86u8, 130u8, 12u8, 82u8, 154u8, 114u8, 5u8, 63u8,
                        ],
                    )
                }
                #[doc = " The request status of a given hash."]
                pub fn status_for(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::status_for::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::status_for::StatusFor,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Preimage",
                        "StatusFor",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            16u8, 95u8, 212u8, 193u8, 245u8, 56u8, 255u8, 183u8, 177u8, 15u8, 81u8,
                            194u8, 210u8, 12u8, 101u8, 227u8, 189u8, 125u8, 47u8, 186u8, 245u8,
                            94u8, 221u8, 238u8, 86u8, 130u8, 12u8, 82u8, 154u8, 114u8, 5u8, 63u8,
                        ],
                    )
                }
                pub fn preimage_for_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::preimage_for::PreimageFor,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Preimage",
                        "PreimageFor",
                        vec![],
                        [
                            106u8, 5u8, 17u8, 46u8, 6u8, 184u8, 177u8, 113u8, 169u8, 34u8, 119u8,
                            141u8, 117u8, 40u8, 30u8, 94u8, 187u8, 35u8, 206u8, 216u8, 143u8,
                            208u8, 49u8, 156u8, 200u8, 255u8, 109u8, 200u8, 210u8, 134u8, 24u8,
                            139u8,
                        ],
                    )
                }
                pub fn preimage_for_iter1(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::preimage_for::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::preimage_for::PreimageFor,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Preimage",
                        "PreimageFor",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            106u8, 5u8, 17u8, 46u8, 6u8, 184u8, 177u8, 113u8, 169u8, 34u8, 119u8,
                            141u8, 117u8, 40u8, 30u8, 94u8, 187u8, 35u8, 206u8, 216u8, 143u8,
                            208u8, 49u8, 156u8, 200u8, 255u8, 109u8, 200u8, 210u8, 134u8, 24u8,
                            139u8,
                        ],
                    )
                }
                pub fn preimage_for(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::preimage_for::Param0>,
                    _1: impl ::std::borrow::Borrow<types::preimage_for::Param1>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::preimage_for::PreimageFor,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Preimage",
                        "PreimageFor",
                        vec![
                            ::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
                            ::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
                        ],
                        [
                            106u8, 5u8, 17u8, 46u8, 6u8, 184u8, 177u8, 113u8, 169u8, 34u8, 119u8,
                            141u8, 117u8, 40u8, 30u8, 94u8, 187u8, 35u8, 206u8, 216u8, 143u8,
                            208u8, 49u8, 156u8, 200u8, 255u8, 109u8, 200u8, 210u8, 134u8, 24u8,
                            139u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod scheduler {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
        pub type Error = runtime_types::pallet_scheduler::pallet::Error;
        #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
        pub type Call = runtime_types::pallet_scheduler::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Anonymously schedule a task."]
                pub struct Schedule {
                    pub when: schedule::When,
                    pub maybe_periodic: schedule::MaybePeriodic,
                    pub priority: schedule::Priority,
                    pub call: ::std::boxed::Box<schedule::Call>,
                }
                pub mod schedule {
                    use super::runtime_types;
                    pub type When = ::core::primitive::u32;
                    pub type MaybePeriodic =
                        ::core::option::Option<(::core::primitive::u32, ::core::primitive::u32)>;
                    pub type Priority = ::core::primitive::u8;
                    pub type Call = runtime_types::node_subtensor_runtime::RuntimeCall;
                }
                impl ::subxt::blocks::StaticExtrinsic for Schedule {
                    const PALLET: &'static str = "Scheduler";
                    const CALL: &'static str = "schedule";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Cancel an anonymously scheduled task."]
                pub struct Cancel {
                    pub when: cancel::When,
                    pub index: cancel::Index,
                }
                pub mod cancel {
                    use super::runtime_types;
                    pub type When = ::core::primitive::u32;
                    pub type Index = ::core::primitive::u32;
                }
                impl ::subxt::blocks::StaticExtrinsic for Cancel {
                    const PALLET: &'static str = "Scheduler";
                    const CALL: &'static str = "cancel";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Schedule a named task."]
                pub struct ScheduleNamed {
                    pub id: schedule_named::Id,
                    pub when: schedule_named::When,
                    pub maybe_periodic: schedule_named::MaybePeriodic,
                    pub priority: schedule_named::Priority,
                    pub call: ::std::boxed::Box<schedule_named::Call>,
                }
                pub mod schedule_named {
                    use super::runtime_types;
                    pub type Id = [::core::primitive::u8; 32usize];
                    pub type When = ::core::primitive::u32;
                    pub type MaybePeriodic =
                        ::core::option::Option<(::core::primitive::u32, ::core::primitive::u32)>;
                    pub type Priority = ::core::primitive::u8;
                    pub type Call = runtime_types::node_subtensor_runtime::RuntimeCall;
                }
                impl ::subxt::blocks::StaticExtrinsic for ScheduleNamed {
                    const PALLET: &'static str = "Scheduler";
                    const CALL: &'static str = "schedule_named";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Cancel a named scheduled task."]
                pub struct CancelNamed {
                    pub id: cancel_named::Id,
                }
                pub mod cancel_named {
                    use super::runtime_types;
                    pub type Id = [::core::primitive::u8; 32usize];
                }
                impl ::subxt::blocks::StaticExtrinsic for CancelNamed {
                    const PALLET: &'static str = "Scheduler";
                    const CALL: &'static str = "cancel_named";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Anonymously schedule a task after a delay."]
                pub struct ScheduleAfter {
                    pub after: schedule_after::After,
                    pub maybe_periodic: schedule_after::MaybePeriodic,
                    pub priority: schedule_after::Priority,
                    pub call: ::std::boxed::Box<schedule_after::Call>,
                }
                pub mod schedule_after {
                    use super::runtime_types;
                    pub type After = ::core::primitive::u32;
                    pub type MaybePeriodic =
                        ::core::option::Option<(::core::primitive::u32, ::core::primitive::u32)>;
                    pub type Priority = ::core::primitive::u8;
                    pub type Call = runtime_types::node_subtensor_runtime::RuntimeCall;
                }
                impl ::subxt::blocks::StaticExtrinsic for ScheduleAfter {
                    const PALLET: &'static str = "Scheduler";
                    const CALL: &'static str = "schedule_after";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Schedule a named task after a delay."]
                pub struct ScheduleNamedAfter {
                    pub id: schedule_named_after::Id,
                    pub after: schedule_named_after::After,
                    pub maybe_periodic: schedule_named_after::MaybePeriodic,
                    pub priority: schedule_named_after::Priority,
                    pub call: ::std::boxed::Box<schedule_named_after::Call>,
                }
                pub mod schedule_named_after {
                    use super::runtime_types;
                    pub type Id = [::core::primitive::u8; 32usize];
                    pub type After = ::core::primitive::u32;
                    pub type MaybePeriodic =
                        ::core::option::Option<(::core::primitive::u32, ::core::primitive::u32)>;
                    pub type Priority = ::core::primitive::u8;
                    pub type Call = runtime_types::node_subtensor_runtime::RuntimeCall;
                }
                impl ::subxt::blocks::StaticExtrinsic for ScheduleNamedAfter {
                    const PALLET: &'static str = "Scheduler";
                    const CALL: &'static str = "schedule_named_after";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "Anonymously schedule a task."]
                pub fn schedule(
                    &self,
                    when: types::schedule::When,
                    maybe_periodic: types::schedule::MaybePeriodic,
                    priority: types::schedule::Priority,
                    call: types::schedule::Call,
                ) -> ::subxt::tx::Payload<types::Schedule> {
                    ::subxt::tx::Payload::new_static(
                        "Scheduler",
                        "schedule",
                        types::Schedule {
                            when,
                            maybe_periodic,
                            priority,
                            call: ::std::boxed::Box::new(call),
                        },
                        [
                            188u8, 164u8, 122u8, 227u8, 165u8, 134u8, 241u8, 63u8, 176u8, 55u8,
                            60u8, 97u8, 87u8, 185u8, 86u8, 66u8, 188u8, 196u8, 190u8, 235u8, 54u8,
                            108u8, 95u8, 155u8, 197u8, 133u8, 73u8, 220u8, 33u8, 187u8, 46u8,
                            117u8,
                        ],
                    )
                }
                #[doc = "Cancel an anonymously scheduled task."]
                pub fn cancel(
                    &self,
                    when: types::cancel::When,
                    index: types::cancel::Index,
                ) -> ::subxt::tx::Payload<types::Cancel> {
                    ::subxt::tx::Payload::new_static(
                        "Scheduler",
                        "cancel",
                        types::Cancel { when, index },
                        [
                            183u8, 204u8, 143u8, 86u8, 17u8, 130u8, 132u8, 91u8, 133u8, 168u8,
                            103u8, 129u8, 114u8, 56u8, 123u8, 42u8, 123u8, 120u8, 221u8, 211u8,
                            26u8, 85u8, 82u8, 246u8, 192u8, 39u8, 254u8, 45u8, 147u8, 56u8, 178u8,
                            133u8,
                        ],
                    )
                }
                #[doc = "Schedule a named task."]
                pub fn schedule_named(
                    &self,
                    id: types::schedule_named::Id,
                    when: types::schedule_named::When,
                    maybe_periodic: types::schedule_named::MaybePeriodic,
                    priority: types::schedule_named::Priority,
                    call: types::schedule_named::Call,
                ) -> ::subxt::tx::Payload<types::ScheduleNamed> {
                    ::subxt::tx::Payload::new_static(
                        "Scheduler",
                        "schedule_named",
                        types::ScheduleNamed {
                            id,
                            when,
                            maybe_periodic,
                            priority,
                            call: ::std::boxed::Box::new(call),
                        },
                        [
                            172u8, 79u8, 93u8, 43u8, 219u8, 68u8, 167u8, 239u8, 51u8, 212u8, 201u8,
                            95u8, 216u8, 80u8, 54u8, 61u8, 202u8, 87u8, 18u8, 252u8, 40u8, 50u8,
                            200u8, 56u8, 131u8, 229u8, 102u8, 43u8, 143u8, 130u8, 26u8, 28u8,
                        ],
                    )
                }
                #[doc = "Cancel a named scheduled task."]
                pub fn cancel_named(
                    &self,
                    id: types::cancel_named::Id,
                ) -> ::subxt::tx::Payload<types::CancelNamed> {
                    ::subxt::tx::Payload::new_static(
                        "Scheduler",
                        "cancel_named",
                        types::CancelNamed { id },
                        [
                            205u8, 35u8, 28u8, 57u8, 224u8, 7u8, 49u8, 233u8, 236u8, 163u8, 93u8,
                            236u8, 103u8, 69u8, 65u8, 51u8, 121u8, 84u8, 9u8, 196u8, 147u8, 122u8,
                            227u8, 200u8, 181u8, 233u8, 62u8, 240u8, 174u8, 83u8, 129u8, 193u8,
                        ],
                    )
                }
                #[doc = "Anonymously schedule a task after a delay."]
                pub fn schedule_after(
                    &self,
                    after: types::schedule_after::After,
                    maybe_periodic: types::schedule_after::MaybePeriodic,
                    priority: types::schedule_after::Priority,
                    call: types::schedule_after::Call,
                ) -> ::subxt::tx::Payload<types::ScheduleAfter> {
                    ::subxt::tx::Payload::new_static(
                        "Scheduler",
                        "schedule_after",
                        types::ScheduleAfter {
                            after,
                            maybe_periodic,
                            priority,
                            call: ::std::boxed::Box::new(call),
                        },
                        [
                            241u8, 70u8, 250u8, 115u8, 87u8, 155u8, 42u8, 93u8, 144u8, 66u8, 232u8,
                            173u8, 240u8, 244u8, 127u8, 59u8, 5u8, 91u8, 119u8, 166u8, 141u8, 25u8,
                            237u8, 209u8, 128u8, 106u8, 191u8, 155u8, 76u8, 87u8, 127u8, 64u8,
                        ],
                    )
                }
                #[doc = "Schedule a named task after a delay."]
                pub fn schedule_named_after(
                    &self,
                    id: types::schedule_named_after::Id,
                    after: types::schedule_named_after::After,
                    maybe_periodic: types::schedule_named_after::MaybePeriodic,
                    priority: types::schedule_named_after::Priority,
                    call: types::schedule_named_after::Call,
                ) -> ::subxt::tx::Payload<types::ScheduleNamedAfter> {
                    ::subxt::tx::Payload::new_static(
                        "Scheduler",
                        "schedule_named_after",
                        types::ScheduleNamedAfter {
                            id,
                            after,
                            maybe_periodic,
                            priority,
                            call: ::std::boxed::Box::new(call),
                        },
                        [
                            100u8, 97u8, 119u8, 26u8, 177u8, 206u8, 162u8, 155u8, 123u8, 186u8,
                            159u8, 16u8, 155u8, 182u8, 104u8, 186u8, 120u8, 186u8, 187u8, 4u8,
                            99u8, 247u8, 231u8, 18u8, 48u8, 233u8, 45u8, 175u8, 114u8, 61u8, 4u8,
                            216u8,
                        ],
                    )
                }
            }
        }
        #[doc = "Events type."]
        pub type Event = runtime_types::pallet_scheduler::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Scheduled some task."]
            pub struct Scheduled {
                pub when: scheduled::When,
                pub index: scheduled::Index,
            }
            pub mod scheduled {
                use super::runtime_types;
                pub type When = ::core::primitive::u32;
                pub type Index = ::core::primitive::u32;
            }
            impl ::subxt::events::StaticEvent for Scheduled {
                const PALLET: &'static str = "Scheduler";
                const EVENT: &'static str = "Scheduled";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Canceled some task."]
            pub struct Canceled {
                pub when: canceled::When,
                pub index: canceled::Index,
            }
            pub mod canceled {
                use super::runtime_types;
                pub type When = ::core::primitive::u32;
                pub type Index = ::core::primitive::u32;
            }
            impl ::subxt::events::StaticEvent for Canceled {
                const PALLET: &'static str = "Scheduler";
                const EVENT: &'static str = "Canceled";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "Dispatched some task."]
            pub struct Dispatched {
                pub task: dispatched::Task,
                pub id: dispatched::Id,
                pub result: dispatched::Result,
            }
            pub mod dispatched {
                use super::runtime_types;
                pub type Task = (::core::primitive::u32, ::core::primitive::u32);
                pub type Id = ::core::option::Option<[::core::primitive::u8; 32usize]>;
                pub type Result =
                    ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>;
            }
            impl ::subxt::events::StaticEvent for Dispatched {
                const PALLET: &'static str = "Scheduler";
                const EVENT: &'static str = "Dispatched";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "The call for the provided hash was not found so the task has been aborted."]
            pub struct CallUnavailable {
                pub task: call_unavailable::Task,
                pub id: call_unavailable::Id,
            }
            pub mod call_unavailable {
                use super::runtime_types;
                pub type Task = (::core::primitive::u32, ::core::primitive::u32);
                pub type Id = ::core::option::Option<[::core::primitive::u8; 32usize]>;
            }
            impl ::subxt::events::StaticEvent for CallUnavailable {
                const PALLET: &'static str = "Scheduler";
                const EVENT: &'static str = "CallUnavailable";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "The given task was unable to be renewed since the agenda is full at that block."]
            pub struct PeriodicFailed {
                pub task: periodic_failed::Task,
                pub id: periodic_failed::Id,
            }
            pub mod periodic_failed {
                use super::runtime_types;
                pub type Task = (::core::primitive::u32, ::core::primitive::u32);
                pub type Id = ::core::option::Option<[::core::primitive::u8; 32usize]>;
            }
            impl ::subxt::events::StaticEvent for PeriodicFailed {
                const PALLET: &'static str = "Scheduler";
                const EVENT: &'static str = "PeriodicFailed";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            #[doc = "The given task can never be executed since it is overweight."]
            pub struct PermanentlyOverweight {
                pub task: permanently_overweight::Task,
                pub id: permanently_overweight::Id,
            }
            pub mod permanently_overweight {
                use super::runtime_types;
                pub type Task = (::core::primitive::u32, ::core::primitive::u32);
                pub type Id = ::core::option::Option<[::core::primitive::u8; 32usize]>;
            }
            impl ::subxt::events::StaticEvent for PermanentlyOverweight {
                const PALLET: &'static str = "Scheduler";
                const EVENT: &'static str = "PermanentlyOverweight";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub mod types {
                use super::runtime_types;
                pub mod incomplete_since {
                    use super::runtime_types;
                    pub type IncompleteSince = ::core::primitive::u32;
                }
                pub mod agenda {
                    use super::runtime_types;
                    pub type Agenda = runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        ::core::option::Option<
                            runtime_types::pallet_scheduler::Scheduled<
                                [::core::primitive::u8; 32usize],
                                runtime_types::frame_support::traits::preimages::Bounded<
                                    runtime_types::node_subtensor_runtime::RuntimeCall,
                                >,
                                ::core::primitive::u32,
                                runtime_types::node_subtensor_runtime::OriginCaller,
                                ::subxt::utils::AccountId32,
                            >,
                        >,
                    >;
                    pub type Param0 = ::core::primitive::u32;
                }
                pub mod lookup {
                    use super::runtime_types;
                    pub type Lookup = (::core::primitive::u32, ::core::primitive::u32);
                    pub type Param0 = [::core::primitive::u8; 32usize];
                }
            }
            pub struct StorageApi;
            impl StorageApi {
                pub fn incomplete_since(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::incomplete_since::IncompleteSince,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Scheduler",
                        "IncompleteSince",
                        vec![],
                        [
                            250u8, 83u8, 64u8, 167u8, 205u8, 59u8, 225u8, 97u8, 205u8, 12u8, 76u8,
                            130u8, 197u8, 4u8, 111u8, 208u8, 92u8, 217u8, 145u8, 119u8, 38u8,
                            135u8, 1u8, 242u8, 228u8, 143u8, 56u8, 25u8, 115u8, 233u8, 227u8, 66u8,
                        ],
                    )
                }
                #[doc = " Items to be executed, indexed by the block number that they should be executed on."]
                pub fn agenda_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::agenda::Agenda,
                    (),
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Scheduler",
                        "Agenda",
                        vec![],
                        [
                            83u8, 128u8, 245u8, 203u8, 151u8, 54u8, 165u8, 1u8, 206u8, 52u8, 241u8,
                            179u8, 206u8, 21u8, 38u8, 33u8, 145u8, 19u8, 171u8, 14u8, 215u8, 157u8,
                            252u8, 98u8, 5u8, 181u8, 3u8, 139u8, 102u8, 216u8, 135u8, 79u8,
                        ],
                    )
                }
                #[doc = " Items to be executed, indexed by the block number that they should be executed on."]
                pub fn agenda(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::agenda::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::agenda::Agenda,
                    ::subxt::storage::address::Yes,
                    ::subxt::storage::address::Yes,
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Scheduler",
                        "Agenda",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            83u8, 128u8, 245u8, 203u8, 151u8, 54u8, 165u8, 1u8, 206u8, 52u8, 241u8,
                            179u8, 206u8, 21u8, 38u8, 33u8, 145u8, 19u8, 171u8, 14u8, 215u8, 157u8,
                            252u8, 98u8, 5u8, 181u8, 3u8, 139u8, 102u8, 216u8, 135u8, 79u8,
                        ],
                    )
                }
                #[doc = " Lookup from a name to the block number and index of the task."]
                #[doc = ""]
                #[doc = " For v3 -> v4 the previously unbounded identities are Blake2-256 hashed to form the v4"]
                #[doc = " identities."]
                pub fn lookup_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::lookup::Lookup,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Scheduler",
                        "Lookup",
                        vec![],
                        [
                            24u8, 87u8, 96u8, 127u8, 136u8, 205u8, 238u8, 174u8, 71u8, 110u8, 65u8,
                            98u8, 228u8, 167u8, 99u8, 71u8, 171u8, 186u8, 12u8, 218u8, 137u8, 70u8,
                            70u8, 228u8, 153u8, 111u8, 165u8, 114u8, 229u8, 136u8, 118u8, 131u8,
                        ],
                    )
                }
                #[doc = " Lookup from a name to the block number and index of the task."]
                #[doc = ""]
                #[doc = " For v3 -> v4 the previously unbounded identities are Blake2-256 hashed to form the v4"]
                #[doc = " identities."]
                pub fn lookup(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::lookup::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::lookup::Lookup,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Scheduler",
                        "Lookup",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            24u8, 87u8, 96u8, 127u8, 136u8, 205u8, 238u8, 174u8, 71u8, 110u8, 65u8,
                            98u8, 228u8, 167u8, 99u8, 71u8, 171u8, 186u8, 12u8, 218u8, 137u8, 70u8,
                            70u8, 228u8, 153u8, 111u8, 165u8, 114u8, 229u8, 136u8, 118u8, 131u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " The maximum weight that may be scheduled per block for any dispatchables."]
                pub fn maximum_weight(
                    &self,
                ) -> ::subxt::constants::Address<runtime_types::sp_weights::weight_v2::Weight>
                {
                    ::subxt::constants::Address::new_static(
                        "Scheduler",
                        "MaximumWeight",
                        [
                            149u8, 252u8, 129u8, 80u8, 169u8, 36u8, 79u8, 127u8, 240u8, 156u8,
                            56u8, 202u8, 219u8, 86u8, 5u8, 65u8, 245u8, 148u8, 138u8, 243u8, 210u8,
                            128u8, 234u8, 216u8, 240u8, 219u8, 123u8, 235u8, 21u8, 158u8, 237u8,
                            112u8,
                        ],
                    )
                }
                #[doc = " The maximum number of scheduled calls in the queue for a single block."]
                pub fn max_scheduled_per_block(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Scheduler",
                        "MaxScheduledPerBlock",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod registry {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
        pub type Error = runtime_types::pallet_registry::pallet::Error;
        #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
        pub type Call = runtime_types::pallet_registry::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SetIdentity {
                    pub identified: set_identity::Identified,
                    pub info: ::std::boxed::Box<set_identity::Info>,
                }
                pub mod set_identity {
                    use super::runtime_types;
                    pub type Identified = ::subxt::utils::AccountId32;
                    pub type Info = runtime_types::pallet_registry::types::IdentityInfo;
                }
                impl ::subxt::blocks::StaticExtrinsic for SetIdentity {
                    const PALLET: &'static str = "Registry";
                    const CALL: &'static str = "set_identity";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct ClearIdentity {
                    pub identified: clear_identity::Identified,
                }
                pub mod clear_identity {
                    use super::runtime_types;
                    pub type Identified = ::subxt::utils::AccountId32;
                }
                impl ::subxt::blocks::StaticExtrinsic for ClearIdentity {
                    const PALLET: &'static str = "Registry";
                    const CALL: &'static str = "clear_identity";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                pub fn set_identity(
                    &self,
                    identified: types::set_identity::Identified,
                    info: types::set_identity::Info,
                ) -> ::subxt::tx::Payload<types::SetIdentity> {
                    ::subxt::tx::Payload::new_static(
                        "Registry",
                        "set_identity",
                        types::SetIdentity {
                            identified,
                            info: ::std::boxed::Box::new(info),
                        },
                        [
                            255u8, 222u8, 188u8, 128u8, 170u8, 119u8, 134u8, 170u8, 42u8, 31u8,
                            3u8, 8u8, 53u8, 100u8, 198u8, 14u8, 115u8, 29u8, 228u8, 90u8, 39u8,
                            182u8, 215u8, 189u8, 29u8, 111u8, 230u8, 253u8, 89u8, 109u8, 191u8,
                            220u8,
                        ],
                    )
                }
                pub fn clear_identity(
                    &self,
                    identified: types::clear_identity::Identified,
                ) -> ::subxt::tx::Payload<types::ClearIdentity> {
                    ::subxt::tx::Payload::new_static(
                        "Registry",
                        "clear_identity",
                        types::ClearIdentity { identified },
                        [
                            216u8, 203u8, 30u8, 205u8, 153u8, 152u8, 123u8, 37u8, 208u8, 167u8,
                            25u8, 221u8, 243u8, 138u8, 31u8, 222u8, 64u8, 207u8, 68u8, 74u8, 131u8,
                            236u8, 156u8, 9u8, 30u8, 190u8, 66u8, 119u8, 161u8, 154u8, 5u8, 65u8,
                        ],
                    )
                }
            }
        }
        #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
        pub type Event = runtime_types::pallet_registry::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct IdentitySet {
                pub who: identity_set::Who,
            }
            pub mod identity_set {
                use super::runtime_types;
                pub type Who = ::subxt::utils::AccountId32;
            }
            impl ::subxt::events::StaticEvent for IdentitySet {
                const PALLET: &'static str = "Registry";
                const EVENT: &'static str = "IdentitySet";
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct IdentityDissolved {
                pub who: identity_dissolved::Who,
            }
            pub mod identity_dissolved {
                use super::runtime_types;
                pub type Who = ::subxt::utils::AccountId32;
            }
            impl ::subxt::events::StaticEvent for IdentityDissolved {
                const PALLET: &'static str = "Registry";
                const EVENT: &'static str = "IdentityDissolved";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub mod types {
                use super::runtime_types;
                pub mod identity_of {
                    use super::runtime_types;
                    pub type IdentityOf =
                        runtime_types::pallet_registry::types::Registration<::core::primitive::u64>;
                    pub type Param0 = ::subxt::utils::AccountId32;
                }
            }
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " Identity data by account"]
                pub fn identity_of_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::identity_of::IdentityOf,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Registry",
                        "IdentityOf",
                        vec![],
                        [
                            234u8, 187u8, 56u8, 218u8, 135u8, 79u8, 50u8, 159u8, 20u8, 10u8, 131u8,
                            167u8, 135u8, 236u8, 19u8, 176u8, 113u8, 194u8, 115u8, 138u8, 0u8,
                            184u8, 178u8, 245u8, 255u8, 85u8, 51u8, 140u8, 11u8, 143u8, 218u8,
                            217u8,
                        ],
                    )
                }
                #[doc = " Identity data by account"]
                pub fn identity_of(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::identity_of::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::identity_of::IdentityOf,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Registry",
                        "IdentityOf",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            234u8, 187u8, 56u8, 218u8, 135u8, 79u8, 50u8, 159u8, 20u8, 10u8, 131u8,
                            167u8, 135u8, 236u8, 19u8, 176u8, 113u8, 194u8, 115u8, 138u8, 0u8,
                            184u8, 178u8, 245u8, 255u8, 85u8, 51u8, 140u8, 11u8, 143u8, 218u8,
                            217u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " Maximum user-configured additional fields"]
                pub fn max_additional_fields(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Registry",
                        "MaxAdditionalFields",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " The amount held on deposit for a registered identity"]
                pub fn initial_deposit(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u64> {
                    ::subxt::constants::Address::new_static(
                        "Registry",
                        "InitialDeposit",
                        [
                            128u8, 214u8, 205u8, 242u8, 181u8, 142u8, 124u8, 231u8, 190u8, 146u8,
                            59u8, 226u8, 157u8, 101u8, 103u8, 117u8, 249u8, 65u8, 18u8, 191u8,
                            103u8, 119u8, 53u8, 85u8, 81u8, 96u8, 220u8, 42u8, 184u8, 239u8, 42u8,
                            246u8,
                        ],
                    )
                }
                #[doc = " The amount held on deposit per additional field for a registered identity."]
                pub fn field_deposit(&self) -> ::subxt::constants::Address<::core::primitive::u64> {
                    ::subxt::constants::Address::new_static(
                        "Registry",
                        "FieldDeposit",
                        [
                            128u8, 214u8, 205u8, 242u8, 181u8, 142u8, 124u8, 231u8, 190u8, 146u8,
                            59u8, 226u8, 157u8, 101u8, 103u8, 117u8, 249u8, 65u8, 18u8, 191u8,
                            103u8, 119u8, 53u8, 85u8, 81u8, 96u8, 220u8, 42u8, 184u8, 239u8, 42u8,
                            246u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod commitments {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
        pub type Error = runtime_types::pallet_commitments::pallet::Error;
        #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
        pub type Call = runtime_types::pallet_commitments::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SetCommitment {
                    pub netuid: set_commitment::Netuid,
                    pub info: ::std::boxed::Box<set_commitment::Info>,
                }
                pub mod set_commitment {
                    use super::runtime_types;
                    pub type Netuid = ::core::primitive::u16;
                    pub type Info = runtime_types::pallet_commitments::types::CommitmentInfo;
                }
                impl ::subxt::blocks::StaticExtrinsic for SetCommitment {
                    const PALLET: &'static str = "Commitments";
                    const CALL: &'static str = "set_commitment";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                pub fn set_commitment(
                    &self,
                    netuid: types::set_commitment::Netuid,
                    info: types::set_commitment::Info,
                ) -> ::subxt::tx::Payload<types::SetCommitment> {
                    ::subxt::tx::Payload::new_static(
                        "Commitments",
                        "set_commitment",
                        types::SetCommitment {
                            netuid,
                            info: ::std::boxed::Box::new(info),
                        },
                        [
                            115u8, 251u8, 123u8, 54u8, 4u8, 188u8, 245u8, 126u8, 233u8, 212u8,
                            247u8, 160u8, 78u8, 123u8, 214u8, 81u8, 117u8, 89u8, 170u8, 52u8,
                            166u8, 61u8, 176u8, 33u8, 218u8, 194u8, 124u8, 46u8, 220u8, 191u8,
                            250u8, 134u8,
                        ],
                    )
                }
            }
        }
        #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
        pub type Event = runtime_types::pallet_commitments::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Commitment {
                pub netuid: commitment::Netuid,
                pub who: commitment::Who,
            }
            pub mod commitment {
                use super::runtime_types;
                pub type Netuid = ::core::primitive::u16;
                pub type Who = ::subxt::utils::AccountId32;
            }
            impl ::subxt::events::StaticEvent for Commitment {
                const PALLET: &'static str = "Commitments";
                const EVENT: &'static str = "Commitment";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub mod types {
                use super::runtime_types;
                pub mod commitment_of {
                    use super::runtime_types;
                    pub type CommitmentOf = runtime_types::pallet_commitments::types::Registration<
                        ::core::primitive::u64,
                        ::core::primitive::u32,
                    >;
                    pub type Param0 = ::core::primitive::u16;
                    pub type Param1 = ::subxt::utils::AccountId32;
                }
                pub mod last_commitment {
                    use super::runtime_types;
                    pub type LastCommitment = ::core::primitive::u32;
                    pub type Param0 = ::core::primitive::u16;
                    pub type Param1 = ::subxt::utils::AccountId32;
                }
            }
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " Identity data by account"]
                pub fn commitment_of_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::commitment_of::CommitmentOf,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Commitments",
                        "CommitmentOf",
                        vec![],
                        [
                            49u8, 73u8, 122u8, 216u8, 70u8, 131u8, 56u8, 160u8, 154u8, 67u8, 48u8,
                            46u8, 177u8, 187u8, 117u8, 166u8, 51u8, 158u8, 63u8, 233u8, 1u8, 120u8,
                            7u8, 95u8, 66u8, 11u8, 139u8, 157u8, 180u8, 194u8, 63u8, 36u8,
                        ],
                    )
                }
                #[doc = " Identity data by account"]
                pub fn commitment_of_iter1(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::commitment_of::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::commitment_of::CommitmentOf,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Commitments",
                        "CommitmentOf",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            49u8, 73u8, 122u8, 216u8, 70u8, 131u8, 56u8, 160u8, 154u8, 67u8, 48u8,
                            46u8, 177u8, 187u8, 117u8, 166u8, 51u8, 158u8, 63u8, 233u8, 1u8, 120u8,
                            7u8, 95u8, 66u8, 11u8, 139u8, 157u8, 180u8, 194u8, 63u8, 36u8,
                        ],
                    )
                }
                #[doc = " Identity data by account"]
                pub fn commitment_of(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::commitment_of::Param0>,
                    _1: impl ::std::borrow::Borrow<types::commitment_of::Param1>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::commitment_of::CommitmentOf,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Commitments",
                        "CommitmentOf",
                        vec![
                            ::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
                            ::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
                        ],
                        [
                            49u8, 73u8, 122u8, 216u8, 70u8, 131u8, 56u8, 160u8, 154u8, 67u8, 48u8,
                            46u8, 177u8, 187u8, 117u8, 166u8, 51u8, 158u8, 63u8, 233u8, 1u8, 120u8,
                            7u8, 95u8, 66u8, 11u8, 139u8, 157u8, 180u8, 194u8, 63u8, 36u8,
                        ],
                    )
                }
                pub fn last_commitment_iter(
                    &self,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::last_commitment::LastCommitment,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Commitments",
                        "LastCommitment",
                        vec![],
                        [
                            139u8, 18u8, 67u8, 3u8, 183u8, 236u8, 230u8, 168u8, 162u8, 27u8, 124u8,
                            208u8, 80u8, 59u8, 115u8, 168u8, 19u8, 84u8, 100u8, 234u8, 21u8, 52u8,
                            48u8, 87u8, 226u8, 158u8, 211u8, 215u8, 177u8, 207u8, 202u8, 69u8,
                        ],
                    )
                }
                pub fn last_commitment_iter1(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::last_commitment::Param0>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::last_commitment::LastCommitment,
                    (),
                    (),
                    ::subxt::storage::address::Yes,
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Commitments",
                        "LastCommitment",
                        vec![::subxt::storage::address::make_static_storage_map_key(
                            _0.borrow(),
                        )],
                        [
                            139u8, 18u8, 67u8, 3u8, 183u8, 236u8, 230u8, 168u8, 162u8, 27u8, 124u8,
                            208u8, 80u8, 59u8, 115u8, 168u8, 19u8, 84u8, 100u8, 234u8, 21u8, 52u8,
                            48u8, 87u8, 226u8, 158u8, 211u8, 215u8, 177u8, 207u8, 202u8, 69u8,
                        ],
                    )
                }
                pub fn last_commitment(
                    &self,
                    _0: impl ::std::borrow::Borrow<types::last_commitment::Param0>,
                    _1: impl ::std::borrow::Borrow<types::last_commitment::Param1>,
                ) -> ::subxt::storage::address::Address<
                    ::subxt::storage::address::StaticStorageMapKey,
                    types::last_commitment::LastCommitment,
                    ::subxt::storage::address::Yes,
                    (),
                    (),
                > {
                    ::subxt::storage::address::Address::new_static(
                        "Commitments",
                        "LastCommitment",
                        vec![
                            ::subxt::storage::address::make_static_storage_map_key(_0.borrow()),
                            ::subxt::storage::address::make_static_storage_map_key(_1.borrow()),
                        ],
                        [
                            139u8, 18u8, 67u8, 3u8, 183u8, 236u8, 230u8, 168u8, 162u8, 27u8, 124u8,
                            208u8, 80u8, 59u8, 115u8, 168u8, 19u8, 84u8, 100u8, 234u8, 21u8, 52u8,
                            48u8, 87u8, 226u8, 158u8, 211u8, 215u8, 177u8, 207u8, 202u8, 69u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                pub fn max_fields(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Commitments",
                        "MaxFields",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " The amount held on deposit for a registered identity"]
                pub fn initial_deposit(
                    &self,
                ) -> ::subxt::constants::Address<::core::primitive::u64> {
                    ::subxt::constants::Address::new_static(
                        "Commitments",
                        "InitialDeposit",
                        [
                            128u8, 214u8, 205u8, 242u8, 181u8, 142u8, 124u8, 231u8, 190u8, 146u8,
                            59u8, 226u8, 157u8, 101u8, 103u8, 117u8, 249u8, 65u8, 18u8, 191u8,
                            103u8, 119u8, 53u8, 85u8, 81u8, 96u8, 220u8, 42u8, 184u8, 239u8, 42u8,
                            246u8,
                        ],
                    )
                }
                #[doc = " The amount held on deposit per additional field for a registered identity."]
                pub fn field_deposit(&self) -> ::subxt::constants::Address<::core::primitive::u64> {
                    ::subxt::constants::Address::new_static(
                        "Commitments",
                        "FieldDeposit",
                        [
                            128u8, 214u8, 205u8, 242u8, 181u8, 142u8, 124u8, 231u8, 190u8, 146u8,
                            59u8, 226u8, 157u8, 101u8, 103u8, 117u8, 249u8, 65u8, 18u8, 191u8,
                            103u8, 119u8, 53u8, 85u8, 81u8, 96u8, 220u8, 42u8, 184u8, 239u8, 42u8,
                            246u8,
                        ],
                    )
                }
                pub fn rate_limit(&self) -> ::subxt::constants::Address<::core::primitive::u32> {
                    ::subxt::constants::Address::new_static(
                        "Commitments",
                        "RateLimit",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod admin_utils {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
        pub type Error = runtime_types::pallet_admin_utils::pallet::Error;
        #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
        pub type Call = runtime_types::pallet_admin_utils::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SwapAuthorities {
                    pub new_authorities: swap_authorities::NewAuthorities,
                }
                pub mod swap_authorities {
                    use super::runtime_types;
                    pub type NewAuthorities =
                        runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            runtime_types::sp_consensus_aura::sr25519::app_sr25519::Public,
                        >;
                }
                impl ::subxt::blocks::StaticExtrinsic for SwapAuthorities {
                    const PALLET: &'static str = "AdminUtils";
                    const CALL: &'static str = "swap_authorities";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SudoSetDefaultTake {
                    pub default_take: sudo_set_default_take::DefaultTake,
                }
                pub mod sudo_set_default_take {
                    use super::runtime_types;
                    pub type DefaultTake = ::core::primitive::u16;
                }
                impl ::subxt::blocks::StaticExtrinsic for SudoSetDefaultTake {
                    const PALLET: &'static str = "AdminUtils";
                    const CALL: &'static str = "sudo_set_default_take";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SudoSetTxRateLimit {
                    pub tx_rate_limit: sudo_set_tx_rate_limit::TxRateLimit,
                }
                pub mod sudo_set_tx_rate_limit {
                    use super::runtime_types;
                    pub type TxRateLimit = ::core::primitive::u64;
                }
                impl ::subxt::blocks::StaticExtrinsic for SudoSetTxRateLimit {
                    const PALLET: &'static str = "AdminUtils";
                    const CALL: &'static str = "sudo_set_tx_rate_limit";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SudoSetServingRateLimit {
                    pub netuid: sudo_set_serving_rate_limit::Netuid,
                    pub serving_rate_limit: sudo_set_serving_rate_limit::ServingRateLimit,
                }
                pub mod sudo_set_serving_rate_limit {
                    use super::runtime_types;
                    pub type Netuid = ::core::primitive::u16;
                    pub type ServingRateLimit = ::core::primitive::u64;
                }
                impl ::subxt::blocks::StaticExtrinsic for SudoSetServingRateLimit {
                    const PALLET: &'static str = "AdminUtils";
                    const CALL: &'static str = "sudo_set_serving_rate_limit";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SudoSetMinDifficulty {
                    pub netuid: sudo_set_min_difficulty::Netuid,
                    pub min_difficulty: sudo_set_min_difficulty::MinDifficulty,
                }
                pub mod sudo_set_min_difficulty {
                    use super::runtime_types;
                    pub type Netuid = ::core::primitive::u16;
                    pub type MinDifficulty = ::core::primitive::u64;
                }
                impl ::subxt::blocks::StaticExtrinsic for SudoSetMinDifficulty {
                    const PALLET: &'static str = "AdminUtils";
                    const CALL: &'static str = "sudo_set_min_difficulty";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SudoSetMaxDifficulty {
                    pub netuid: sudo_set_max_difficulty::Netuid,
                    pub max_difficulty: sudo_set_max_difficulty::MaxDifficulty,
                }
                pub mod sudo_set_max_difficulty {
                    use super::runtime_types;
                    pub type Netuid = ::core::primitive::u16;
                    pub type MaxDifficulty = ::core::primitive::u64;
                }
                impl ::subxt::blocks::StaticExtrinsic for SudoSetMaxDifficulty {
                    const PALLET: &'static str = "AdminUtils";
                    const CALL: &'static str = "sudo_set_max_difficulty";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SudoSetWeightsVersionKey {
                    pub netuid: sudo_set_weights_version_key::Netuid,
                    pub weights_version_key: sudo_set_weights_version_key::WeightsVersionKey,
                }
                pub mod sudo_set_weights_version_key {
                    use super::runtime_types;
                    pub type Netuid = ::core::primitive::u16;
                    pub type WeightsVersionKey = ::core::primitive::u64;
                }
                impl ::subxt::blocks::StaticExtrinsic for SudoSetWeightsVersionKey {
                    const PALLET: &'static str = "AdminUtils";
                    const CALL: &'static str = "sudo_set_weights_version_key";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SudoSetWeightsSetRateLimit {
                    pub netuid: sudo_set_weights_set_rate_limit::Netuid,
                    pub weights_set_rate_limit:
                        sudo_set_weights_set_rate_limit::WeightsSetRateLimit,
                }
                pub mod sudo_set_weights_set_rate_limit {
                    use super::runtime_types;
                    pub type Netuid = ::core::primitive::u16;
                    pub type WeightsSetRateLimit = ::core::primitive::u64;
                }
                impl ::subxt::blocks::StaticExtrinsic for SudoSetWeightsSetRateLimit {
                    const PALLET: &'static str = "AdminUtils";
                    const CALL: &'static str = "sudo_set_weights_set_rate_limit";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SudoSetAdjustmentInterval {
                    pub netuid: sudo_set_adjustment_interval::Netuid,
                    pub adjustment_interval: sudo_set_adjustment_interval::AdjustmentInterval,
                }
                pub mod sudo_set_adjustment_interval {
                    use super::runtime_types;
                    pub type Netuid = ::core::primitive::u16;
                    pub type AdjustmentInterval = ::core::primitive::u16;
                }
                impl ::subxt::blocks::StaticExtrinsic for SudoSetAdjustmentInterval {
                    const PALLET: &'static str = "AdminUtils";
                    const CALL: &'static str = "sudo_set_adjustment_interval";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SudoSetAdjustmentAlpha {
                    pub netuid: sudo_set_adjustment_alpha::Netuid,
                    pub adjustment_alpha: sudo_set_adjustment_alpha::AdjustmentAlpha,
                }
                pub mod sudo_set_adjustment_alpha {
                    use super::runtime_types;
                    pub type Netuid = ::core::primitive::u16;
                    pub type AdjustmentAlpha = ::core::primitive::u64;
                }
                impl ::subxt::blocks::StaticExtrinsic for SudoSetAdjustmentAlpha {
                    const PALLET: &'static str = "AdminUtils";
                    const CALL: &'static str = "sudo_set_adjustment_alpha";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SudoSetMaxWeightLimit {
                    pub netuid: sudo_set_max_weight_limit::Netuid,
                    pub max_weight_limit: sudo_set_max_weight_limit::MaxWeightLimit,
                }
                pub mod sudo_set_max_weight_limit {
                    use super::runtime_types;
                    pub type Netuid = ::core::primitive::u16;
                    pub type MaxWeightLimit = ::core::primitive::u16;
                }
                impl ::subxt::blocks::StaticExtrinsic for SudoSetMaxWeightLimit {
                    const PALLET: &'static str = "AdminUtils";
                    const CALL: &'static str = "sudo_set_max_weight_limit";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SudoSetImmunityPeriod {
                    pub netuid: sudo_set_immunity_period::Netuid,
                    pub immunity_period: sudo_set_immunity_period::ImmunityPeriod,
                }
                pub mod sudo_set_immunity_period {
                    use super::runtime_types;
                    pub type Netuid = ::core::primitive::u16;
                    pub type ImmunityPeriod = ::core::primitive::u16;
                }
                impl ::subxt::blocks::StaticExtrinsic for SudoSetImmunityPeriod {
                    const PALLET: &'static str = "AdminUtils";
                    const CALL: &'static str = "sudo_set_immunity_period";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SudoSetMinAllowedWeights {
                    pub netuid: sudo_set_min_allowed_weights::Netuid,
                    pub min_allowed_weights: sudo_set_min_allowed_weights::MinAllowedWeights,
                }
                pub mod sudo_set_min_allowed_weights {
                    use super::runtime_types;
                    pub type Netuid = ::core::primitive::u16;
                    pub type MinAllowedWeights = ::core::primitive::u16;
                }
                impl ::subxt::blocks::StaticExtrinsic for SudoSetMinAllowedWeights {
                    const PALLET: &'static str = "AdminUtils";
                    const CALL: &'static str = "sudo_set_min_allowed_weights";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SudoSetMaxAllowedUids {
                    pub netuid: sudo_set_max_allowed_uids::Netuid,
                    pub max_allowed_uids: sudo_set_max_allowed_uids::MaxAllowedUids,
                }
                pub mod sudo_set_max_allowed_uids {
                    use super::runtime_types;
                    pub type Netuid = ::core::primitive::u16;
                    pub type MaxAllowedUids = ::core::primitive::u16;
                }
                impl ::subxt::blocks::StaticExtrinsic for SudoSetMaxAllowedUids {
                    const PALLET: &'static str = "AdminUtils";
                    const CALL: &'static str = "sudo_set_max_allowed_uids";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SudoSetKappa {
                    pub netuid: sudo_set_kappa::Netuid,
                    pub kappa: sudo_set_kappa::Kappa,
                }
                pub mod sudo_set_kappa {
                    use super::runtime_types;
                    pub type Netuid = ::core::primitive::u16;
                    pub type Kappa = ::core::primitive::u16;
                }
                impl ::subxt::blocks::StaticExtrinsic for SudoSetKappa {
                    const PALLET: &'static str = "AdminUtils";
                    const CALL: &'static str = "sudo_set_kappa";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SudoSetRho {
                    pub netuid: sudo_set_rho::Netuid,
                    pub rho: sudo_set_rho::Rho,
                }
                pub mod sudo_set_rho {
                    use super::runtime_types;
                    pub type Netuid = ::core::primitive::u16;
                    pub type Rho = ::core::primitive::u16;
                }
                impl ::subxt::blocks::StaticExtrinsic for SudoSetRho {
                    const PALLET: &'static str = "AdminUtils";
                    const CALL: &'static str = "sudo_set_rho";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SudoSetActivityCutoff {
                    pub netuid: sudo_set_activity_cutoff::Netuid,
                    pub activity_cutoff: sudo_set_activity_cutoff::ActivityCutoff,
                }
                pub mod sudo_set_activity_cutoff {
                    use super::runtime_types;
                    pub type Netuid = ::core::primitive::u16;
                    pub type ActivityCutoff = ::core::primitive::u16;
                }
                impl ::subxt::blocks::StaticExtrinsic for SudoSetActivityCutoff {
                    const PALLET: &'static str = "AdminUtils";
                    const CALL: &'static str = "sudo_set_activity_cutoff";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SudoSetNetworkRegistrationAllowed {
                    pub netuid: sudo_set_network_registration_allowed::Netuid,
                    pub registration_allowed:
                        sudo_set_network_registration_allowed::RegistrationAllowed,
                }
                pub mod sudo_set_network_registration_allowed {
                    use super::runtime_types;
                    pub type Netuid = ::core::primitive::u16;
                    pub type RegistrationAllowed = ::core::primitive::bool;
                }
                impl ::subxt::blocks::StaticExtrinsic for SudoSetNetworkRegistrationAllowed {
                    const PALLET: &'static str = "AdminUtils";
                    const CALL: &'static str = "sudo_set_network_registration_allowed";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SudoSetNetworkPowRegistrationAllowed {
                    pub netuid: sudo_set_network_pow_registration_allowed::Netuid,
                    pub registration_allowed:
                        sudo_set_network_pow_registration_allowed::RegistrationAllowed,
                }
                pub mod sudo_set_network_pow_registration_allowed {
                    use super::runtime_types;
                    pub type Netuid = ::core::primitive::u16;
                    pub type RegistrationAllowed = ::core::primitive::bool;
                }
                impl ::subxt::blocks::StaticExtrinsic for SudoSetNetworkPowRegistrationAllowed {
                    const PALLET: &'static str = "AdminUtils";
                    const CALL: &'static str = "sudo_set_network_pow_registration_allowed";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SudoSetTargetRegistrationsPerInterval {
                    pub netuid: sudo_set_target_registrations_per_interval::Netuid,
                    pub target_registrations_per_interval:
                        sudo_set_target_registrations_per_interval::TargetRegistrationsPerInterval,
                }
                pub mod sudo_set_target_registrations_per_interval {
                    use super::runtime_types;
                    pub type Netuid = ::core::primitive::u16;
                    pub type TargetRegistrationsPerInterval = ::core::primitive::u16;
                }
                impl ::subxt::blocks::StaticExtrinsic for SudoSetTargetRegistrationsPerInterval {
                    const PALLET: &'static str = "AdminUtils";
                    const CALL: &'static str = "sudo_set_target_registrations_per_interval";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SudoSetMinBurn {
                    pub netuid: sudo_set_min_burn::Netuid,
                    pub min_burn: sudo_set_min_burn::MinBurn,
                }
                pub mod sudo_set_min_burn {
                    use super::runtime_types;
                    pub type Netuid = ::core::primitive::u16;
                    pub type MinBurn = ::core::primitive::u64;
                }
                impl ::subxt::blocks::StaticExtrinsic for SudoSetMinBurn {
                    const PALLET: &'static str = "AdminUtils";
                    const CALL: &'static str = "sudo_set_min_burn";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SudoSetMaxBurn {
                    pub netuid: sudo_set_max_burn::Netuid,
                    pub max_burn: sudo_set_max_burn::MaxBurn,
                }
                pub mod sudo_set_max_burn {
                    use super::runtime_types;
                    pub type Netuid = ::core::primitive::u16;
                    pub type MaxBurn = ::core::primitive::u64;
                }
                impl ::subxt::blocks::StaticExtrinsic for SudoSetMaxBurn {
                    const PALLET: &'static str = "AdminUtils";
                    const CALL: &'static str = "sudo_set_max_burn";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SudoSetDifficulty {
                    pub netuid: sudo_set_difficulty::Netuid,
                    pub difficulty: sudo_set_difficulty::Difficulty,
                }
                pub mod sudo_set_difficulty {
                    use super::runtime_types;
                    pub type Netuid = ::core::primitive::u16;
                    pub type Difficulty = ::core::primitive::u64;
                }
                impl ::subxt::blocks::StaticExtrinsic for SudoSetDifficulty {
                    const PALLET: &'static str = "AdminUtils";
                    const CALL: &'static str = "sudo_set_difficulty";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SudoSetMaxAllowedValidators {
                    pub netuid: sudo_set_max_allowed_validators::Netuid,
                    pub max_allowed_validators:
                        sudo_set_max_allowed_validators::MaxAllowedValidators,
                }
                pub mod sudo_set_max_allowed_validators {
                    use super::runtime_types;
                    pub type Netuid = ::core::primitive::u16;
                    pub type MaxAllowedValidators = ::core::primitive::u16;
                }
                impl ::subxt::blocks::StaticExtrinsic for SudoSetMaxAllowedValidators {
                    const PALLET: &'static str = "AdminUtils";
                    const CALL: &'static str = "sudo_set_max_allowed_validators";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SudoSetBondsMovingAverage {
                    pub netuid: sudo_set_bonds_moving_average::Netuid,
                    pub bonds_moving_average: sudo_set_bonds_moving_average::BondsMovingAverage,
                }
                pub mod sudo_set_bonds_moving_average {
                    use super::runtime_types;
                    pub type Netuid = ::core::primitive::u16;
                    pub type BondsMovingAverage = ::core::primitive::u64;
                }
                impl ::subxt::blocks::StaticExtrinsic for SudoSetBondsMovingAverage {
                    const PALLET: &'static str = "AdminUtils";
                    const CALL: &'static str = "sudo_set_bonds_moving_average";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SudoSetMaxRegistrationsPerBlock {
                    pub netuid: sudo_set_max_registrations_per_block::Netuid,
                    pub max_registrations_per_block:
                        sudo_set_max_registrations_per_block::MaxRegistrationsPerBlock,
                }
                pub mod sudo_set_max_registrations_per_block {
                    use super::runtime_types;
                    pub type Netuid = ::core::primitive::u16;
                    pub type MaxRegistrationsPerBlock = ::core::primitive::u16;
                }
                impl ::subxt::blocks::StaticExtrinsic for SudoSetMaxRegistrationsPerBlock {
                    const PALLET: &'static str = "AdminUtils";
                    const CALL: &'static str = "sudo_set_max_registrations_per_block";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SudoSetSubnetOwnerCut {
                    pub subnet_owner_cut: sudo_set_subnet_owner_cut::SubnetOwnerCut,
                }
                pub mod sudo_set_subnet_owner_cut {
                    use super::runtime_types;
                    pub type SubnetOwnerCut = ::core::primitive::u16;
                }
                impl ::subxt::blocks::StaticExtrinsic for SudoSetSubnetOwnerCut {
                    const PALLET: &'static str = "AdminUtils";
                    const CALL: &'static str = "sudo_set_subnet_owner_cut";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SudoSetNetworkRateLimit {
                    pub rate_limit: sudo_set_network_rate_limit::RateLimit,
                }
                pub mod sudo_set_network_rate_limit {
                    use super::runtime_types;
                    pub type RateLimit = ::core::primitive::u64;
                }
                impl ::subxt::blocks::StaticExtrinsic for SudoSetNetworkRateLimit {
                    const PALLET: &'static str = "AdminUtils";
                    const CALL: &'static str = "sudo_set_network_rate_limit";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SudoSetTempo {
                    pub netuid: sudo_set_tempo::Netuid,
                    pub tempo: sudo_set_tempo::Tempo,
                }
                pub mod sudo_set_tempo {
                    use super::runtime_types;
                    pub type Netuid = ::core::primitive::u16;
                    pub type Tempo = ::core::primitive::u16;
                }
                impl ::subxt::blocks::StaticExtrinsic for SudoSetTempo {
                    const PALLET: &'static str = "AdminUtils";
                    const CALL: &'static str = "sudo_set_tempo";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SudoSetTotalIssuance {
                    pub total_issuance: sudo_set_total_issuance::TotalIssuance,
                }
                pub mod sudo_set_total_issuance {
                    use super::runtime_types;
                    pub type TotalIssuance = ::core::primitive::u64;
                }
                impl ::subxt::blocks::StaticExtrinsic for SudoSetTotalIssuance {
                    const PALLET: &'static str = "AdminUtils";
                    const CALL: &'static str = "sudo_set_total_issuance";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SudoSetNetworkImmunityPeriod {
                    pub immunity_period: sudo_set_network_immunity_period::ImmunityPeriod,
                }
                pub mod sudo_set_network_immunity_period {
                    use super::runtime_types;
                    pub type ImmunityPeriod = ::core::primitive::u64;
                }
                impl ::subxt::blocks::StaticExtrinsic for SudoSetNetworkImmunityPeriod {
                    const PALLET: &'static str = "AdminUtils";
                    const CALL: &'static str = "sudo_set_network_immunity_period";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SudoSetNetworkMinLockCost {
                    pub lock_cost: sudo_set_network_min_lock_cost::LockCost,
                }
                pub mod sudo_set_network_min_lock_cost {
                    use super::runtime_types;
                    pub type LockCost = ::core::primitive::u64;
                }
                impl ::subxt::blocks::StaticExtrinsic for SudoSetNetworkMinLockCost {
                    const PALLET: &'static str = "AdminUtils";
                    const CALL: &'static str = "sudo_set_network_min_lock_cost";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SudoSetSubnetLimit {
                    pub max_subnets: sudo_set_subnet_limit::MaxSubnets,
                }
                pub mod sudo_set_subnet_limit {
                    use super::runtime_types;
                    pub type MaxSubnets = ::core::primitive::u16;
                }
                impl ::subxt::blocks::StaticExtrinsic for SudoSetSubnetLimit {
                    const PALLET: &'static str = "AdminUtils";
                    const CALL: &'static str = "sudo_set_subnet_limit";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SudoSetLockReductionInterval {
                    pub interval: sudo_set_lock_reduction_interval::Interval,
                }
                pub mod sudo_set_lock_reduction_interval {
                    use super::runtime_types;
                    pub type Interval = ::core::primitive::u64;
                }
                impl ::subxt::blocks::StaticExtrinsic for SudoSetLockReductionInterval {
                    const PALLET: &'static str = "AdminUtils";
                    const CALL: &'static str = "sudo_set_lock_reduction_interval";
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct SudoSetRaoRecycled {
                    pub netuid: sudo_set_rao_recycled::Netuid,
                    pub rao_recycled: sudo_set_rao_recycled::RaoRecycled,
                }
                pub mod sudo_set_rao_recycled {
                    use super::runtime_types;
                    pub type Netuid = ::core::primitive::u16;
                    pub type RaoRecycled = ::core::primitive::u64;
                }
                impl ::subxt::blocks::StaticExtrinsic for SudoSetRaoRecycled {
                    const PALLET: &'static str = "AdminUtils";
                    const CALL: &'static str = "sudo_set_rao_recycled";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                pub fn swap_authorities(
                    &self,
                    new_authorities: types::swap_authorities::NewAuthorities,
                ) -> ::subxt::tx::Payload<types::SwapAuthorities> {
                    ::subxt::tx::Payload::new_static(
                        "AdminUtils",
                        "swap_authorities",
                        types::SwapAuthorities { new_authorities },
                        [
                            199u8, 178u8, 9u8, 136u8, 102u8, 146u8, 81u8, 135u8, 244u8, 216u8,
                            73u8, 160u8, 96u8, 139u8, 109u8, 82u8, 27u8, 97u8, 233u8, 104u8, 130u8,
                            3u8, 66u8, 251u8, 22u8, 177u8, 125u8, 237u8, 247u8, 135u8, 168u8,
                            188u8,
                        ],
                    )
                }
                pub fn sudo_set_default_take(
                    &self,
                    default_take: types::sudo_set_default_take::DefaultTake,
                ) -> ::subxt::tx::Payload<types::SudoSetDefaultTake> {
                    ::subxt::tx::Payload::new_static(
                        "AdminUtils",
                        "sudo_set_default_take",
                        types::SudoSetDefaultTake { default_take },
                        [
                            20u8, 46u8, 121u8, 192u8, 232u8, 72u8, 1u8, 150u8, 114u8, 185u8, 165u8,
                            156u8, 92u8, 214u8, 142u8, 98u8, 119u8, 133u8, 26u8, 226u8, 76u8,
                            209u8, 95u8, 186u8, 147u8, 191u8, 164u8, 248u8, 6u8, 65u8, 64u8, 191u8,
                        ],
                    )
                }
                pub fn sudo_set_tx_rate_limit(
                    &self,
                    tx_rate_limit: types::sudo_set_tx_rate_limit::TxRateLimit,
                ) -> ::subxt::tx::Payload<types::SudoSetTxRateLimit> {
                    ::subxt::tx::Payload::new_static(
                        "AdminUtils",
                        "sudo_set_tx_rate_limit",
                        types::SudoSetTxRateLimit { tx_rate_limit },
                        [
                            199u8, 37u8, 33u8, 84u8, 249u8, 149u8, 136u8, 131u8, 137u8, 100u8,
                            230u8, 52u8, 9u8, 112u8, 245u8, 250u8, 51u8, 181u8, 76u8, 192u8, 150u8,
                            249u8, 128u8, 232u8, 52u8, 41u8, 177u8, 114u8, 8u8, 44u8, 255u8, 119u8,
                        ],
                    )
                }
                pub fn sudo_set_serving_rate_limit(
                    &self,
                    netuid: types::sudo_set_serving_rate_limit::Netuid,
                    serving_rate_limit: types::sudo_set_serving_rate_limit::ServingRateLimit,
                ) -> ::subxt::tx::Payload<types::SudoSetServingRateLimit> {
                    ::subxt::tx::Payload::new_static(
                        "AdminUtils",
                        "sudo_set_serving_rate_limit",
                        types::SudoSetServingRateLimit {
                            netuid,
                            serving_rate_limit,
                        },
                        [
                            29u8, 43u8, 79u8, 187u8, 65u8, 190u8, 80u8, 41u8, 51u8, 255u8, 205u8,
                            47u8, 189u8, 13u8, 45u8, 255u8, 79u8, 95u8, 48u8, 153u8, 218u8, 18u8,
                            241u8, 248u8, 37u8, 94u8, 29u8, 229u8, 130u8, 34u8, 253u8, 125u8,
                        ],
                    )
                }
                pub fn sudo_set_min_difficulty(
                    &self,
                    netuid: types::sudo_set_min_difficulty::Netuid,
                    min_difficulty: types::sudo_set_min_difficulty::MinDifficulty,
                ) -> ::subxt::tx::Payload<types::SudoSetMinDifficulty> {
                    ::subxt::tx::Payload::new_static(
                        "AdminUtils",
                        "sudo_set_min_difficulty",
                        types::SudoSetMinDifficulty {
                            netuid,
                            min_difficulty,
                        },
                        [
                            36u8, 75u8, 246u8, 131u8, 174u8, 93u8, 25u8, 154u8, 144u8, 125u8, 6u8,
                            202u8, 103u8, 77u8, 88u8, 189u8, 148u8, 125u8, 184u8, 103u8, 96u8,
                            147u8, 96u8, 203u8, 109u8, 122u8, 21u8, 164u8, 46u8, 51u8, 234u8, 3u8,
                        ],
                    )
                }
                pub fn sudo_set_max_difficulty(
                    &self,
                    netuid: types::sudo_set_max_difficulty::Netuid,
                    max_difficulty: types::sudo_set_max_difficulty::MaxDifficulty,
                ) -> ::subxt::tx::Payload<types::SudoSetMaxDifficulty> {
                    ::subxt::tx::Payload::new_static(
                        "AdminUtils",
                        "sudo_set_max_difficulty",
                        types::SudoSetMaxDifficulty {
                            netuid,
                            max_difficulty,
                        },
                        [
                            247u8, 167u8, 239u8, 82u8, 41u8, 50u8, 244u8, 3u8, 94u8, 66u8, 187u8,
                            44u8, 6u8, 115u8, 161u8, 197u8, 185u8, 146u8, 196u8, 175u8, 232u8,
                            42u8, 231u8, 226u8, 9u8, 40u8, 115u8, 35u8, 40u8, 59u8, 227u8, 159u8,
                        ],
                    )
                }
                pub fn sudo_set_weights_version_key(
                    &self,
                    netuid: types::sudo_set_weights_version_key::Netuid,
                    weights_version_key: types::sudo_set_weights_version_key::WeightsVersionKey,
                ) -> ::subxt::tx::Payload<types::SudoSetWeightsVersionKey> {
                    ::subxt::tx::Payload::new_static(
                        "AdminUtils",
                        "sudo_set_weights_version_key",
                        types::SudoSetWeightsVersionKey {
                            netuid,
                            weights_version_key,
                        },
                        [
                            111u8, 223u8, 231u8, 18u8, 142u8, 144u8, 186u8, 87u8, 183u8, 92u8,
                            12u8, 151u8, 204u8, 11u8, 53u8, 135u8, 9u8, 167u8, 135u8, 172u8, 232u8,
                            136u8, 103u8, 248u8, 178u8, 207u8, 40u8, 169u8, 191u8, 22u8, 177u8,
                            193u8,
                        ],
                    )
                }
                pub fn sudo_set_weights_set_rate_limit(
                    &self,
                    netuid: types::sudo_set_weights_set_rate_limit::Netuid,
                    weights_set_rate_limit : types :: sudo_set_weights_set_rate_limit :: WeightsSetRateLimit,
                ) -> ::subxt::tx::Payload<types::SudoSetWeightsSetRateLimit> {
                    ::subxt::tx::Payload::new_static(
                        "AdminUtils",
                        "sudo_set_weights_set_rate_limit",
                        types::SudoSetWeightsSetRateLimit {
                            netuid,
                            weights_set_rate_limit,
                        },
                        [
                            208u8, 189u8, 207u8, 207u8, 173u8, 44u8, 136u8, 125u8, 108u8, 147u8,
                            240u8, 45u8, 159u8, 129u8, 162u8, 87u8, 204u8, 248u8, 79u8, 14u8, 34u8,
                            193u8, 72u8, 119u8, 154u8, 32u8, 63u8, 123u8, 48u8, 10u8, 107u8, 16u8,
                        ],
                    )
                }
                pub fn sudo_set_adjustment_interval(
                    &self,
                    netuid: types::sudo_set_adjustment_interval::Netuid,
                    adjustment_interval: types::sudo_set_adjustment_interval::AdjustmentInterval,
                ) -> ::subxt::tx::Payload<types::SudoSetAdjustmentInterval> {
                    ::subxt::tx::Payload::new_static(
                        "AdminUtils",
                        "sudo_set_adjustment_interval",
                        types::SudoSetAdjustmentInterval {
                            netuid,
                            adjustment_interval,
                        },
                        [
                            167u8, 14u8, 61u8, 114u8, 173u8, 242u8, 209u8, 221u8, 233u8, 144u8,
                            106u8, 175u8, 105u8, 46u8, 242u8, 178u8, 48u8, 55u8, 136u8, 173u8,
                            161u8, 115u8, 6u8, 87u8, 124u8, 213u8, 101u8, 112u8, 233u8, 120u8,
                            130u8, 47u8,
                        ],
                    )
                }
                pub fn sudo_set_adjustment_alpha(
                    &self,
                    netuid: types::sudo_set_adjustment_alpha::Netuid,
                    adjustment_alpha: types::sudo_set_adjustment_alpha::AdjustmentAlpha,
                ) -> ::subxt::tx::Payload<types::SudoSetAdjustmentAlpha> {
                    ::subxt::tx::Payload::new_static(
                        "AdminUtils",
                        "sudo_set_adjustment_alpha",
                        types::SudoSetAdjustmentAlpha {
                            netuid,
                            adjustment_alpha,
                        },
                        [
                            84u8, 151u8, 85u8, 94u8, 49u8, 2u8, 238u8, 226u8, 27u8, 139u8, 122u8,
                            25u8, 175u8, 162u8, 163u8, 251u8, 17u8, 50u8, 117u8, 85u8, 201u8,
                            174u8, 235u8, 135u8, 174u8, 106u8, 239u8, 209u8, 120u8, 114u8, 217u8,
                            214u8,
                        ],
                    )
                }
                pub fn sudo_set_max_weight_limit(
                    &self,
                    netuid: types::sudo_set_max_weight_limit::Netuid,
                    max_weight_limit: types::sudo_set_max_weight_limit::MaxWeightLimit,
                ) -> ::subxt::tx::Payload<types::SudoSetMaxWeightLimit> {
                    ::subxt::tx::Payload::new_static(
                        "AdminUtils",
                        "sudo_set_max_weight_limit",
                        types::SudoSetMaxWeightLimit {
                            netuid,
                            max_weight_limit,
                        },
                        [
                            120u8, 54u8, 253u8, 8u8, 133u8, 139u8, 51u8, 116u8, 60u8, 173u8, 44u8,
                            25u8, 146u8, 181u8, 12u8, 14u8, 196u8, 118u8, 180u8, 229u8, 57u8,
                            133u8, 198u8, 219u8, 97u8, 189u8, 116u8, 183u8, 154u8, 128u8, 15u8,
                            177u8,
                        ],
                    )
                }
                pub fn sudo_set_immunity_period(
                    &self,
                    netuid: types::sudo_set_immunity_period::Netuid,
                    immunity_period: types::sudo_set_immunity_period::ImmunityPeriod,
                ) -> ::subxt::tx::Payload<types::SudoSetImmunityPeriod> {
                    ::subxt::tx::Payload::new_static(
                        "AdminUtils",
                        "sudo_set_immunity_period",
                        types::SudoSetImmunityPeriod {
                            netuid,
                            immunity_period,
                        },
                        [
                            128u8, 74u8, 247u8, 44u8, 254u8, 25u8, 45u8, 123u8, 171u8, 72u8, 81u8,
                            82u8, 174u8, 105u8, 181u8, 91u8, 175u8, 51u8, 107u8, 222u8, 11u8, 25u8,
                            9u8, 226u8, 4u8, 32u8, 49u8, 63u8, 59u8, 32u8, 9u8, 189u8,
                        ],
                    )
                }
                pub fn sudo_set_min_allowed_weights(
                    &self,
                    netuid: types::sudo_set_min_allowed_weights::Netuid,
                    min_allowed_weights: types::sudo_set_min_allowed_weights::MinAllowedWeights,
                ) -> ::subxt::tx::Payload<types::SudoSetMinAllowedWeights> {
                    ::subxt::tx::Payload::new_static(
                        "AdminUtils",
                        "sudo_set_min_allowed_weights",
                        types::SudoSetMinAllowedWeights {
                            netuid,
                            min_allowed_weights,
                        },
                        [
                            27u8, 73u8, 15u8, 199u8, 177u8, 128u8, 254u8, 102u8, 28u8, 132u8, 47u8,
                            244u8, 20u8, 57u8, 7u8, 7u8, 209u8, 19u8, 130u8, 178u8, 40u8, 130u8,
                            65u8, 5u8, 107u8, 78u8, 216u8, 54u8, 163u8, 49u8, 35u8, 78u8,
                        ],
                    )
                }
                pub fn sudo_set_max_allowed_uids(
                    &self,
                    netuid: types::sudo_set_max_allowed_uids::Netuid,
                    max_allowed_uids: types::sudo_set_max_allowed_uids::MaxAllowedUids,
                ) -> ::subxt::tx::Payload<types::SudoSetMaxAllowedUids> {
                    ::subxt::tx::Payload::new_static(
                        "AdminUtils",
                        "sudo_set_max_allowed_uids",
                        types::SudoSetMaxAllowedUids {
                            netuid,
                            max_allowed_uids,
                        },
                        [
                            231u8, 110u8, 75u8, 66u8, 160u8, 211u8, 212u8, 120u8, 24u8, 204u8,
                            147u8, 44u8, 230u8, 135u8, 143u8, 231u8, 142u8, 22u8, 220u8, 107u8,
                            12u8, 224u8, 206u8, 117u8, 203u8, 36u8, 233u8, 159u8, 60u8, 126u8, 0u8,
                            148u8,
                        ],
                    )
                }
                pub fn sudo_set_kappa(
                    &self,
                    netuid: types::sudo_set_kappa::Netuid,
                    kappa: types::sudo_set_kappa::Kappa,
                ) -> ::subxt::tx::Payload<types::SudoSetKappa> {
                    ::subxt::tx::Payload::new_static(
                        "AdminUtils",
                        "sudo_set_kappa",
                        types::SudoSetKappa { netuid, kappa },
                        [
                            38u8, 246u8, 140u8, 183u8, 207u8, 121u8, 74u8, 45u8, 74u8, 208u8, 89u8,
                            136u8, 65u8, 164u8, 132u8, 211u8, 225u8, 188u8, 219u8, 3u8, 68u8, 68u8,
                            208u8, 224u8, 135u8, 105u8, 39u8, 181u8, 84u8, 78u8, 255u8, 187u8,
                        ],
                    )
                }
                pub fn sudo_set_rho(
                    &self,
                    netuid: types::sudo_set_rho::Netuid,
                    rho: types::sudo_set_rho::Rho,
                ) -> ::subxt::tx::Payload<types::SudoSetRho> {
                    ::subxt::tx::Payload::new_static(
                        "AdminUtils",
                        "sudo_set_rho",
                        types::SudoSetRho { netuid, rho },
                        [
                            247u8, 201u8, 129u8, 7u8, 140u8, 8u8, 44u8, 187u8, 145u8, 159u8, 173u8,
                            106u8, 243u8, 66u8, 226u8, 229u8, 119u8, 59u8, 102u8, 130u8, 226u8,
                            228u8, 76u8, 160u8, 0u8, 118u8, 217u8, 103u8, 36u8, 73u8, 72u8, 25u8,
                        ],
                    )
                }
                pub fn sudo_set_activity_cutoff(
                    &self,
                    netuid: types::sudo_set_activity_cutoff::Netuid,
                    activity_cutoff: types::sudo_set_activity_cutoff::ActivityCutoff,
                ) -> ::subxt::tx::Payload<types::SudoSetActivityCutoff> {
                    ::subxt::tx::Payload::new_static(
                        "AdminUtils",
                        "sudo_set_activity_cutoff",
                        types::SudoSetActivityCutoff {
                            netuid,
                            activity_cutoff,
                        },
                        [
                            104u8, 183u8, 86u8, 79u8, 165u8, 85u8, 250u8, 180u8, 34u8, 235u8, 64u8,
                            160u8, 192u8, 143u8, 218u8, 84u8, 65u8, 8u8, 102u8, 183u8, 250u8, 1u8,
                            171u8, 190u8, 131u8, 210u8, 136u8, 157u8, 115u8, 144u8, 41u8, 252u8,
                        ],
                    )
                }
                pub fn sudo_set_network_registration_allowed(
                    &self,
                    netuid: types::sudo_set_network_registration_allowed::Netuid,
                    registration_allowed : types :: sudo_set_network_registration_allowed :: RegistrationAllowed,
                ) -> ::subxt::tx::Payload<types::SudoSetNetworkRegistrationAllowed>
                {
                    ::subxt::tx::Payload::new_static(
                        "AdminUtils",
                        "sudo_set_network_registration_allowed",
                        types::SudoSetNetworkRegistrationAllowed {
                            netuid,
                            registration_allowed,
                        },
                        [
                            21u8, 19u8, 90u8, 214u8, 44u8, 12u8, 34u8, 154u8, 195u8, 31u8, 158u8,
                            78u8, 86u8, 6u8, 195u8, 72u8, 203u8, 151u8, 35u8, 137u8, 211u8, 134u8,
                            36u8, 19u8, 54u8, 29u8, 198u8, 63u8, 244u8, 143u8, 23u8, 49u8,
                        ],
                    )
                }
                pub fn sudo_set_network_pow_registration_allowed(
                    &self,
                    netuid: types::sudo_set_network_pow_registration_allowed::Netuid,
                    registration_allowed : types :: sudo_set_network_pow_registration_allowed :: RegistrationAllowed,
                ) -> ::subxt::tx::Payload<types::SudoSetNetworkPowRegistrationAllowed>
                {
                    ::subxt::tx::Payload::new_static(
                        "AdminUtils",
                        "sudo_set_network_pow_registration_allowed",
                        types::SudoSetNetworkPowRegistrationAllowed {
                            netuid,
                            registration_allowed,
                        },
                        [
                            6u8, 22u8, 194u8, 96u8, 105u8, 253u8, 75u8, 119u8, 84u8, 113u8, 20u8,
                            156u8, 206u8, 1u8, 185u8, 181u8, 50u8, 177u8, 144u8, 72u8, 88u8, 179u8,
                            139u8, 82u8, 127u8, 146u8, 37u8, 209u8, 85u8, 45u8, 6u8, 110u8,
                        ],
                    )
                }
                pub fn sudo_set_target_registrations_per_interval(
                    &self,
                    netuid: types::sudo_set_target_registrations_per_interval::Netuid,
                    target_registrations_per_interval : types :: sudo_set_target_registrations_per_interval :: TargetRegistrationsPerInterval,
                ) -> ::subxt::tx::Payload<types::SudoSetTargetRegistrationsPerInterval>
                {
                    ::subxt::tx::Payload::new_static(
                        "AdminUtils",
                        "sudo_set_target_registrations_per_interval",
                        types::SudoSetTargetRegistrationsPerInterval {
                            netuid,
                            target_registrations_per_interval,
                        },
                        [
                            10u8, 181u8, 63u8, 81u8, 249u8, 102u8, 123u8, 158u8, 153u8, 17u8,
                            103u8, 169u8, 67u8, 218u8, 209u8, 100u8, 35u8, 128u8, 199u8, 192u8,
                            33u8, 132u8, 246u8, 45u8, 26u8, 93u8, 217u8, 44u8, 229u8, 99u8, 115u8,
                            163u8,
                        ],
                    )
                }
                pub fn sudo_set_min_burn(
                    &self,
                    netuid: types::sudo_set_min_burn::Netuid,
                    min_burn: types::sudo_set_min_burn::MinBurn,
                ) -> ::subxt::tx::Payload<types::SudoSetMinBurn> {
                    ::subxt::tx::Payload::new_static(
                        "AdminUtils",
                        "sudo_set_min_burn",
                        types::SudoSetMinBurn { netuid, min_burn },
                        [
                            39u8, 205u8, 135u8, 231u8, 239u8, 14u8, 206u8, 154u8, 11u8, 23u8,
                            136u8, 38u8, 231u8, 204u8, 93u8, 14u8, 135u8, 177u8, 230u8, 85u8,
                            229u8, 132u8, 47u8, 161u8, 2u8, 44u8, 234u8, 67u8, 7u8, 186u8, 26u8,
                            194u8,
                        ],
                    )
                }
                pub fn sudo_set_max_burn(
                    &self,
                    netuid: types::sudo_set_max_burn::Netuid,
                    max_burn: types::sudo_set_max_burn::MaxBurn,
                ) -> ::subxt::tx::Payload<types::SudoSetMaxBurn> {
                    ::subxt::tx::Payload::new_static(
                        "AdminUtils",
                        "sudo_set_max_burn",
                        types::SudoSetMaxBurn { netuid, max_burn },
                        [
                            148u8, 250u8, 58u8, 11u8, 129u8, 254u8, 179u8, 252u8, 145u8, 7u8,
                            188u8, 191u8, 240u8, 62u8, 82u8, 187u8, 208u8, 165u8, 17u8, 60u8, 78u8,
                            44u8, 92u8, 116u8, 182u8, 115u8, 6u8, 248u8, 156u8, 12u8, 36u8, 233u8,
                        ],
                    )
                }
                pub fn sudo_set_difficulty(
                    &self,
                    netuid: types::sudo_set_difficulty::Netuid,
                    difficulty: types::sudo_set_difficulty::Difficulty,
                ) -> ::subxt::tx::Payload<types::SudoSetDifficulty> {
                    ::subxt::tx::Payload::new_static(
                        "AdminUtils",
                        "sudo_set_difficulty",
                        types::SudoSetDifficulty { netuid, difficulty },
                        [
                            170u8, 244u8, 171u8, 250u8, 20u8, 230u8, 59u8, 184u8, 1u8, 145u8,
                            114u8, 127u8, 244u8, 54u8, 53u8, 208u8, 128u8, 168u8, 168u8, 73u8,
                            144u8, 5u8, 125u8, 128u8, 165u8, 245u8, 77u8, 51u8, 132u8, 72u8, 177u8,
                            67u8,
                        ],
                    )
                }
                pub fn sudo_set_max_allowed_validators(
                    &self,
                    netuid: types::sudo_set_max_allowed_validators::Netuid,
                    max_allowed_validators : types :: sudo_set_max_allowed_validators :: MaxAllowedValidators,
                ) -> ::subxt::tx::Payload<types::SudoSetMaxAllowedValidators> {
                    ::subxt::tx::Payload::new_static(
                        "AdminUtils",
                        "sudo_set_max_allowed_validators",
                        types::SudoSetMaxAllowedValidators {
                            netuid,
                            max_allowed_validators,
                        },
                        [
                            168u8, 63u8, 121u8, 5u8, 59u8, 103u8, 224u8, 178u8, 73u8, 5u8, 41u8,
                            18u8, 91u8, 161u8, 167u8, 98u8, 197u8, 94u8, 115u8, 232u8, 124u8, 40u8,
                            149u8, 130u8, 219u8, 133u8, 163u8, 90u8, 127u8, 36u8, 116u8, 56u8,
                        ],
                    )
                }
                pub fn sudo_set_bonds_moving_average(
                    &self,
                    netuid: types::sudo_set_bonds_moving_average::Netuid,
                    bonds_moving_average: types::sudo_set_bonds_moving_average::BondsMovingAverage,
                ) -> ::subxt::tx::Payload<types::SudoSetBondsMovingAverage> {
                    ::subxt::tx::Payload::new_static(
                        "AdminUtils",
                        "sudo_set_bonds_moving_average",
                        types::SudoSetBondsMovingAverage {
                            netuid,
                            bonds_moving_average,
                        },
                        [
                            197u8, 228u8, 187u8, 217u8, 129u8, 241u8, 28u8, 86u8, 3u8, 118u8,
                            108u8, 85u8, 27u8, 210u8, 96u8, 62u8, 112u8, 36u8, 120u8, 18u8, 5u8,
                            21u8, 177u8, 202u8, 237u8, 156u8, 15u8, 239u8, 135u8, 128u8, 123u8,
                            80u8,
                        ],
                    )
                }
                pub fn sudo_set_max_registrations_per_block(
                    &self,
                    netuid: types::sudo_set_max_registrations_per_block::Netuid,
                    max_registrations_per_block : types :: sudo_set_max_registrations_per_block :: MaxRegistrationsPerBlock,
                ) -> ::subxt::tx::Payload<types::SudoSetMaxRegistrationsPerBlock> {
                    ::subxt::tx::Payload::new_static(
                        "AdminUtils",
                        "sudo_set_max_registrations_per_block",
                        types::SudoSetMaxRegistrationsPerBlock {
                            netuid,
                            max_registrations_per_block,
                        },
                        [
                            27u8, 218u8, 137u8, 67u8, 16u8, 49u8, 10u8, 209u8, 94u8, 73u8, 20u8,
                            154u8, 251u8, 241u8, 75u8, 157u8, 29u8, 56u8, 47u8, 104u8, 105u8, 13u8,
                            190u8, 83u8, 197u8, 206u8, 81u8, 205u8, 149u8, 157u8, 68u8, 214u8,
                        ],
                    )
                }
                pub fn sudo_set_subnet_owner_cut(
                    &self,
                    subnet_owner_cut: types::sudo_set_subnet_owner_cut::SubnetOwnerCut,
                ) -> ::subxt::tx::Payload<types::SudoSetSubnetOwnerCut> {
                    ::subxt::tx::Payload::new_static(
                        "AdminUtils",
                        "sudo_set_subnet_owner_cut",
                        types::SudoSetSubnetOwnerCut { subnet_owner_cut },
                        [
                            132u8, 55u8, 182u8, 19u8, 106u8, 89u8, 17u8, 245u8, 176u8, 85u8, 108u8,
                            251u8, 178u8, 248u8, 58u8, 149u8, 239u8, 181u8, 123u8, 10u8, 133u8,
                            163u8, 162u8, 41u8, 111u8, 136u8, 175u8, 214u8, 224u8, 246u8, 49u8,
                            182u8,
                        ],
                    )
                }
                pub fn sudo_set_network_rate_limit(
                    &self,
                    rate_limit: types::sudo_set_network_rate_limit::RateLimit,
                ) -> ::subxt::tx::Payload<types::SudoSetNetworkRateLimit> {
                    ::subxt::tx::Payload::new_static(
                        "AdminUtils",
                        "sudo_set_network_rate_limit",
                        types::SudoSetNetworkRateLimit { rate_limit },
                        [
                            80u8, 205u8, 15u8, 103u8, 120u8, 112u8, 59u8, 176u8, 98u8, 107u8,
                            133u8, 117u8, 120u8, 30u8, 177u8, 32u8, 30u8, 34u8, 165u8, 160u8, 26u8,
                            54u8, 16u8, 16u8, 163u8, 0u8, 2u8, 162u8, 101u8, 243u8, 139u8, 229u8,
                        ],
                    )
                }
                pub fn sudo_set_tempo(
                    &self,
                    netuid: types::sudo_set_tempo::Netuid,
                    tempo: types::sudo_set_tempo::Tempo,
                ) -> ::subxt::tx::Payload<types::SudoSetTempo> {
                    ::subxt::tx::Payload::new_static(
                        "AdminUtils",
                        "sudo_set_tempo",
                        types::SudoSetTempo { netuid, tempo },
                        [
                            247u8, 138u8, 12u8, 190u8, 212u8, 116u8, 202u8, 23u8, 211u8, 97u8,
                            119u8, 181u8, 146u8, 75u8, 46u8, 220u8, 22u8, 204u8, 141u8, 52u8, 88u8,
                            214u8, 135u8, 182u8, 164u8, 193u8, 45u8, 15u8, 241u8, 66u8, 54u8,
                            228u8,
                        ],
                    )
                }
                pub fn sudo_set_total_issuance(
                    &self,
                    total_issuance: types::sudo_set_total_issuance::TotalIssuance,
                ) -> ::subxt::tx::Payload<types::SudoSetTotalIssuance> {
                    ::subxt::tx::Payload::new_static(
                        "AdminUtils",
                        "sudo_set_total_issuance",
                        types::SudoSetTotalIssuance { total_issuance },
                        [
                            162u8, 217u8, 167u8, 184u8, 244u8, 145u8, 154u8, 111u8, 124u8, 51u8,
                            153u8, 120u8, 116u8, 138u8, 202u8, 230u8, 217u8, 194u8, 159u8, 73u8,
                            219u8, 147u8, 240u8, 85u8, 20u8, 72u8, 48u8, 190u8, 120u8, 4u8, 132u8,
                            189u8,
                        ],
                    )
                }
                pub fn sudo_set_network_immunity_period(
                    &self,
                    immunity_period: types::sudo_set_network_immunity_period::ImmunityPeriod,
                ) -> ::subxt::tx::Payload<types::SudoSetNetworkImmunityPeriod> {
                    ::subxt::tx::Payload::new_static(
                        "AdminUtils",
                        "sudo_set_network_immunity_period",
                        types::SudoSetNetworkImmunityPeriod { immunity_period },
                        [
                            197u8, 175u8, 164u8, 18u8, 236u8, 31u8, 34u8, 133u8, 149u8, 203u8, 9u8,
                            43u8, 172u8, 248u8, 165u8, 68u8, 77u8, 243u8, 60u8, 88u8, 124u8, 67u8,
                            165u8, 231u8, 47u8, 26u8, 92u8, 32u8, 242u8, 13u8, 150u8, 230u8,
                        ],
                    )
                }
                pub fn sudo_set_network_min_lock_cost(
                    &self,
                    lock_cost: types::sudo_set_network_min_lock_cost::LockCost,
                ) -> ::subxt::tx::Payload<types::SudoSetNetworkMinLockCost> {
                    ::subxt::tx::Payload::new_static(
                        "AdminUtils",
                        "sudo_set_network_min_lock_cost",
                        types::SudoSetNetworkMinLockCost { lock_cost },
                        [
                            189u8, 57u8, 157u8, 251u8, 196u8, 232u8, 67u8, 90u8, 55u8, 145u8,
                            212u8, 174u8, 101u8, 242u8, 233u8, 222u8, 64u8, 194u8, 61u8, 159u8,
                            110u8, 244u8, 170u8, 227u8, 26u8, 183u8, 126u8, 206u8, 149u8, 47u8,
                            103u8, 54u8,
                        ],
                    )
                }
                pub fn sudo_set_subnet_limit(
                    &self,
                    max_subnets: types::sudo_set_subnet_limit::MaxSubnets,
                ) -> ::subxt::tx::Payload<types::SudoSetSubnetLimit> {
                    ::subxt::tx::Payload::new_static(
                        "AdminUtils",
                        "sudo_set_subnet_limit",
                        types::SudoSetSubnetLimit { max_subnets },
                        [
                            25u8, 217u8, 173u8, 189u8, 91u8, 60u8, 174u8, 105u8, 65u8, 140u8,
                            218u8, 197u8, 188u8, 203u8, 41u8, 4u8, 140u8, 16u8, 9u8, 20u8, 199u8,
                            17u8, 45u8, 38u8, 179u8, 254u8, 105u8, 187u8, 76u8, 139u8, 50u8, 166u8,
                        ],
                    )
                }
                pub fn sudo_set_lock_reduction_interval(
                    &self,
                    interval: types::sudo_set_lock_reduction_interval::Interval,
                ) -> ::subxt::tx::Payload<types::SudoSetLockReductionInterval> {
                    ::subxt::tx::Payload::new_static(
                        "AdminUtils",
                        "sudo_set_lock_reduction_interval",
                        types::SudoSetLockReductionInterval { interval },
                        [
                            221u8, 171u8, 225u8, 229u8, 131u8, 163u8, 89u8, 4u8, 118u8, 105u8,
                            118u8, 208u8, 70u8, 30u8, 56u8, 43u8, 254u8, 99u8, 219u8, 252u8, 185u8,
                            104u8, 248u8, 199u8, 101u8, 97u8, 65u8, 203u8, 25u8, 137u8, 34u8, 11u8,
                        ],
                    )
                }
                pub fn sudo_set_rao_recycled(
                    &self,
                    netuid: types::sudo_set_rao_recycled::Netuid,
                    rao_recycled: types::sudo_set_rao_recycled::RaoRecycled,
                ) -> ::subxt::tx::Payload<types::SudoSetRaoRecycled> {
                    ::subxt::tx::Payload::new_static(
                        "AdminUtils",
                        "sudo_set_rao_recycled",
                        types::SudoSetRaoRecycled {
                            netuid,
                            rao_recycled,
                        },
                        [
                            207u8, 226u8, 150u8, 214u8, 192u8, 206u8, 215u8, 101u8, 222u8, 190u8,
                            18u8, 204u8, 21u8, 137u8, 102u8, 155u8, 247u8, 19u8, 46u8, 142u8,
                            113u8, 226u8, 102u8, 110u8, 186u8, 35u8, 5u8, 18u8, 182u8, 144u8, 7u8,
                            198u8,
                        ],
                    )
                }
            }
        }
        #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
        pub type Event = runtime_types::pallet_admin_utils::pallet::Event;
        pub mod events {
            use super::runtime_types;
        }
    }
    pub mod runtime_types {
        use super::runtime_types;
        pub mod bounded_collections {
            use super::runtime_types;
            pub mod bounded_vec {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct BoundedVec<_0>(pub ::std::vec::Vec<_0>);
            }
            pub mod weak_bounded_vec {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct WeakBoundedVec<_0>(pub ::std::vec::Vec<_0>);
            }
        }
        pub mod finality_grandpa {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Equivocation<_0, _1, _2> {
                pub round_number: ::core::primitive::u64,
                pub identity: _0,
                pub first: (_1, _2),
                pub second: (_1, _2),
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Precommit<_0, _1> {
                pub target_hash: _0,
                pub target_number: _1,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Prevote<_0, _1> {
                pub target_hash: _0,
                pub target_number: _1,
            }
        }
        pub mod frame_support {
            use super::runtime_types;
            pub mod dispatch {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum DispatchClass {
                    #[codec(index = 0)]
                    Normal,
                    #[codec(index = 1)]
                    Operational,
                    #[codec(index = 2)]
                    Mandatory,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct DispatchInfo {
                    pub weight: runtime_types::sp_weights::weight_v2::Weight,
                    pub class: runtime_types::frame_support::dispatch::DispatchClass,
                    pub pays_fee: runtime_types::frame_support::dispatch::Pays,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum Pays {
                    #[codec(index = 0)]
                    Yes,
                    #[codec(index = 1)]
                    No,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct PerDispatchClass<_0> {
                    pub normal: _0,
                    pub operational: _0,
                    pub mandatory: _0,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum RawOrigin<_0> {
                    #[codec(index = 0)]
                    Root,
                    #[codec(index = 1)]
                    Signed(_0),
                    #[codec(index = 2)]
                    None,
                }
            }
            pub mod traits {
                use super::runtime_types;
                pub mod preimages {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        :: subxt :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: codec)]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub enum Bounded<_0> {
                        #[codec(index = 0)]
                        Legacy {
                            hash: ::subxt::utils::H256,
                        },
                        #[codec(index = 1)]
                        Inline(
                            runtime_types::bounded_collections::bounded_vec::BoundedVec<
                                ::core::primitive::u8,
                            >,
                        ),
                        #[codec(index = 2)]
                        Lookup {
                            hash: ::subxt::utils::H256,
                            len: ::core::primitive::u32,
                        },
                        __Ignore(::core::marker::PhantomData<_0>),
                    }
                }
                pub mod tokens {
                    use super::runtime_types;
                    pub mod misc {
                        use super::runtime_types;
                        #[derive(
                            :: subxt :: ext :: codec :: Decode,
                            :: subxt :: ext :: codec :: Encode,
                            :: subxt :: ext :: scale_decode :: DecodeAsType,
                            :: subxt :: ext :: scale_encode :: EncodeAsType,
                            Debug,
                        )]
                        # [codec (crate = :: subxt :: ext :: codec)]
                        #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                        #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                        pub enum BalanceStatus {
                            #[codec(index = 0)]
                            Free,
                            #[codec(index = 1)]
                            Reserved,
                        }
                    }
                }
            }
        }
        pub mod frame_system {
            use super::runtime_types;
            pub mod extensions {
                use super::runtime_types;
                pub mod check_genesis {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        :: subxt :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: codec)]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub struct CheckGenesis;
                }
                pub mod check_mortality {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        :: subxt :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: codec)]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub struct CheckMortality(pub runtime_types::sp_runtime::generic::era::Era);
                }
                pub mod check_non_zero_sender {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        :: subxt :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: codec)]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub struct CheckNonZeroSender;
                }
                pub mod check_nonce {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        :: subxt :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: codec)]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub struct CheckNonce(#[codec(compact)] pub ::core::primitive::u32);
                }
                pub mod check_spec_version {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        :: subxt :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: codec)]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub struct CheckSpecVersion;
                }
                pub mod check_tx_version {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        :: subxt :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: codec)]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub struct CheckTxVersion;
                }
                pub mod check_weight {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        :: subxt :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: codec)]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub struct CheckWeight;
                }
            }
            pub mod limits {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct BlockLength {
                    pub max: runtime_types::frame_support::dispatch::PerDispatchClass<
                        ::core::primitive::u32,
                    >,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct BlockWeights {
                    pub base_block: runtime_types::sp_weights::weight_v2::Weight,
                    pub max_block: runtime_types::sp_weights::weight_v2::Weight,
                    pub per_class: runtime_types::frame_support::dispatch::PerDispatchClass<
                        runtime_types::frame_system::limits::WeightsPerClass,
                    >,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct WeightsPerClass {
                    pub base_extrinsic: runtime_types::sp_weights::weight_v2::Weight,
                    pub max_extrinsic:
                        ::core::option::Option<runtime_types::sp_weights::weight_v2::Weight>,
                    pub max_total:
                        ::core::option::Option<runtime_types::sp_weights::weight_v2::Weight>,
                    pub reserved:
                        ::core::option::Option<runtime_types::sp_weights::weight_v2::Weight>,
                }
            }
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "Make some on-chain remark."]
                    #[doc = ""]
                    #[doc = "## Complexity"]
                    #[doc = "- `O(1)`"]
                    remark {
                        remark: ::std::vec::Vec<::core::primitive::u8>,
                    },
                    #[codec(index = 1)]
                    #[doc = "Set the number of pages in the WebAssembly environment's heap."]
                    set_heap_pages { pages: ::core::primitive::u64 },
                    #[codec(index = 2)]
                    #[doc = "Set the new runtime code."]
                    #[doc = ""]
                    #[doc = "## Complexity"]
                    #[doc = "- `O(C + S)` where `C` length of `code` and `S` complexity of `can_set_code`"]
                    set_code {
                        code: ::std::vec::Vec<::core::primitive::u8>,
                    },
                    #[codec(index = 3)]
                    #[doc = "Set the new runtime code without doing any checks of the given `code`."]
                    #[doc = ""]
                    #[doc = "## Complexity"]
                    #[doc = "- `O(C)` where `C` length of `code`"]
                    set_code_without_checks {
                        code: ::std::vec::Vec<::core::primitive::u8>,
                    },
                    #[codec(index = 4)]
                    #[doc = "Set some items of storage."]
                    set_storage {
                        items: ::std::vec::Vec<(
                            ::std::vec::Vec<::core::primitive::u8>,
                            ::std::vec::Vec<::core::primitive::u8>,
                        )>,
                    },
                    #[codec(index = 5)]
                    #[doc = "Kill some items from storage."]
                    kill_storage {
                        keys: ::std::vec::Vec<::std::vec::Vec<::core::primitive::u8>>,
                    },
                    #[codec(index = 6)]
                    #[doc = "Kill all storage items with a key that starts with the given prefix."]
                    #[doc = ""]
                    #[doc = "**NOTE:** We rely on the Root origin to provide us the number of subkeys under"]
                    #[doc = "the prefix we are removing to accurately calculate the weight of this function."]
                    kill_prefix {
                        prefix: ::std::vec::Vec<::core::primitive::u8>,
                        subkeys: ::core::primitive::u32,
                    },
                    #[codec(index = 7)]
                    #[doc = "Make some on-chain remark and emit event."]
                    remark_with_event {
                        remark: ::std::vec::Vec<::core::primitive::u8>,
                    },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Error for the System pallet"]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "The name of specification does not match between the current runtime"]
                    #[doc = "and the new runtime."]
                    InvalidSpecName,
                    #[codec(index = 1)]
                    #[doc = "The specification version is not allowed to decrease between the current runtime"]
                    #[doc = "and the new runtime."]
                    SpecVersionNeedsToIncrease,
                    #[codec(index = 2)]
                    #[doc = "Failed to extract the runtime version from the new runtime."]
                    #[doc = ""]
                    #[doc = "Either calling `Core_version` or decoding `RuntimeVersion` failed."]
                    FailedToExtractRuntimeVersion,
                    #[codec(index = 3)]
                    #[doc = "Suicide called when the account has non-default composite data."]
                    NonDefaultComposite,
                    #[codec(index = 4)]
                    #[doc = "There is a non-zero reference count preventing the account from being purged."]
                    NonZeroRefCount,
                    #[codec(index = 5)]
                    #[doc = "The origin filter prevent the call to be dispatched."]
                    CallFiltered,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Event for the System pallet."]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "An extrinsic completed successfully."]
                    ExtrinsicSuccess {
                        dispatch_info: runtime_types::frame_support::dispatch::DispatchInfo,
                    },
                    #[codec(index = 1)]
                    #[doc = "An extrinsic failed."]
                    ExtrinsicFailed {
                        dispatch_error: runtime_types::sp_runtime::DispatchError,
                        dispatch_info: runtime_types::frame_support::dispatch::DispatchInfo,
                    },
                    #[codec(index = 2)]
                    #[doc = "`:code` was updated."]
                    CodeUpdated,
                    #[codec(index = 3)]
                    #[doc = "A new account was created."]
                    NewAccount {
                        account: ::subxt::utils::AccountId32,
                    },
                    #[codec(index = 4)]
                    #[doc = "An account was reaped."]
                    KilledAccount {
                        account: ::subxt::utils::AccountId32,
                    },
                    #[codec(index = 5)]
                    #[doc = "On on-chain remark happened."]
                    Remarked {
                        sender: ::subxt::utils::AccountId32,
                        hash: ::subxt::utils::H256,
                    },
                }
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct AccountInfo<_0, _1> {
                pub nonce: _0,
                pub consumers: ::core::primitive::u32,
                pub providers: ::core::primitive::u32,
                pub sufficients: ::core::primitive::u32,
                pub data: _1,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct EventRecord<_0, _1> {
                pub phase: runtime_types::frame_system::Phase,
                pub event: _0,
                pub topics: ::std::vec::Vec<_1>,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct LastRuntimeUpgradeInfo {
                #[codec(compact)]
                pub spec_version: ::core::primitive::u32,
                pub spec_name: ::std::string::String,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub enum Phase {
                #[codec(index = 0)]
                ApplyExtrinsic(::core::primitive::u32),
                #[codec(index = 1)]
                Finalization,
                #[codec(index = 2)]
                Initialization,
            }
        }
        pub mod node_subtensor_runtime {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub enum OriginCaller {
                #[codec(index = 0)]
                system(
                    runtime_types::frame_support::dispatch::RawOrigin<::subxt::utils::AccountId32>,
                ),
                #[codec(index = 8)]
                Triumvirate(
                    runtime_types::pallet_collective::RawOrigin<::subxt::utils::AccountId32>,
                ),
                #[codec(index = 2)]
                Void(runtime_types::sp_core::Void),
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Runtime;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub enum RuntimeCall {
                #[codec(index = 0)]
                System(runtime_types::frame_system::pallet::Call),
                #[codec(index = 2)]
                Timestamp(runtime_types::pallet_timestamp::pallet::Call),
                #[codec(index = 4)]
                Grandpa(runtime_types::pallet_grandpa::pallet::Call),
                #[codec(index = 5)]
                Balances(runtime_types::pallet_balances::pallet::Call),
                #[codec(index = 7)]
                SubtensorModule(runtime_types::pallet_subtensor::pallet::Call),
                #[codec(index = 8)]
                Triumvirate(runtime_types::pallet_collective::pallet::Call),
                #[codec(index = 9)]
                TriumvirateMembers(runtime_types::pallet_membership::pallet::Call),
                #[codec(index = 10)]
                SenateMembers(runtime_types::pallet_membership::pallet::Call2),
                #[codec(index = 11)]
                Utility(runtime_types::pallet_utility::pallet::Call),
                #[codec(index = 12)]
                Sudo(runtime_types::pallet_sudo::pallet::Call),
                #[codec(index = 13)]
                Multisig(runtime_types::pallet_multisig::pallet::Call),
                #[codec(index = 14)]
                Preimage(runtime_types::pallet_preimage::pallet::Call),
                #[codec(index = 15)]
                Scheduler(runtime_types::pallet_scheduler::pallet::Call),
                #[codec(index = 16)]
                Registry(runtime_types::pallet_registry::pallet::Call),
                #[codec(index = 17)]
                Commitments(runtime_types::pallet_commitments::pallet::Call),
                #[codec(index = 18)]
                AdminUtils(runtime_types::pallet_admin_utils::pallet::Call),
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub enum RuntimeError {
                #[codec(index = 0)]
                System(runtime_types::frame_system::pallet::Error),
                #[codec(index = 4)]
                Grandpa(runtime_types::pallet_grandpa::pallet::Error),
                #[codec(index = 5)]
                Balances(runtime_types::pallet_balances::pallet::Error),
                #[codec(index = 7)]
                SubtensorModule(runtime_types::pallet_subtensor::pallet::Error),
                #[codec(index = 8)]
                Triumvirate(runtime_types::pallet_collective::pallet::Error),
                #[codec(index = 9)]
                TriumvirateMembers(runtime_types::pallet_membership::pallet::Error),
                #[codec(index = 10)]
                SenateMembers(runtime_types::pallet_membership::pallet::Error2),
                #[codec(index = 11)]
                Utility(runtime_types::pallet_utility::pallet::Error),
                #[codec(index = 12)]
                Sudo(runtime_types::pallet_sudo::pallet::Error),
                #[codec(index = 13)]
                Multisig(runtime_types::pallet_multisig::pallet::Error),
                #[codec(index = 14)]
                Preimage(runtime_types::pallet_preimage::pallet::Error),
                #[codec(index = 15)]
                Scheduler(runtime_types::pallet_scheduler::pallet::Error),
                #[codec(index = 16)]
                Registry(runtime_types::pallet_registry::pallet::Error),
                #[codec(index = 17)]
                Commitments(runtime_types::pallet_commitments::pallet::Error),
                #[codec(index = 18)]
                AdminUtils(runtime_types::pallet_admin_utils::pallet::Error),
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub enum RuntimeEvent {
                #[codec(index = 0)]
                System(runtime_types::frame_system::pallet::Event),
                #[codec(index = 4)]
                Grandpa(runtime_types::pallet_grandpa::pallet::Event),
                #[codec(index = 5)]
                Balances(runtime_types::pallet_balances::pallet::Event),
                #[codec(index = 6)]
                TransactionPayment(runtime_types::pallet_transaction_payment::pallet::Event),
                #[codec(index = 7)]
                SubtensorModule(runtime_types::pallet_subtensor::pallet::Event),
                #[codec(index = 8)]
                Triumvirate(runtime_types::pallet_collective::pallet::Event),
                #[codec(index = 9)]
                TriumvirateMembers(runtime_types::pallet_membership::pallet::Event),
                #[codec(index = 10)]
                SenateMembers(runtime_types::pallet_membership::pallet::Event2),
                #[codec(index = 11)]
                Utility(runtime_types::pallet_utility::pallet::Event),
                #[codec(index = 12)]
                Sudo(runtime_types::pallet_sudo::pallet::Event),
                #[codec(index = 13)]
                Multisig(runtime_types::pallet_multisig::pallet::Event),
                #[codec(index = 14)]
                Preimage(runtime_types::pallet_preimage::pallet::Event),
                #[codec(index = 15)]
                Scheduler(runtime_types::pallet_scheduler::pallet::Event),
                #[codec(index = 16)]
                Registry(runtime_types::pallet_registry::pallet::Event),
                #[codec(index = 17)]
                Commitments(runtime_types::pallet_commitments::pallet::Event),
                #[codec(index = 18)]
                AdminUtils(runtime_types::pallet_admin_utils::pallet::Event),
            }
        }
        pub mod pallet_admin_utils {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
                pub enum Call {
                    #[codec(index = 0)]
                    swap_authorities {
                        new_authorities:
                            runtime_types::bounded_collections::bounded_vec::BoundedVec<
                                runtime_types::sp_consensus_aura::sr25519::app_sr25519::Public,
                            >,
                    },
                    #[codec(index = 1)]
                    sudo_set_default_take {
                        default_take: ::core::primitive::u16,
                    },
                    #[codec(index = 2)]
                    sudo_set_tx_rate_limit {
                        tx_rate_limit: ::core::primitive::u64,
                    },
                    #[codec(index = 3)]
                    sudo_set_serving_rate_limit {
                        netuid: ::core::primitive::u16,
                        serving_rate_limit: ::core::primitive::u64,
                    },
                    #[codec(index = 4)]
                    sudo_set_min_difficulty {
                        netuid: ::core::primitive::u16,
                        min_difficulty: ::core::primitive::u64,
                    },
                    #[codec(index = 5)]
                    sudo_set_max_difficulty {
                        netuid: ::core::primitive::u16,
                        max_difficulty: ::core::primitive::u64,
                    },
                    #[codec(index = 6)]
                    sudo_set_weights_version_key {
                        netuid: ::core::primitive::u16,
                        weights_version_key: ::core::primitive::u64,
                    },
                    #[codec(index = 7)]
                    sudo_set_weights_set_rate_limit {
                        netuid: ::core::primitive::u16,
                        weights_set_rate_limit: ::core::primitive::u64,
                    },
                    #[codec(index = 8)]
                    sudo_set_adjustment_interval {
                        netuid: ::core::primitive::u16,
                        adjustment_interval: ::core::primitive::u16,
                    },
                    #[codec(index = 9)]
                    sudo_set_adjustment_alpha {
                        netuid: ::core::primitive::u16,
                        adjustment_alpha: ::core::primitive::u64,
                    },
                    #[codec(index = 12)]
                    sudo_set_max_weight_limit {
                        netuid: ::core::primitive::u16,
                        max_weight_limit: ::core::primitive::u16,
                    },
                    #[codec(index = 13)]
                    sudo_set_immunity_period {
                        netuid: ::core::primitive::u16,
                        immunity_period: ::core::primitive::u16,
                    },
                    #[codec(index = 14)]
                    sudo_set_min_allowed_weights {
                        netuid: ::core::primitive::u16,
                        min_allowed_weights: ::core::primitive::u16,
                    },
                    #[codec(index = 15)]
                    sudo_set_max_allowed_uids {
                        netuid: ::core::primitive::u16,
                        max_allowed_uids: ::core::primitive::u16,
                    },
                    #[codec(index = 16)]
                    sudo_set_kappa {
                        netuid: ::core::primitive::u16,
                        kappa: ::core::primitive::u16,
                    },
                    #[codec(index = 17)]
                    sudo_set_rho {
                        netuid: ::core::primitive::u16,
                        rho: ::core::primitive::u16,
                    },
                    #[codec(index = 18)]
                    sudo_set_activity_cutoff {
                        netuid: ::core::primitive::u16,
                        activity_cutoff: ::core::primitive::u16,
                    },
                    #[codec(index = 19)]
                    sudo_set_network_registration_allowed {
                        netuid: ::core::primitive::u16,
                        registration_allowed: ::core::primitive::bool,
                    },
                    #[codec(index = 20)]
                    sudo_set_network_pow_registration_allowed {
                        netuid: ::core::primitive::u16,
                        registration_allowed: ::core::primitive::bool,
                    },
                    #[codec(index = 21)]
                    sudo_set_target_registrations_per_interval {
                        netuid: ::core::primitive::u16,
                        target_registrations_per_interval: ::core::primitive::u16,
                    },
                    #[codec(index = 22)]
                    sudo_set_min_burn {
                        netuid: ::core::primitive::u16,
                        min_burn: ::core::primitive::u64,
                    },
                    #[codec(index = 23)]
                    sudo_set_max_burn {
                        netuid: ::core::primitive::u16,
                        max_burn: ::core::primitive::u64,
                    },
                    #[codec(index = 24)]
                    sudo_set_difficulty {
                        netuid: ::core::primitive::u16,
                        difficulty: ::core::primitive::u64,
                    },
                    #[codec(index = 25)]
                    sudo_set_max_allowed_validators {
                        netuid: ::core::primitive::u16,
                        max_allowed_validators: ::core::primitive::u16,
                    },
                    #[codec(index = 26)]
                    sudo_set_bonds_moving_average {
                        netuid: ::core::primitive::u16,
                        bonds_moving_average: ::core::primitive::u64,
                    },
                    #[codec(index = 27)]
                    sudo_set_max_registrations_per_block {
                        netuid: ::core::primitive::u16,
                        max_registrations_per_block: ::core::primitive::u16,
                    },
                    #[codec(index = 28)]
                    sudo_set_subnet_owner_cut {
                        subnet_owner_cut: ::core::primitive::u16,
                    },
                    #[codec(index = 29)]
                    sudo_set_network_rate_limit { rate_limit: ::core::primitive::u64 },
                    #[codec(index = 30)]
                    sudo_set_tempo {
                        netuid: ::core::primitive::u16,
                        tempo: ::core::primitive::u16,
                    },
                    #[codec(index = 33)]
                    sudo_set_total_issuance {
                        total_issuance: ::core::primitive::u64,
                    },
                    #[codec(index = 35)]
                    sudo_set_network_immunity_period {
                        immunity_period: ::core::primitive::u64,
                    },
                    #[codec(index = 36)]
                    sudo_set_network_min_lock_cost { lock_cost: ::core::primitive::u64 },
                    #[codec(index = 37)]
                    sudo_set_subnet_limit { max_subnets: ::core::primitive::u16 },
                    #[codec(index = 38)]
                    sudo_set_lock_reduction_interval { interval: ::core::primitive::u64 },
                    #[codec(index = 39)]
                    sudo_set_rao_recycled {
                        netuid: ::core::primitive::u16,
                        rao_recycled: ::core::primitive::u64,
                    },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
                pub enum Error {
                    #[codec(index = 0)]
                    NetworkDoesNotExist,
                    #[codec(index = 1)]
                    StorageValueOutOfRange,
                    #[codec(index = 2)]
                    MaxAllowedUIdsNotAllowed,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
                pub enum Event {}
            }
        }
        pub mod pallet_balances {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "Transfer some liquid free balance to another account."]
                    #[doc = ""]
                    #[doc = "`transfer` will set the `FreeBalance` of the sender and receiver."]
                    #[doc = "If the sender's account is below the existential deposit as a result"]
                    #[doc = "of the transfer, the account will be reaped."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be `Signed` by the transactor."]
                    #[doc = ""]
                    #[doc = "## Complexity"]
                    #[doc = "- Dependent on arguments but not critical, given proper implementations for input config"]
                    #[doc = "  types. See related functions below."]
                    #[doc = "- It contains a limited number of reads and writes internally and no complex"]
                    #[doc = "  computation."]
                    #[doc = ""]
                    #[doc = "Related functions:"]
                    #[doc = ""]
                    #[doc = "  - `ensure_can_withdraw` is always called internally but has a bounded complexity."]
                    #[doc = "  - Transferring balances to accounts that did not exist before will cause"]
                    #[doc = "    `T::OnNewAccount::on_new_account` to be called."]
                    #[doc = "  - Removing enough funds from an account will trigger `T::DustRemoval::on_unbalanced`."]
                    #[doc = "  - `transfer_keep_alive` works the same way as `transfer`, but has an additional check"]
                    #[doc = "    that the transfer will not kill the origin account."]
                    transfer {
                        dest: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                        #[codec(compact)]
                        value: ::core::primitive::u64,
                    },
                    #[codec(index = 1)]
                    #[doc = "Set the balances of a given account."]
                    #[doc = ""]
                    #[doc = "This will alter `FreeBalance` and `ReservedBalance` in storage. it will"]
                    #[doc = "also alter the total issuance of the system (`TotalIssuance`) appropriately."]
                    #[doc = "If the new free or reserved balance is below the existential deposit,"]
                    #[doc = "it will reset the account nonce (`frame_system::AccountNonce`)."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call is `root`."]
                    set_balance {
                        who: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                        #[codec(compact)]
                        new_free: ::core::primitive::u64,
                        #[codec(compact)]
                        new_reserved: ::core::primitive::u64,
                    },
                    #[codec(index = 2)]
                    #[doc = "Exactly as `transfer`, except the origin must be root and the source account may be"]
                    #[doc = "specified."]
                    #[doc = "## Complexity"]
                    #[doc = "- Same as transfer, but additional read and write because the source account is not"]
                    #[doc = "  assumed to be in the overlay."]
                    force_transfer {
                        source: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                        dest: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                        #[codec(compact)]
                        value: ::core::primitive::u64,
                    },
                    #[codec(index = 3)]
                    #[doc = "Same as the [`transfer`] call, but with a check that the transfer will not kill the"]
                    #[doc = "origin account."]
                    #[doc = ""]
                    #[doc = "99% of the time you want [`transfer`] instead."]
                    #[doc = ""]
                    #[doc = "[`transfer`]: struct.Pallet.html#method.transfer"]
                    transfer_keep_alive {
                        dest: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                        #[codec(compact)]
                        value: ::core::primitive::u64,
                    },
                    #[codec(index = 4)]
                    #[doc = "Transfer the entire transferable balance from the caller account."]
                    #[doc = ""]
                    #[doc = "NOTE: This function only attempts to transfer _transferable_ balances. This means that"]
                    #[doc = "any locked, reserved, or existential deposits (when `keep_alive` is `true`), will not be"]
                    #[doc = "transferred by this function. To ensure that this function results in a killed account,"]
                    #[doc = "you might need to prepare the account by removing any reference counters, storage"]
                    #[doc = "deposits, etc..."]
                    #[doc = ""]
                    #[doc = "The dispatch origin of this call must be Signed."]
                    #[doc = ""]
                    #[doc = "- `dest`: The recipient of the transfer."]
                    #[doc = "- `keep_alive`: A boolean to determine if the `transfer_all` operation should send all"]
                    #[doc = "  of the funds the account has, causing the sender account to be killed (false), or"]
                    #[doc = "  transfer everything except at least the existential deposit, which will guarantee to"]
                    #[doc = "  keep the sender account alive (true). ## Complexity"]
                    #[doc = "- O(1). Just like transfer, but reading the user's transferable balance first."]
                    transfer_all {
                        dest: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                        keep_alive: ::core::primitive::bool,
                    },
                    #[codec(index = 5)]
                    #[doc = "Unreserve some balance from a user by force."]
                    #[doc = ""]
                    #[doc = "Can only be called by ROOT."]
                    force_unreserve {
                        who: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                        amount: ::core::primitive::u64,
                    },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "Vesting balance too high to send value"]
                    VestingBalance,
                    #[codec(index = 1)]
                    #[doc = "Account liquidity restrictions prevent withdrawal"]
                    LiquidityRestrictions,
                    #[codec(index = 2)]
                    #[doc = "Balance too low to send value."]
                    InsufficientBalance,
                    #[codec(index = 3)]
                    #[doc = "Value too low to create account due to existential deposit"]
                    ExistentialDeposit,
                    #[codec(index = 4)]
                    #[doc = "Transfer/payment would kill account"]
                    KeepAlive,
                    #[codec(index = 5)]
                    #[doc = "A vesting schedule already exists for this account"]
                    ExistingVestingSchedule,
                    #[codec(index = 6)]
                    #[doc = "Beneficiary account must pre-exist"]
                    DeadAccount,
                    #[codec(index = 7)]
                    #[doc = "Number of named reserves exceed MaxReserves"]
                    TooManyReserves,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "An account was created with some free balance."]
                    Endowed {
                        account: ::subxt::utils::AccountId32,
                        free_balance: ::core::primitive::u64,
                    },
                    #[codec(index = 1)]
                    #[doc = "An account was removed whose balance was non-zero but below ExistentialDeposit,"]
                    #[doc = "resulting in an outright loss."]
                    DustLost {
                        account: ::subxt::utils::AccountId32,
                        amount: ::core::primitive::u64,
                    },
                    #[codec(index = 2)]
                    #[doc = "Transfer succeeded."]
                    Transfer {
                        from: ::subxt::utils::AccountId32,
                        to: ::subxt::utils::AccountId32,
                        amount: ::core::primitive::u64,
                    },
                    #[codec(index = 3)]
                    #[doc = "A balance was set by root."]
                    BalanceSet {
                        who: ::subxt::utils::AccountId32,
                        free: ::core::primitive::u64,
                        reserved: ::core::primitive::u64,
                    },
                    #[codec(index = 4)]
                    #[doc = "Some balance was reserved (moved from free to reserved)."]
                    Reserved {
                        who: ::subxt::utils::AccountId32,
                        amount: ::core::primitive::u64,
                    },
                    #[codec(index = 5)]
                    #[doc = "Some balance was unreserved (moved from reserved to free)."]
                    Unreserved {
                        who: ::subxt::utils::AccountId32,
                        amount: ::core::primitive::u64,
                    },
                    #[codec(index = 6)]
                    #[doc = "Some balance was moved from the reserve of the first account to the second account."]
                    #[doc = "Final argument indicates the destination balance type."]
                    ReserveRepatriated {
                        from: ::subxt::utils::AccountId32,
                        to: ::subxt::utils::AccountId32,
                        amount: ::core::primitive::u64,
                        destination_status:
                            runtime_types::frame_support::traits::tokens::misc::BalanceStatus,
                    },
                    #[codec(index = 7)]
                    #[doc = "Some amount was deposited (e.g. for transaction fees)."]
                    Deposit {
                        who: ::subxt::utils::AccountId32,
                        amount: ::core::primitive::u64,
                    },
                    #[codec(index = 8)]
                    #[doc = "Some amount was withdrawn from the account (e.g. for transaction fees)."]
                    Withdraw {
                        who: ::subxt::utils::AccountId32,
                        amount: ::core::primitive::u64,
                    },
                    #[codec(index = 9)]
                    #[doc = "Some amount was removed from the account (e.g. for misbehavior)."]
                    Slashed {
                        who: ::subxt::utils::AccountId32,
                        amount: ::core::primitive::u64,
                    },
                }
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct AccountData<_0> {
                pub free: _0,
                pub reserved: _0,
                pub misc_frozen: _0,
                pub fee_frozen: _0,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct BalanceLock<_0> {
                pub id: [::core::primitive::u8; 8usize],
                pub amount: _0,
                pub reasons: runtime_types::pallet_balances::Reasons,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub enum Reasons {
                #[codec(index = 0)]
                Fee,
                #[codec(index = 1)]
                Misc,
                #[codec(index = 2)]
                All,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct ReserveData<_0, _1> {
                pub id: _0,
                pub amount: _1,
            }
        }
        pub mod pallet_collective {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "Set the collective's membership."]
                    #[doc = ""]
                    #[doc = "- `new_members`: The new member list. Be nice to the chain and provide it sorted."]
                    #[doc = "- `prime`: The prime member whose vote sets the default."]
                    #[doc = "- `old_count`: The upper bound for the previous number of members in storage. Used for"]
                    #[doc = "  weight estimation."]
                    #[doc = ""]
                    #[doc = "The dispatch of this call must be `SetMembersOrigin`."]
                    #[doc = ""]
                    #[doc = "NOTE: Does not enforce the expected `MaxMembers` limit on the amount of members, but"]
                    #[doc = "      the weight estimations rely on it to estimate dispatchable weight."]
                    #[doc = ""]
                    #[doc = "# WARNING:"]
                    #[doc = ""]
                    #[doc = "The `pallet-collective` can also be managed by logic outside of the pallet through the"]
                    #[doc = "implementation of the trait [`ChangeMembers`]."]
                    #[doc = "Any call to `set_members` must be careful that the member set doesn't get out of sync"]
                    #[doc = "with other logic managing the member set."]
                    #[doc = ""]
                    #[doc = "## Complexity:"]
                    #[doc = "- `O(MP + N)` where:"]
                    #[doc = "  - `M` old-members-count (code- and governance-bounded)"]
                    #[doc = "  - `N` new-members-count (code- and governance-bounded)"]
                    #[doc = "  - `P` proposals-count (code-bounded)"]
                    set_members {
                        new_members: ::std::vec::Vec<::subxt::utils::AccountId32>,
                        prime: ::core::option::Option<::subxt::utils::AccountId32>,
                        old_count: ::core::primitive::u32,
                    },
                    #[codec(index = 1)]
                    #[doc = "Dispatch a proposal from a member using the `Member` origin."]
                    #[doc = ""]
                    #[doc = "Origin must be a member of the collective."]
                    #[doc = ""]
                    #[doc = "## Complexity:"]
                    #[doc = "- `O(B + M + P)` where:"]
                    #[doc = "- `B` is `proposal` size in bytes (length-fee-bounded)"]
                    #[doc = "- `M` members-count (code-bounded)"]
                    #[doc = "- `P` complexity of dispatching `proposal`"]
                    execute {
                        proposal:
                            ::std::boxed::Box<runtime_types::node_subtensor_runtime::RuntimeCall>,
                        #[codec(compact)]
                        length_bound: ::core::primitive::u32,
                    },
                    #[codec(index = 2)]
                    #[doc = "Add a new proposal to either be voted on or executed directly."]
                    #[doc = ""]
                    #[doc = "Requires the sender to be member."]
                    #[doc = ""]
                    #[doc = "`threshold` determines whether `proposal` is executed directly (`threshold < 2`)"]
                    #[doc = "or put up for voting."]
                    #[doc = ""]
                    #[doc = "## Complexity"]
                    #[doc = "- `O(B + M + P1)` or `O(B + M + P2)` where:"]
                    #[doc = "  - `B` is `proposal` size in bytes (length-fee-bounded)"]
                    #[doc = "  - `M` is members-count (code- and governance-bounded)"]
                    #[doc = "  - branching is influenced by `threshold` where:"]
                    #[doc = "    - `P1` is proposal execution complexity (`threshold < 2`)"]
                    #[doc = "    - `P2` is proposals-count (code-bounded) (`threshold >= 2`)"]
                    propose {
                        proposal:
                            ::std::boxed::Box<runtime_types::node_subtensor_runtime::RuntimeCall>,
                        #[codec(compact)]
                        length_bound: ::core::primitive::u32,
                        duration: ::core::primitive::u32,
                    },
                    #[codec(index = 3)]
                    #[doc = "Add an aye or nay vote for the sender to the given proposal."]
                    #[doc = ""]
                    #[doc = "Requires the sender to be a member."]
                    #[doc = ""]
                    #[doc = "Transaction fees will be waived if the member is voting on any particular proposal"]
                    #[doc = "for the first time and the call is successful. Subsequent vote changes will charge a"]
                    #[doc = "fee."]
                    #[doc = "## Complexity"]
                    #[doc = "- `O(M)` where `M` is members-count (code- and governance-bounded)"]
                    vote {
                        proposal: ::subxt::utils::H256,
                        #[codec(compact)]
                        index: ::core::primitive::u32,
                        approve: ::core::primitive::bool,
                    },
                    #[codec(index = 4)]
                    #[doc = "Close a vote that is either approved, disapproved or whose voting period has ended."]
                    #[doc = ""]
                    #[doc = "May be called by any signed account in order to finish voting and close the proposal."]
                    #[doc = ""]
                    #[doc = "If called before the end of the voting period it will only close the vote if it is"]
                    #[doc = "has enough votes to be approved or disapproved."]
                    #[doc = ""]
                    #[doc = "If called after the end of the voting period abstentions are counted as rejections"]
                    #[doc = "unless there is a prime member set and the prime member cast an approval."]
                    #[doc = ""]
                    #[doc = "If the close operation completes successfully with disapproval, the transaction fee will"]
                    #[doc = "be waived. Otherwise execution of the approved operation will be charged to the caller."]
                    #[doc = ""]
                    #[doc = "+ `proposal_weight_bound`: The maximum amount of weight consumed by executing the closed"]
                    #[doc = "proposal."]
                    #[doc = "+ `length_bound`: The upper bound for the length of the proposal in storage. Checked via"]
                    #[doc = "`storage::read` so it is `size_of::<u32>() == 4` larger than the pure length."]
                    #[doc = ""]
                    #[doc = "## Complexity"]
                    #[doc = "- `O(B + M + P1 + P2)` where:"]
                    #[doc = "  - `B` is `proposal` size in bytes (length-fee-bounded)"]
                    #[doc = "  - `M` is members-count (code- and governance-bounded)"]
                    #[doc = "  - `P1` is the complexity of `proposal` preimage."]
                    #[doc = "  - `P2` is proposal-count (code-bounded)"]
                    close_old_weight {
                        proposal_hash: ::subxt::utils::H256,
                        #[codec(compact)]
                        index: ::core::primitive::u32,
                        #[codec(compact)]
                        proposal_weight_bound: runtime_types::sp_weights::OldWeight,
                        #[codec(compact)]
                        length_bound: ::core::primitive::u32,
                    },
                    #[codec(index = 5)]
                    #[doc = "Disapprove a proposal, close, and remove it from the system, regardless of its current"]
                    #[doc = "state."]
                    #[doc = ""]
                    #[doc = "Must be called by the Root origin."]
                    #[doc = ""]
                    #[doc = "Parameters:"]
                    #[doc = "* `proposal_hash`: The hash of the proposal that should be disapproved."]
                    #[doc = ""]
                    #[doc = "## Complexity"]
                    #[doc = "O(P) where P is the number of max proposals"]
                    disapprove_proposal { proposal_hash: ::subxt::utils::H256 },
                    #[codec(index = 6)]
                    #[doc = "Close a vote that is either approved, disapproved or whose voting period has ended."]
                    #[doc = ""]
                    #[doc = "May be called by any signed account in order to finish voting and close the proposal."]
                    #[doc = ""]
                    #[doc = "If called before the end of the voting period it will only close the vote if it is"]
                    #[doc = "has enough votes to be approved or disapproved."]
                    #[doc = ""]
                    #[doc = "If called after the end of the voting period abstentions are counted as rejections"]
                    #[doc = "unless there is a prime member set and the prime member cast an approval."]
                    #[doc = ""]
                    #[doc = "If the close operation completes successfully with disapproval, the transaction fee will"]
                    #[doc = "be waived. Otherwise execution of the approved operation will be charged to the caller."]
                    #[doc = ""]
                    #[doc = "+ `proposal_weight_bound`: The maximum amount of weight consumed by executing the closed"]
                    #[doc = "proposal."]
                    #[doc = "+ `length_bound`: The upper bound for the length of the proposal in storage. Checked via"]
                    #[doc = "`storage::read` so it is `size_of::<u32>() == 4` larger than the pure length."]
                    #[doc = ""]
                    #[doc = "## Complexity"]
                    #[doc = "- `O(B + M + P1 + P2)` where:"]
                    #[doc = "  - `B` is `proposal` size in bytes (length-fee-bounded)"]
                    #[doc = "  - `M` is members-count (code- and governance-bounded)"]
                    #[doc = "  - `P1` is the complexity of `proposal` preimage."]
                    #[doc = "  - `P2` is proposal-count (code-bounded)"]
                    close {
                        proposal_hash: ::subxt::utils::H256,
                        #[codec(compact)]
                        index: ::core::primitive::u32,
                        proposal_weight_bound: runtime_types::sp_weights::weight_v2::Weight,
                        #[codec(compact)]
                        length_bound: ::core::primitive::u32,
                    },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "Account is not a member"]
                    NotMember,
                    #[codec(index = 1)]
                    #[doc = "Duplicate proposals not allowed"]
                    DuplicateProposal,
                    #[codec(index = 2)]
                    #[doc = "Proposal must exist"]
                    ProposalMissing,
                    #[codec(index = 3)]
                    #[doc = "Mismatched index"]
                    WrongIndex,
                    #[codec(index = 4)]
                    #[doc = "Duplicate vote ignored"]
                    DuplicateVote,
                    #[codec(index = 5)]
                    #[doc = "Members are already initialized!"]
                    AlreadyInitialized,
                    #[codec(index = 6)]
                    #[doc = "The close call was made too early, before the end of the voting."]
                    TooEarly,
                    #[codec(index = 7)]
                    #[doc = "There can only be a maximum of `MaxProposals` active proposals."]
                    TooManyProposals,
                    #[codec(index = 8)]
                    #[doc = "The given weight bound for the proposal was too low."]
                    WrongProposalWeight,
                    #[codec(index = 9)]
                    #[doc = "The given length bound for the proposal was too low."]
                    WrongProposalLength,
                    #[codec(index = 10)]
                    #[doc = "The given motion duration for the proposal was too low."]
                    WrongDuration,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "A motion (given hash) has been proposed (by given account) with a threshold (given"]
                    #[doc = "`MemberCount`)."]
                    Proposed {
                        account: ::subxt::utils::AccountId32,
                        proposal_index: ::core::primitive::u32,
                        proposal_hash: ::subxt::utils::H256,
                        threshold: ::core::primitive::u32,
                    },
                    #[codec(index = 1)]
                    #[doc = "A motion (given hash) has been voted on by given account, leaving"]
                    #[doc = "a tally (yes votes and no votes given respectively as `MemberCount`)."]
                    Voted {
                        account: ::subxt::utils::AccountId32,
                        proposal_hash: ::subxt::utils::H256,
                        voted: ::core::primitive::bool,
                        yes: ::core::primitive::u32,
                        no: ::core::primitive::u32,
                    },
                    #[codec(index = 2)]
                    #[doc = "A motion was approved by the required threshold."]
                    Approved { proposal_hash: ::subxt::utils::H256 },
                    #[codec(index = 3)]
                    #[doc = "A motion was not approved by the required threshold."]
                    Disapproved { proposal_hash: ::subxt::utils::H256 },
                    #[codec(index = 4)]
                    #[doc = "A motion was executed; result will be `Ok` if it returned without error."]
                    Executed {
                        proposal_hash: ::subxt::utils::H256,
                        result:
                            ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
                    },
                    #[codec(index = 5)]
                    #[doc = "A single member did some action; result will be `Ok` if it returned without error."]
                    MemberExecuted {
                        proposal_hash: ::subxt::utils::H256,
                        result:
                            ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
                    },
                    #[codec(index = 6)]
                    #[doc = "A proposal was closed because its threshold was reached or after its duration was up."]
                    Closed {
                        proposal_hash: ::subxt::utils::H256,
                        yes: ::core::primitive::u32,
                        no: ::core::primitive::u32,
                    },
                }
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub enum RawOrigin<_0> {
                #[codec(index = 0)]
                Members(::core::primitive::u32, ::core::primitive::u32),
                #[codec(index = 1)]
                Member(_0),
                #[codec(index = 2)]
                _Phantom,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Votes<_0, _1> {
                pub index: ::core::primitive::u32,
                pub threshold: ::core::primitive::u32,
                pub ayes: ::std::vec::Vec<_0>,
                pub nays: ::std::vec::Vec<_0>,
                pub end: _1,
            }
        }
        pub mod pallet_commitments {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
                pub enum Call {
                    #[codec(index = 0)]
                    set_commitment {
                        netuid: ::core::primitive::u16,
                        info: ::std::boxed::Box<
                            runtime_types::pallet_commitments::types::CommitmentInfo,
                        >,
                    },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "Account passed too many additional fields to their commitment"]
                    TooManyFields,
                    #[codec(index = 1)]
                    #[doc = "Account isn't allow to make commitments to the chain"]
                    CannotCommit,
                    #[codec(index = 2)]
                    #[doc = "Account is trying to commit data too fast"]
                    RateLimitExceeded,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
                pub enum Event {
                    #[codec(index = 0)]
                    Commitment {
                        netuid: ::core::primitive::u16,
                        who: ::subxt::utils::AccountId32,
                    },
                }
            }
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct CommitmentInfo {
                    pub fields: runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        runtime_types::pallet_commitments::types::Data,
                    >,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum Data {
                    #[codec(index = 0)]
                    None,
                    #[codec(index = 1)]
                    Raw0([::core::primitive::u8; 0usize]),
                    #[codec(index = 2)]
                    Raw1([::core::primitive::u8; 1usize]),
                    #[codec(index = 3)]
                    Raw2([::core::primitive::u8; 2usize]),
                    #[codec(index = 4)]
                    Raw3([::core::primitive::u8; 3usize]),
                    #[codec(index = 5)]
                    Raw4([::core::primitive::u8; 4usize]),
                    #[codec(index = 6)]
                    Raw5([::core::primitive::u8; 5usize]),
                    #[codec(index = 7)]
                    Raw6([::core::primitive::u8; 6usize]),
                    #[codec(index = 8)]
                    Raw7([::core::primitive::u8; 7usize]),
                    #[codec(index = 9)]
                    Raw8([::core::primitive::u8; 8usize]),
                    #[codec(index = 10)]
                    Raw9([::core::primitive::u8; 9usize]),
                    #[codec(index = 11)]
                    Raw10([::core::primitive::u8; 10usize]),
                    #[codec(index = 12)]
                    Raw11([::core::primitive::u8; 11usize]),
                    #[codec(index = 13)]
                    Raw12([::core::primitive::u8; 12usize]),
                    #[codec(index = 14)]
                    Raw13([::core::primitive::u8; 13usize]),
                    #[codec(index = 15)]
                    Raw14([::core::primitive::u8; 14usize]),
                    #[codec(index = 16)]
                    Raw15([::core::primitive::u8; 15usize]),
                    #[codec(index = 17)]
                    Raw16([::core::primitive::u8; 16usize]),
                    #[codec(index = 18)]
                    Raw17([::core::primitive::u8; 17usize]),
                    #[codec(index = 19)]
                    Raw18([::core::primitive::u8; 18usize]),
                    #[codec(index = 20)]
                    Raw19([::core::primitive::u8; 19usize]),
                    #[codec(index = 21)]
                    Raw20([::core::primitive::u8; 20usize]),
                    #[codec(index = 22)]
                    Raw21([::core::primitive::u8; 21usize]),
                    #[codec(index = 23)]
                    Raw22([::core::primitive::u8; 22usize]),
                    #[codec(index = 24)]
                    Raw23([::core::primitive::u8; 23usize]),
                    #[codec(index = 25)]
                    Raw24([::core::primitive::u8; 24usize]),
                    #[codec(index = 26)]
                    Raw25([::core::primitive::u8; 25usize]),
                    #[codec(index = 27)]
                    Raw26([::core::primitive::u8; 26usize]),
                    #[codec(index = 28)]
                    Raw27([::core::primitive::u8; 27usize]),
                    #[codec(index = 29)]
                    Raw28([::core::primitive::u8; 28usize]),
                    #[codec(index = 30)]
                    Raw29([::core::primitive::u8; 29usize]),
                    #[codec(index = 31)]
                    Raw30([::core::primitive::u8; 30usize]),
                    #[codec(index = 32)]
                    Raw31([::core::primitive::u8; 31usize]),
                    #[codec(index = 33)]
                    Raw32([::core::primitive::u8; 32usize]),
                    #[codec(index = 34)]
                    Raw33([::core::primitive::u8; 33usize]),
                    #[codec(index = 35)]
                    Raw34([::core::primitive::u8; 34usize]),
                    #[codec(index = 36)]
                    Raw35([::core::primitive::u8; 35usize]),
                    #[codec(index = 37)]
                    Raw36([::core::primitive::u8; 36usize]),
                    #[codec(index = 38)]
                    Raw37([::core::primitive::u8; 37usize]),
                    #[codec(index = 39)]
                    Raw38([::core::primitive::u8; 38usize]),
                    #[codec(index = 40)]
                    Raw39([::core::primitive::u8; 39usize]),
                    #[codec(index = 41)]
                    Raw40([::core::primitive::u8; 40usize]),
                    #[codec(index = 42)]
                    Raw41([::core::primitive::u8; 41usize]),
                    #[codec(index = 43)]
                    Raw42([::core::primitive::u8; 42usize]),
                    #[codec(index = 44)]
                    Raw43([::core::primitive::u8; 43usize]),
                    #[codec(index = 45)]
                    Raw44([::core::primitive::u8; 44usize]),
                    #[codec(index = 46)]
                    Raw45([::core::primitive::u8; 45usize]),
                    #[codec(index = 47)]
                    Raw46([::core::primitive::u8; 46usize]),
                    #[codec(index = 48)]
                    Raw47([::core::primitive::u8; 47usize]),
                    #[codec(index = 49)]
                    Raw48([::core::primitive::u8; 48usize]),
                    #[codec(index = 50)]
                    Raw49([::core::primitive::u8; 49usize]),
                    #[codec(index = 51)]
                    Raw50([::core::primitive::u8; 50usize]),
                    #[codec(index = 52)]
                    Raw51([::core::primitive::u8; 51usize]),
                    #[codec(index = 53)]
                    Raw52([::core::primitive::u8; 52usize]),
                    #[codec(index = 54)]
                    Raw53([::core::primitive::u8; 53usize]),
                    #[codec(index = 55)]
                    Raw54([::core::primitive::u8; 54usize]),
                    #[codec(index = 56)]
                    Raw55([::core::primitive::u8; 55usize]),
                    #[codec(index = 57)]
                    Raw56([::core::primitive::u8; 56usize]),
                    #[codec(index = 58)]
                    Raw57([::core::primitive::u8; 57usize]),
                    #[codec(index = 59)]
                    Raw58([::core::primitive::u8; 58usize]),
                    #[codec(index = 60)]
                    Raw59([::core::primitive::u8; 59usize]),
                    #[codec(index = 61)]
                    Raw60([::core::primitive::u8; 60usize]),
                    #[codec(index = 62)]
                    Raw61([::core::primitive::u8; 61usize]),
                    #[codec(index = 63)]
                    Raw62([::core::primitive::u8; 62usize]),
                    #[codec(index = 64)]
                    Raw63([::core::primitive::u8; 63usize]),
                    #[codec(index = 65)]
                    Raw64([::core::primitive::u8; 64usize]),
                    #[codec(index = 66)]
                    Raw65([::core::primitive::u8; 65usize]),
                    #[codec(index = 67)]
                    Raw66([::core::primitive::u8; 66usize]),
                    #[codec(index = 68)]
                    Raw67([::core::primitive::u8; 67usize]),
                    #[codec(index = 69)]
                    Raw68([::core::primitive::u8; 68usize]),
                    #[codec(index = 70)]
                    Raw69([::core::primitive::u8; 69usize]),
                    #[codec(index = 71)]
                    Raw70([::core::primitive::u8; 70usize]),
                    #[codec(index = 72)]
                    Raw71([::core::primitive::u8; 71usize]),
                    #[codec(index = 73)]
                    Raw72([::core::primitive::u8; 72usize]),
                    #[codec(index = 74)]
                    Raw73([::core::primitive::u8; 73usize]),
                    #[codec(index = 75)]
                    Raw74([::core::primitive::u8; 74usize]),
                    #[codec(index = 76)]
                    Raw75([::core::primitive::u8; 75usize]),
                    #[codec(index = 77)]
                    Raw76([::core::primitive::u8; 76usize]),
                    #[codec(index = 78)]
                    Raw77([::core::primitive::u8; 77usize]),
                    #[codec(index = 79)]
                    Raw78([::core::primitive::u8; 78usize]),
                    #[codec(index = 80)]
                    Raw79([::core::primitive::u8; 79usize]),
                    #[codec(index = 81)]
                    Raw80([::core::primitive::u8; 80usize]),
                    #[codec(index = 82)]
                    Raw81([::core::primitive::u8; 81usize]),
                    #[codec(index = 83)]
                    Raw82([::core::primitive::u8; 82usize]),
                    #[codec(index = 84)]
                    Raw83([::core::primitive::u8; 83usize]),
                    #[codec(index = 85)]
                    Raw84([::core::primitive::u8; 84usize]),
                    #[codec(index = 86)]
                    Raw85([::core::primitive::u8; 85usize]),
                    #[codec(index = 87)]
                    Raw86([::core::primitive::u8; 86usize]),
                    #[codec(index = 88)]
                    Raw87([::core::primitive::u8; 87usize]),
                    #[codec(index = 89)]
                    Raw88([::core::primitive::u8; 88usize]),
                    #[codec(index = 90)]
                    Raw89([::core::primitive::u8; 89usize]),
                    #[codec(index = 91)]
                    Raw90([::core::primitive::u8; 90usize]),
                    #[codec(index = 92)]
                    Raw91([::core::primitive::u8; 91usize]),
                    #[codec(index = 93)]
                    Raw92([::core::primitive::u8; 92usize]),
                    #[codec(index = 94)]
                    Raw93([::core::primitive::u8; 93usize]),
                    #[codec(index = 95)]
                    Raw94([::core::primitive::u8; 94usize]),
                    #[codec(index = 96)]
                    Raw95([::core::primitive::u8; 95usize]),
                    #[codec(index = 97)]
                    Raw96([::core::primitive::u8; 96usize]),
                    #[codec(index = 98)]
                    Raw97([::core::primitive::u8; 97usize]),
                    #[codec(index = 99)]
                    Raw98([::core::primitive::u8; 98usize]),
                    #[codec(index = 100)]
                    Raw99([::core::primitive::u8; 99usize]),
                    #[codec(index = 101)]
                    Raw100([::core::primitive::u8; 100usize]),
                    #[codec(index = 102)]
                    Raw101([::core::primitive::u8; 101usize]),
                    #[codec(index = 103)]
                    Raw102([::core::primitive::u8; 102usize]),
                    #[codec(index = 104)]
                    Raw103([::core::primitive::u8; 103usize]),
                    #[codec(index = 105)]
                    Raw104([::core::primitive::u8; 104usize]),
                    #[codec(index = 106)]
                    Raw105([::core::primitive::u8; 105usize]),
                    #[codec(index = 107)]
                    Raw106([::core::primitive::u8; 106usize]),
                    #[codec(index = 108)]
                    Raw107([::core::primitive::u8; 107usize]),
                    #[codec(index = 109)]
                    Raw108([::core::primitive::u8; 108usize]),
                    #[codec(index = 110)]
                    Raw109([::core::primitive::u8; 109usize]),
                    #[codec(index = 111)]
                    Raw110([::core::primitive::u8; 110usize]),
                    #[codec(index = 112)]
                    Raw111([::core::primitive::u8; 111usize]),
                    #[codec(index = 113)]
                    Raw112([::core::primitive::u8; 112usize]),
                    #[codec(index = 114)]
                    Raw113([::core::primitive::u8; 113usize]),
                    #[codec(index = 115)]
                    Raw114([::core::primitive::u8; 114usize]),
                    #[codec(index = 116)]
                    Raw115([::core::primitive::u8; 115usize]),
                    #[codec(index = 117)]
                    Raw116([::core::primitive::u8; 116usize]),
                    #[codec(index = 118)]
                    Raw117([::core::primitive::u8; 117usize]),
                    #[codec(index = 119)]
                    Raw118([::core::primitive::u8; 118usize]),
                    #[codec(index = 120)]
                    Raw119([::core::primitive::u8; 119usize]),
                    #[codec(index = 121)]
                    Raw120([::core::primitive::u8; 120usize]),
                    #[codec(index = 122)]
                    Raw121([::core::primitive::u8; 121usize]),
                    #[codec(index = 123)]
                    Raw122([::core::primitive::u8; 122usize]),
                    #[codec(index = 124)]
                    Raw123([::core::primitive::u8; 123usize]),
                    #[codec(index = 125)]
                    Raw124([::core::primitive::u8; 124usize]),
                    #[codec(index = 126)]
                    Raw125([::core::primitive::u8; 125usize]),
                    #[codec(index = 127)]
                    Raw126([::core::primitive::u8; 126usize]),
                    #[codec(index = 128)]
                    Raw127([::core::primitive::u8; 127usize]),
                    #[codec(index = 129)]
                    Raw128([::core::primitive::u8; 128usize]),
                    #[codec(index = 130)]
                    BlakeTwo256([::core::primitive::u8; 32usize]),
                    #[codec(index = 131)]
                    Sha256([::core::primitive::u8; 32usize]),
                    #[codec(index = 132)]
                    Keccak256([::core::primitive::u8; 32usize]),
                    #[codec(index = 133)]
                    ShaThree256([::core::primitive::u8; 32usize]),
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Registration<_0, _2> {
                    pub deposit: _0,
                    pub block: _2,
                    pub info: runtime_types::pallet_commitments::types::CommitmentInfo,
                }
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct CommitmentsSignedExtension<_0>(pub ::core::marker::PhantomData<_0>);
        }
        pub mod pallet_grandpa {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "Report voter equivocation/misbehavior. This method will verify the"]
                    #[doc = "equivocation proof and validate the given key ownership proof"]
                    #[doc = "against the extracted offender. If both are valid, the offence"]
                    #[doc = "will be reported."]
                    report_equivocation {
                        equivocation_proof: ::std::boxed::Box<
                            runtime_types::sp_finality_grandpa::EquivocationProof<
                                ::subxt::utils::H256,
                                ::core::primitive::u32,
                            >,
                        >,
                        key_owner_proof: runtime_types::sp_core::Void,
                    },
                    #[codec(index = 1)]
                    #[doc = "Report voter equivocation/misbehavior. This method will verify the"]
                    #[doc = "equivocation proof and validate the given key ownership proof"]
                    #[doc = "against the extracted offender. If both are valid, the offence"]
                    #[doc = "will be reported."]
                    #[doc = ""]
                    #[doc = "This extrinsic must be called unsigned and it is expected that only"]
                    #[doc = "block authors will call it (validated in `ValidateUnsigned`), as such"]
                    #[doc = "if the block author is defined it will be defined as the equivocation"]
                    #[doc = "reporter."]
                    report_equivocation_unsigned {
                        equivocation_proof: ::std::boxed::Box<
                            runtime_types::sp_finality_grandpa::EquivocationProof<
                                ::subxt::utils::H256,
                                ::core::primitive::u32,
                            >,
                        >,
                        key_owner_proof: runtime_types::sp_core::Void,
                    },
                    #[codec(index = 2)]
                    #[doc = "Note that the current authority set of the GRANDPA finality gadget has stalled."]
                    #[doc = ""]
                    #[doc = "This will trigger a forced authority set change at the beginning of the next session, to"]
                    #[doc = "be enacted `delay` blocks after that. The `delay` should be high enough to safely assume"]
                    #[doc = "that the block signalling the forced change will not be re-orged e.g. 1000 blocks."]
                    #[doc = "The block production rate (which may be slowed down because of finality lagging) should"]
                    #[doc = "be taken into account when choosing the `delay`. The GRANDPA voters based on the new"]
                    #[doc = "authority will start voting on top of `best_finalized_block_number` for new finalized"]
                    #[doc = "blocks. `best_finalized_block_number` should be the highest of the latest finalized"]
                    #[doc = "block of all validators of the new authority set."]
                    #[doc = ""]
                    #[doc = "Only callable by root."]
                    note_stalled {
                        delay: ::core::primitive::u32,
                        best_finalized_block_number: ::core::primitive::u32,
                    },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "Attempt to signal GRANDPA pause when the authority set isn't live"]
                    #[doc = "(either paused or already pending pause)."]
                    PauseFailed,
                    #[codec(index = 1)]
                    #[doc = "Attempt to signal GRANDPA resume when the authority set isn't paused"]
                    #[doc = "(either live or already pending resume)."]
                    ResumeFailed,
                    #[codec(index = 2)]
                    #[doc = "Attempt to signal GRANDPA change with one already pending."]
                    ChangePending,
                    #[codec(index = 3)]
                    #[doc = "Cannot signal forced change so soon after last."]
                    TooSoon,
                    #[codec(index = 4)]
                    #[doc = "A key ownership proof provided as part of an equivocation report is invalid."]
                    InvalidKeyOwnershipProof,
                    #[codec(index = 5)]
                    #[doc = "An equivocation proof provided as part of an equivocation report is invalid."]
                    InvalidEquivocationProof,
                    #[codec(index = 6)]
                    #[doc = "A given equivocation report is valid but already previously reported."]
                    DuplicateOffenceReport,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "New authority set has been applied."]
                    NewAuthorities {
                        authority_set: ::std::vec::Vec<(
                            runtime_types::sp_finality_grandpa::app::Public,
                            ::core::primitive::u64,
                        )>,
                    },
                    #[codec(index = 1)]
                    #[doc = "Current authority set has been paused."]
                    Paused,
                    #[codec(index = 2)]
                    #[doc = "Current authority set has been resumed."]
                    Resumed,
                }
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct StoredPendingChange<_0> {
                pub scheduled_at: _0,
                pub delay: _0,
                pub next_authorities:
                    runtime_types::bounded_collections::weak_bounded_vec::WeakBoundedVec<(
                        runtime_types::sp_finality_grandpa::app::Public,
                        ::core::primitive::u64,
                    )>,
                pub forced: ::core::option::Option<_0>,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub enum StoredState<_0> {
                #[codec(index = 0)]
                Live,
                #[codec(index = 1)]
                PendingPause { scheduled_at: _0, delay: _0 },
                #[codec(index = 2)]
                Paused,
                #[codec(index = 3)]
                PendingResume { scheduled_at: _0, delay: _0 },
            }
        }
        pub mod pallet_membership {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "Add a member `who` to the set."]
                    #[doc = ""]
                    #[doc = "May only be called from `T::AddOrigin`."]
                    add_member {
                        who: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                    },
                    #[codec(index = 1)]
                    #[doc = "Remove a member `who` from the set."]
                    #[doc = ""]
                    #[doc = "May only be called from `T::RemoveOrigin`."]
                    remove_member {
                        who: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                    },
                    #[codec(index = 2)]
                    #[doc = "Swap out one member `remove` for another `add`."]
                    #[doc = ""]
                    #[doc = "May only be called from `T::SwapOrigin`."]
                    #[doc = ""]
                    #[doc = "Prime membership is *not* passed from `remove` to `add`, if extant."]
                    swap_member {
                        remove: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                        add: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                    },
                    #[codec(index = 3)]
                    #[doc = "Change the membership to a new set, disregarding the existing membership. Be nice and"]
                    #[doc = "pass `members` pre-sorted."]
                    #[doc = ""]
                    #[doc = "May only be called from `T::ResetOrigin`."]
                    reset_members {
                        members: ::std::vec::Vec<::subxt::utils::AccountId32>,
                    },
                    #[codec(index = 4)]
                    #[doc = "Swap out the sending member for some other key `new`."]
                    #[doc = ""]
                    #[doc = "May only be called from `Signed` origin of a current member."]
                    #[doc = ""]
                    #[doc = "Prime membership is passed from the origin account to `new`, if extant."]
                    change_key {
                        new: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                    },
                    #[codec(index = 5)]
                    #[doc = "Set the prime member. Must be a current member."]
                    #[doc = ""]
                    #[doc = "May only be called from `T::PrimeOrigin`."]
                    set_prime {
                        who: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                    },
                    #[codec(index = 6)]
                    #[doc = "Remove the prime member if it exists."]
                    #[doc = ""]
                    #[doc = "May only be called from `T::PrimeOrigin`."]
                    clear_prime,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
                pub enum Call2 {
                    #[codec(index = 0)]
                    #[doc = "Add a member `who` to the set."]
                    #[doc = ""]
                    #[doc = "May only be called from `T::AddOrigin`."]
                    add_member {
                        who: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                    },
                    #[codec(index = 1)]
                    #[doc = "Remove a member `who` from the set."]
                    #[doc = ""]
                    #[doc = "May only be called from `T::RemoveOrigin`."]
                    remove_member {
                        who: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                    },
                    #[codec(index = 2)]
                    #[doc = "Swap out one member `remove` for another `add`."]
                    #[doc = ""]
                    #[doc = "May only be called from `T::SwapOrigin`."]
                    #[doc = ""]
                    #[doc = "Prime membership is *not* passed from `remove` to `add`, if extant."]
                    swap_member {
                        remove: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                        add: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                    },
                    #[codec(index = 3)]
                    #[doc = "Change the membership to a new set, disregarding the existing membership. Be nice and"]
                    #[doc = "pass `members` pre-sorted."]
                    #[doc = ""]
                    #[doc = "May only be called from `T::ResetOrigin`."]
                    reset_members {
                        members: ::std::vec::Vec<::subxt::utils::AccountId32>,
                    },
                    #[codec(index = 4)]
                    #[doc = "Swap out the sending member for some other key `new`."]
                    #[doc = ""]
                    #[doc = "May only be called from `Signed` origin of a current member."]
                    #[doc = ""]
                    #[doc = "Prime membership is passed from the origin account to `new`, if extant."]
                    change_key {
                        new: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                    },
                    #[codec(index = 5)]
                    #[doc = "Set the prime member. Must be a current member."]
                    #[doc = ""]
                    #[doc = "May only be called from `T::PrimeOrigin`."]
                    set_prime {
                        who: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                    },
                    #[codec(index = 6)]
                    #[doc = "Remove the prime member if it exists."]
                    #[doc = ""]
                    #[doc = "May only be called from `T::PrimeOrigin`."]
                    clear_prime,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "Already a member."]
                    AlreadyMember,
                    #[codec(index = 1)]
                    #[doc = "Not a member."]
                    NotMember,
                    #[codec(index = 2)]
                    #[doc = "Too many members."]
                    TooManyMembers,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
                pub enum Error2 {
                    #[codec(index = 0)]
                    #[doc = "Already a member."]
                    AlreadyMember,
                    #[codec(index = 1)]
                    #[doc = "Not a member."]
                    NotMember,
                    #[codec(index = 2)]
                    #[doc = "Too many members."]
                    TooManyMembers,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "The given member was added; see the transaction for who."]
                    MemberAdded,
                    #[codec(index = 1)]
                    #[doc = "The given member was removed; see the transaction for who."]
                    MemberRemoved,
                    #[codec(index = 2)]
                    #[doc = "Two members were swapped; see the transaction for who."]
                    MembersSwapped,
                    #[codec(index = 3)]
                    #[doc = "The membership was reset; see the transaction for who the new set is."]
                    MembersReset,
                    #[codec(index = 4)]
                    #[doc = "One of the members' keys changed."]
                    KeyChanged,
                    #[codec(index = 5)]
                    #[doc = "Phantom member, never used."]
                    Dummy,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
                pub enum Event2 {
                    #[codec(index = 0)]
                    #[doc = "The given member was added; see the transaction for who."]
                    MemberAdded,
                    #[codec(index = 1)]
                    #[doc = "The given member was removed; see the transaction for who."]
                    MemberRemoved,
                    #[codec(index = 2)]
                    #[doc = "Two members were swapped; see the transaction for who."]
                    MembersSwapped,
                    #[codec(index = 3)]
                    #[doc = "The membership was reset; see the transaction for who the new set is."]
                    MembersReset,
                    #[codec(index = 4)]
                    #[doc = "One of the members' keys changed."]
                    KeyChanged,
                    #[codec(index = 5)]
                    #[doc = "Phantom member, never used."]
                    Dummy,
                }
            }
        }
        pub mod pallet_multisig {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "Immediately dispatch a multi-signature call using a single approval from the caller."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be _Signed_."]
                    #[doc = ""]
                    #[doc = "- `other_signatories`: The accounts (other than the sender) who are part of the"]
                    #[doc = "multi-signature, but do not participate in the approval process."]
                    #[doc = "- `call`: The call to be executed."]
                    #[doc = ""]
                    #[doc = "Result is equivalent to the dispatched result."]
                    #[doc = ""]
                    #[doc = "## Complexity"]
                    #[doc = "O(Z + C) where Z is the length of the call and C its execution weight."]
                    as_multi_threshold_1 {
                        other_signatories: ::std::vec::Vec<::subxt::utils::AccountId32>,
                        call: ::std::boxed::Box<runtime_types::node_subtensor_runtime::RuntimeCall>,
                    },
                    #[codec(index = 1)]
                    #[doc = "Register approval for a dispatch to be made from a deterministic composite account if"]
                    #[doc = "approved by a total of `threshold - 1` of `other_signatories`."]
                    #[doc = ""]
                    #[doc = "If there are enough, then dispatch the call."]
                    #[doc = ""]
                    #[doc = "Payment: `DepositBase` will be reserved if this is the first approval, plus"]
                    #[doc = "`threshold` times `DepositFactor`. It is returned once this dispatch happens or"]
                    #[doc = "is cancelled."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be _Signed_."]
                    #[doc = ""]
                    #[doc = "- `threshold`: The total number of approvals for this dispatch before it is executed."]
                    #[doc = "- `other_signatories`: The accounts (other than the sender) who can approve this"]
                    #[doc = "dispatch. May not be empty."]
                    #[doc = "- `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is"]
                    #[doc = "not the first approval, then it must be `Some`, with the timepoint (block number and"]
                    #[doc = "transaction index) of the first approval transaction."]
                    #[doc = "- `call`: The call to be executed."]
                    #[doc = ""]
                    #[doc = "NOTE: Unless this is the final approval, you will generally want to use"]
                    #[doc = "`approve_as_multi` instead, since it only requires a hash of the call."]
                    #[doc = ""]
                    #[doc = "Result is equivalent to the dispatched result if `threshold` is exactly `1`. Otherwise"]
                    #[doc = "on success, result is `Ok` and the result from the interior call, if it was executed,"]
                    #[doc = "may be found in the deposited `MultisigExecuted` event."]
                    #[doc = ""]
                    #[doc = "## Complexity"]
                    #[doc = "- `O(S + Z + Call)`."]
                    #[doc = "- Up to one balance-reserve or unreserve operation."]
                    #[doc = "- One passthrough operation, one insert, both `O(S)` where `S` is the number of"]
                    #[doc = "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional."]
                    #[doc = "- One call encode & hash, both of complexity `O(Z)` where `Z` is tx-len."]
                    #[doc = "- One encode & hash, both of complexity `O(S)`."]
                    #[doc = "- Up to one binary search and insert (`O(logS + S)`)."]
                    #[doc = "- I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove."]
                    #[doc = "- One event."]
                    #[doc = "- The weight of the `call`."]
                    #[doc = "- Storage: inserts one item, value size bounded by `MaxSignatories`, with a deposit"]
                    #[doc = "  taken for its lifetime of `DepositBase + threshold * DepositFactor`."]
                    as_multi {
                        threshold: ::core::primitive::u16,
                        other_signatories: ::std::vec::Vec<::subxt::utils::AccountId32>,
                        maybe_timepoint: ::core::option::Option<
                            runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
                        >,
                        call: ::std::boxed::Box<runtime_types::node_subtensor_runtime::RuntimeCall>,
                        max_weight: runtime_types::sp_weights::weight_v2::Weight,
                    },
                    #[codec(index = 2)]
                    #[doc = "Register approval for a dispatch to be made from a deterministic composite account if"]
                    #[doc = "approved by a total of `threshold - 1` of `other_signatories`."]
                    #[doc = ""]
                    #[doc = "Payment: `DepositBase` will be reserved if this is the first approval, plus"]
                    #[doc = "`threshold` times `DepositFactor`. It is returned once this dispatch happens or"]
                    #[doc = "is cancelled."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be _Signed_."]
                    #[doc = ""]
                    #[doc = "- `threshold`: The total number of approvals for this dispatch before it is executed."]
                    #[doc = "- `other_signatories`: The accounts (other than the sender) who can approve this"]
                    #[doc = "dispatch. May not be empty."]
                    #[doc = "- `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is"]
                    #[doc = "not the first approval, then it must be `Some`, with the timepoint (block number and"]
                    #[doc = "transaction index) of the first approval transaction."]
                    #[doc = "- `call_hash`: The hash of the call to be executed."]
                    #[doc = ""]
                    #[doc = "NOTE: If this is the final approval, you will want to use `as_multi` instead."]
                    #[doc = ""]
                    #[doc = "## Complexity"]
                    #[doc = "- `O(S)`."]
                    #[doc = "- Up to one balance-reserve or unreserve operation."]
                    #[doc = "- One passthrough operation, one insert, both `O(S)` where `S` is the number of"]
                    #[doc = "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional."]
                    #[doc = "- One encode & hash, both of complexity `O(S)`."]
                    #[doc = "- Up to one binary search and insert (`O(logS + S)`)."]
                    #[doc = "- I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove."]
                    #[doc = "- One event."]
                    #[doc = "- Storage: inserts one item, value size bounded by `MaxSignatories`, with a deposit"]
                    #[doc = "  taken for its lifetime of `DepositBase + threshold * DepositFactor`."]
                    approve_as_multi {
                        threshold: ::core::primitive::u16,
                        other_signatories: ::std::vec::Vec<::subxt::utils::AccountId32>,
                        maybe_timepoint: ::core::option::Option<
                            runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
                        >,
                        call_hash: [::core::primitive::u8; 32usize],
                        max_weight: runtime_types::sp_weights::weight_v2::Weight,
                    },
                    #[codec(index = 3)]
                    #[doc = "Cancel a pre-existing, on-going multisig transaction. Any deposit reserved previously"]
                    #[doc = "for this operation will be unreserved on success."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be _Signed_."]
                    #[doc = ""]
                    #[doc = "- `threshold`: The total number of approvals for this dispatch before it is executed."]
                    #[doc = "- `other_signatories`: The accounts (other than the sender) who can approve this"]
                    #[doc = "dispatch. May not be empty."]
                    #[doc = "- `timepoint`: The timepoint (block number and transaction index) of the first approval"]
                    #[doc = "transaction for this dispatch."]
                    #[doc = "- `call_hash`: The hash of the call to be executed."]
                    #[doc = ""]
                    #[doc = "## Complexity"]
                    #[doc = "- `O(S)`."]
                    #[doc = "- Up to one balance-reserve or unreserve operation."]
                    #[doc = "- One passthrough operation, one insert, both `O(S)` where `S` is the number of"]
                    #[doc = "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional."]
                    #[doc = "- One encode & hash, both of complexity `O(S)`."]
                    #[doc = "- One event."]
                    #[doc = "- I/O: 1 read `O(S)`, one remove."]
                    #[doc = "- Storage: removes one item."]
                    cancel_as_multi {
                        threshold: ::core::primitive::u16,
                        other_signatories: ::std::vec::Vec<::subxt::utils::AccountId32>,
                        timepoint:
                            runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
                        call_hash: [::core::primitive::u8; 32usize],
                    },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "Threshold must be 2 or greater."]
                    MinimumThreshold,
                    #[codec(index = 1)]
                    #[doc = "Call is already approved by this signatory."]
                    AlreadyApproved,
                    #[codec(index = 2)]
                    #[doc = "Call doesn't need any (more) approvals."]
                    NoApprovalsNeeded,
                    #[codec(index = 3)]
                    #[doc = "There are too few signatories in the list."]
                    TooFewSignatories,
                    #[codec(index = 4)]
                    #[doc = "There are too many signatories in the list."]
                    TooManySignatories,
                    #[codec(index = 5)]
                    #[doc = "The signatories were provided out of order; they should be ordered."]
                    SignatoriesOutOfOrder,
                    #[codec(index = 6)]
                    #[doc = "The sender was contained in the other signatories; it shouldn't be."]
                    SenderInSignatories,
                    #[codec(index = 7)]
                    #[doc = "Multisig operation not found when attempting to cancel."]
                    NotFound,
                    #[codec(index = 8)]
                    #[doc = "Only the account that originally created the multisig is able to cancel it."]
                    NotOwner,
                    #[codec(index = 9)]
                    #[doc = "No timepoint was given, yet the multisig operation is already underway."]
                    NoTimepoint,
                    #[codec(index = 10)]
                    #[doc = "A different timepoint was given to the multisig operation that is underway."]
                    WrongTimepoint,
                    #[codec(index = 11)]
                    #[doc = "A timepoint was given, yet no multisig operation is underway."]
                    UnexpectedTimepoint,
                    #[codec(index = 12)]
                    #[doc = "The maximum weight information provided was too low."]
                    MaxWeightTooLow,
                    #[codec(index = 13)]
                    #[doc = "The data to be stored is already stored."]
                    AlreadyStored,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "A new multisig operation has begun."]
                    NewMultisig {
                        approving: ::subxt::utils::AccountId32,
                        multisig: ::subxt::utils::AccountId32,
                        call_hash: [::core::primitive::u8; 32usize],
                    },
                    #[codec(index = 1)]
                    #[doc = "A multisig operation has been approved by someone."]
                    MultisigApproval {
                        approving: ::subxt::utils::AccountId32,
                        timepoint:
                            runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
                        multisig: ::subxt::utils::AccountId32,
                        call_hash: [::core::primitive::u8; 32usize],
                    },
                    #[codec(index = 2)]
                    #[doc = "A multisig operation has been executed."]
                    MultisigExecuted {
                        approving: ::subxt::utils::AccountId32,
                        timepoint:
                            runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
                        multisig: ::subxt::utils::AccountId32,
                        call_hash: [::core::primitive::u8; 32usize],
                        result:
                            ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
                    },
                    #[codec(index = 3)]
                    #[doc = "A multisig operation has been cancelled."]
                    MultisigCancelled {
                        cancelling: ::subxt::utils::AccountId32,
                        timepoint:
                            runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
                        multisig: ::subxt::utils::AccountId32,
                        call_hash: [::core::primitive::u8; 32usize],
                    },
                }
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Multisig<_0, _1, _2> {
                pub when: runtime_types::pallet_multisig::Timepoint<_0>,
                pub deposit: _1,
                pub depositor: _2,
                pub approvals: runtime_types::bounded_collections::bounded_vec::BoundedVec<_2>,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Timepoint<_0> {
                pub height: _0,
                pub index: ::core::primitive::u32,
            }
        }
        pub mod pallet_preimage {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "Register a preimage on-chain."]
                    #[doc = ""]
                    #[doc = "If the preimage was previously requested, no fees or deposits are taken for providing"]
                    #[doc = "the preimage. Otherwise, a deposit is taken proportional to the size of the preimage."]
                    note_preimage {
                        bytes: ::std::vec::Vec<::core::primitive::u8>,
                    },
                    #[codec(index = 1)]
                    #[doc = "Clear an unrequested preimage from the runtime storage."]
                    #[doc = ""]
                    #[doc = "If `len` is provided, then it will be a much cheaper operation."]
                    #[doc = ""]
                    #[doc = "- `hash`: The hash of the preimage to be removed from the store."]
                    #[doc = "- `len`: The length of the preimage of `hash`."]
                    unnote_preimage { hash: ::subxt::utils::H256 },
                    #[codec(index = 2)]
                    #[doc = "Request a preimage be uploaded to the chain without paying any fees or deposits."]
                    #[doc = ""]
                    #[doc = "If the preimage requests has already been provided on-chain, we unreserve any deposit"]
                    #[doc = "a user may have paid, and take the control of the preimage out of their hands."]
                    request_preimage { hash: ::subxt::utils::H256 },
                    #[codec(index = 3)]
                    #[doc = "Clear a previously made request for a preimage."]
                    #[doc = ""]
                    #[doc = "NOTE: THIS MUST NOT BE CALLED ON `hash` MORE TIMES THAN `request_preimage`."]
                    unrequest_preimage { hash: ::subxt::utils::H256 },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "Preimage is too large to store on-chain."]
                    TooBig,
                    #[codec(index = 1)]
                    #[doc = "Preimage has already been noted on-chain."]
                    AlreadyNoted,
                    #[codec(index = 2)]
                    #[doc = "The user is not authorized to perform this action."]
                    NotAuthorized,
                    #[codec(index = 3)]
                    #[doc = "The preimage cannot be removed since it has not yet been noted."]
                    NotNoted,
                    #[codec(index = 4)]
                    #[doc = "A preimage may not be removed when there are outstanding requests."]
                    Requested,
                    #[codec(index = 5)]
                    #[doc = "The preimage request cannot be removed since no outstanding requests exist."]
                    NotRequested,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "A preimage has been noted."]
                    Noted { hash: ::subxt::utils::H256 },
                    #[codec(index = 1)]
                    #[doc = "A preimage has been requested."]
                    Requested { hash: ::subxt::utils::H256 },
                    #[codec(index = 2)]
                    #[doc = "A preimage has ben cleared."]
                    Cleared { hash: ::subxt::utils::H256 },
                }
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub enum RequestStatus<_0, _1> {
                #[codec(index = 0)]
                Unrequested {
                    deposit: (_0, _1),
                    len: ::core::primitive::u32,
                },
                #[codec(index = 1)]
                Requested {
                    deposit: ::core::option::Option<(_0, _1)>,
                    count: ::core::primitive::u32,
                    len: ::core::option::Option<::core::primitive::u32>,
                },
            }
        }
        pub mod pallet_registry {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
                pub enum Call {
                    #[codec(index = 0)]
                    set_identity {
                        identified: ::subxt::utils::AccountId32,
                        info:
                            ::std::boxed::Box<runtime_types::pallet_registry::types::IdentityInfo>,
                    },
                    #[codec(index = 1)]
                    clear_identity {
                        identified: ::subxt::utils::AccountId32,
                    },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "Account attempted to register an identity but doesn't meet the requirements."]
                    CannotRegister,
                    #[codec(index = 1)]
                    #[doc = "Account passed too many additional fields to their identity"]
                    TooManyFields,
                    #[codec(index = 2)]
                    #[doc = "Account doesn't have a registered identity"]
                    NotRegistered,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
                pub enum Event {
                    #[codec(index = 0)]
                    IdentitySet { who: ::subxt::utils::AccountId32 },
                    #[codec(index = 1)]
                    IdentityDissolved { who: ::subxt::utils::AccountId32 },
                }
            }
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub enum Data {
                    #[codec(index = 0)]
                    None,
                    #[codec(index = 1)]
                    Raw0([::core::primitive::u8; 0usize]),
                    #[codec(index = 2)]
                    Raw1([::core::primitive::u8; 1usize]),
                    #[codec(index = 3)]
                    Raw2([::core::primitive::u8; 2usize]),
                    #[codec(index = 4)]
                    Raw3([::core::primitive::u8; 3usize]),
                    #[codec(index = 5)]
                    Raw4([::core::primitive::u8; 4usize]),
                    #[codec(index = 6)]
                    Raw5([::core::primitive::u8; 5usize]),
                    #[codec(index = 7)]
                    Raw6([::core::primitive::u8; 6usize]),
                    #[codec(index = 8)]
                    Raw7([::core::primitive::u8; 7usize]),
                    #[codec(index = 9)]
                    Raw8([::core::primitive::u8; 8usize]),
                    #[codec(index = 10)]
                    Raw9([::core::primitive::u8; 9usize]),
                    #[codec(index = 11)]
                    Raw10([::core::primitive::u8; 10usize]),
                    #[codec(index = 12)]
                    Raw11([::core::primitive::u8; 11usize]),
                    #[codec(index = 13)]
                    Raw12([::core::primitive::u8; 12usize]),
                    #[codec(index = 14)]
                    Raw13([::core::primitive::u8; 13usize]),
                    #[codec(index = 15)]
                    Raw14([::core::primitive::u8; 14usize]),
                    #[codec(index = 16)]
                    Raw15([::core::primitive::u8; 15usize]),
                    #[codec(index = 17)]
                    Raw16([::core::primitive::u8; 16usize]),
                    #[codec(index = 18)]
                    Raw17([::core::primitive::u8; 17usize]),
                    #[codec(index = 19)]
                    Raw18([::core::primitive::u8; 18usize]),
                    #[codec(index = 20)]
                    Raw19([::core::primitive::u8; 19usize]),
                    #[codec(index = 21)]
                    Raw20([::core::primitive::u8; 20usize]),
                    #[codec(index = 22)]
                    Raw21([::core::primitive::u8; 21usize]),
                    #[codec(index = 23)]
                    Raw22([::core::primitive::u8; 22usize]),
                    #[codec(index = 24)]
                    Raw23([::core::primitive::u8; 23usize]),
                    #[codec(index = 25)]
                    Raw24([::core::primitive::u8; 24usize]),
                    #[codec(index = 26)]
                    Raw25([::core::primitive::u8; 25usize]),
                    #[codec(index = 27)]
                    Raw26([::core::primitive::u8; 26usize]),
                    #[codec(index = 28)]
                    Raw27([::core::primitive::u8; 27usize]),
                    #[codec(index = 29)]
                    Raw28([::core::primitive::u8; 28usize]),
                    #[codec(index = 30)]
                    Raw29([::core::primitive::u8; 29usize]),
                    #[codec(index = 31)]
                    Raw30([::core::primitive::u8; 30usize]),
                    #[codec(index = 32)]
                    Raw31([::core::primitive::u8; 31usize]),
                    #[codec(index = 33)]
                    Raw32([::core::primitive::u8; 32usize]),
                    #[codec(index = 34)]
                    Raw33([::core::primitive::u8; 33usize]),
                    #[codec(index = 35)]
                    Raw34([::core::primitive::u8; 34usize]),
                    #[codec(index = 36)]
                    Raw35([::core::primitive::u8; 35usize]),
                    #[codec(index = 37)]
                    Raw36([::core::primitive::u8; 36usize]),
                    #[codec(index = 38)]
                    Raw37([::core::primitive::u8; 37usize]),
                    #[codec(index = 39)]
                    Raw38([::core::primitive::u8; 38usize]),
                    #[codec(index = 40)]
                    Raw39([::core::primitive::u8; 39usize]),
                    #[codec(index = 41)]
                    Raw40([::core::primitive::u8; 40usize]),
                    #[codec(index = 42)]
                    Raw41([::core::primitive::u8; 41usize]),
                    #[codec(index = 43)]
                    Raw42([::core::primitive::u8; 42usize]),
                    #[codec(index = 44)]
                    Raw43([::core::primitive::u8; 43usize]),
                    #[codec(index = 45)]
                    Raw44([::core::primitive::u8; 44usize]),
                    #[codec(index = 46)]
                    Raw45([::core::primitive::u8; 45usize]),
                    #[codec(index = 47)]
                    Raw46([::core::primitive::u8; 46usize]),
                    #[codec(index = 48)]
                    Raw47([::core::primitive::u8; 47usize]),
                    #[codec(index = 49)]
                    Raw48([::core::primitive::u8; 48usize]),
                    #[codec(index = 50)]
                    Raw49([::core::primitive::u8; 49usize]),
                    #[codec(index = 51)]
                    Raw50([::core::primitive::u8; 50usize]),
                    #[codec(index = 52)]
                    Raw51([::core::primitive::u8; 51usize]),
                    #[codec(index = 53)]
                    Raw52([::core::primitive::u8; 52usize]),
                    #[codec(index = 54)]
                    Raw53([::core::primitive::u8; 53usize]),
                    #[codec(index = 55)]
                    Raw54([::core::primitive::u8; 54usize]),
                    #[codec(index = 56)]
                    Raw55([::core::primitive::u8; 55usize]),
                    #[codec(index = 57)]
                    Raw56([::core::primitive::u8; 56usize]),
                    #[codec(index = 58)]
                    Raw57([::core::primitive::u8; 57usize]),
                    #[codec(index = 59)]
                    Raw58([::core::primitive::u8; 58usize]),
                    #[codec(index = 60)]
                    Raw59([::core::primitive::u8; 59usize]),
                    #[codec(index = 61)]
                    Raw60([::core::primitive::u8; 60usize]),
                    #[codec(index = 62)]
                    Raw61([::core::primitive::u8; 61usize]),
                    #[codec(index = 63)]
                    Raw62([::core::primitive::u8; 62usize]),
                    #[codec(index = 64)]
                    Raw63([::core::primitive::u8; 63usize]),
                    #[codec(index = 65)]
                    Raw64([::core::primitive::u8; 64usize]),
                    #[codec(index = 66)]
                    BlakeTwo256([::core::primitive::u8; 32usize]),
                    #[codec(index = 67)]
                    Sha256([::core::primitive::u8; 32usize]),
                    #[codec(index = 68)]
                    Keccak256([::core::primitive::u8; 32usize]),
                    #[codec(index = 69)]
                    ShaThree256([::core::primitive::u8; 32usize]),
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct IdentityInfo {
                    pub additional: runtime_types::bounded_collections::bounded_vec::BoundedVec<(
                        runtime_types::pallet_registry::types::Data,
                        runtime_types::pallet_registry::types::Data,
                    )>,
                    pub display: runtime_types::pallet_registry::types::Data,
                    pub legal: runtime_types::pallet_registry::types::Data,
                    pub web: runtime_types::pallet_registry::types::Data,
                    pub riot: runtime_types::pallet_registry::types::Data,
                    pub email: runtime_types::pallet_registry::types::Data,
                    pub pgp_fingerprint: ::core::option::Option<[::core::primitive::u8; 20usize]>,
                    pub image: runtime_types::pallet_registry::types::Data,
                    pub twitter: runtime_types::pallet_registry::types::Data,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Registration<_0> {
                    pub deposit: _0,
                    pub info: runtime_types::pallet_registry::types::IdentityInfo,
                }
            }
        }
        pub mod pallet_scheduler {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "Anonymously schedule a task."]
                    schedule {
                        when: ::core::primitive::u32,
                        maybe_periodic: ::core::option::Option<(
                            ::core::primitive::u32,
                            ::core::primitive::u32,
                        )>,
                        priority: ::core::primitive::u8,
                        call: ::std::boxed::Box<runtime_types::node_subtensor_runtime::RuntimeCall>,
                    },
                    #[codec(index = 1)]
                    #[doc = "Cancel an anonymously scheduled task."]
                    cancel {
                        when: ::core::primitive::u32,
                        index: ::core::primitive::u32,
                    },
                    #[codec(index = 2)]
                    #[doc = "Schedule a named task."]
                    schedule_named {
                        id: [::core::primitive::u8; 32usize],
                        when: ::core::primitive::u32,
                        maybe_periodic: ::core::option::Option<(
                            ::core::primitive::u32,
                            ::core::primitive::u32,
                        )>,
                        priority: ::core::primitive::u8,
                        call: ::std::boxed::Box<runtime_types::node_subtensor_runtime::RuntimeCall>,
                    },
                    #[codec(index = 3)]
                    #[doc = "Cancel a named scheduled task."]
                    cancel_named {
                        id: [::core::primitive::u8; 32usize],
                    },
                    #[codec(index = 4)]
                    #[doc = "Anonymously schedule a task after a delay."]
                    schedule_after {
                        after: ::core::primitive::u32,
                        maybe_periodic: ::core::option::Option<(
                            ::core::primitive::u32,
                            ::core::primitive::u32,
                        )>,
                        priority: ::core::primitive::u8,
                        call: ::std::boxed::Box<runtime_types::node_subtensor_runtime::RuntimeCall>,
                    },
                    #[codec(index = 5)]
                    #[doc = "Schedule a named task after a delay."]
                    schedule_named_after {
                        id: [::core::primitive::u8; 32usize],
                        after: ::core::primitive::u32,
                        maybe_periodic: ::core::option::Option<(
                            ::core::primitive::u32,
                            ::core::primitive::u32,
                        )>,
                        priority: ::core::primitive::u8,
                        call: ::std::boxed::Box<runtime_types::node_subtensor_runtime::RuntimeCall>,
                    },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "Failed to schedule a call"]
                    FailedToSchedule,
                    #[codec(index = 1)]
                    #[doc = "Cannot find the scheduled call."]
                    NotFound,
                    #[codec(index = 2)]
                    #[doc = "Given target block number is in the past."]
                    TargetBlockNumberInPast,
                    #[codec(index = 3)]
                    #[doc = "Reschedule failed because it does not change scheduled time."]
                    RescheduleNoChange,
                    #[codec(index = 4)]
                    #[doc = "Attempt to use a non-named function on a named task."]
                    Named,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Events type."]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "Scheduled some task."]
                    Scheduled {
                        when: ::core::primitive::u32,
                        index: ::core::primitive::u32,
                    },
                    #[codec(index = 1)]
                    #[doc = "Canceled some task."]
                    Canceled {
                        when: ::core::primitive::u32,
                        index: ::core::primitive::u32,
                    },
                    #[codec(index = 2)]
                    #[doc = "Dispatched some task."]
                    Dispatched {
                        task: (::core::primitive::u32, ::core::primitive::u32),
                        id: ::core::option::Option<[::core::primitive::u8; 32usize]>,
                        result:
                            ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
                    },
                    #[codec(index = 3)]
                    #[doc = "The call for the provided hash was not found so the task has been aborted."]
                    CallUnavailable {
                        task: (::core::primitive::u32, ::core::primitive::u32),
                        id: ::core::option::Option<[::core::primitive::u8; 32usize]>,
                    },
                    #[codec(index = 4)]
                    #[doc = "The given task was unable to be renewed since the agenda is full at that block."]
                    PeriodicFailed {
                        task: (::core::primitive::u32, ::core::primitive::u32),
                        id: ::core::option::Option<[::core::primitive::u8; 32usize]>,
                    },
                    #[codec(index = 5)]
                    #[doc = "The given task can never be executed since it is overweight."]
                    PermanentlyOverweight {
                        task: (::core::primitive::u32, ::core::primitive::u32),
                        id: ::core::option::Option<[::core::primitive::u8; 32usize]>,
                    },
                }
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Scheduled<_0, _1, _2, _3, _4> {
                pub maybe_id: ::core::option::Option<_0>,
                pub priority: ::core::primitive::u8,
                pub call: _1,
                pub maybe_periodic: ::core::option::Option<(_2, _2)>,
                pub origin: _3,
                #[codec(skip)]
                pub __ignore: ::core::marker::PhantomData<_4>,
            }
        }
        pub mod pallet_subtensor {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct AxonInfo {
                    pub block: ::core::primitive::u64,
                    pub version: ::core::primitive::u32,
                    pub ip: ::core::primitive::u128,
                    pub port: ::core::primitive::u16,
                    pub ip_type: ::core::primitive::u8,
                    pub protocol: ::core::primitive::u8,
                    pub placeholder1: ::core::primitive::u8,
                    pub placeholder2: ::core::primitive::u8,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
                pub enum Call {
                    #[codec(index = 0)]
                    set_weights {
                        netuid: ::core::primitive::u16,
                        dests: ::std::vec::Vec<::core::primitive::u16>,
                        weights: ::std::vec::Vec<::core::primitive::u16>,
                        version_key: ::core::primitive::u64,
                    },
                    #[codec(index = 1)]
                    become_delegate { hotkey: ::subxt::utils::AccountId32 },
                    #[codec(index = 2)]
                    add_stake {
                        hotkey: ::subxt::utils::AccountId32,
                        amount_staked: ::core::primitive::u64,
                    },
                    #[codec(index = 3)]
                    remove_stake {
                        hotkey: ::subxt::utils::AccountId32,
                        amount_unstaked: ::core::primitive::u64,
                    },
                    #[codec(index = 4)]
                    serve_axon {
                        netuid: ::core::primitive::u16,
                        version: ::core::primitive::u32,
                        ip: ::core::primitive::u128,
                        port: ::core::primitive::u16,
                        ip_type: ::core::primitive::u8,
                        protocol: ::core::primitive::u8,
                        placeholder1: ::core::primitive::u8,
                        placeholder2: ::core::primitive::u8,
                    },
                    #[codec(index = 5)]
                    serve_prometheus {
                        netuid: ::core::primitive::u16,
                        version: ::core::primitive::u32,
                        ip: ::core::primitive::u128,
                        port: ::core::primitive::u16,
                        ip_type: ::core::primitive::u8,
                    },
                    #[codec(index = 6)]
                    register {
                        netuid: ::core::primitive::u16,
                        block_number: ::core::primitive::u64,
                        nonce: ::core::primitive::u64,
                        work: ::std::vec::Vec<::core::primitive::u8>,
                        hotkey: ::subxt::utils::AccountId32,
                        coldkey: ::subxt::utils::AccountId32,
                    },
                    #[codec(index = 62)]
                    root_register { hotkey: ::subxt::utils::AccountId32 },
                    #[codec(index = 7)]
                    burned_register {
                        netuid: ::core::primitive::u16,
                        hotkey: ::subxt::utils::AccountId32,
                    },
                    #[codec(index = 70)]
                    swap_hotkey {
                        hotkey: ::subxt::utils::AccountId32,
                        new_hotkey: ::subxt::utils::AccountId32,
                    },
                    #[codec(index = 51)]
                    #[doc = "Authenticates a council proposal and dispatches a function call with `Root` origin."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be a council majority."]
                    #[doc = ""]
                    #[doc = "## Complexity"]
                    #[doc = "- O(1)."]
                    sudo {
                        call: ::std::boxed::Box<runtime_types::node_subtensor_runtime::RuntimeCall>,
                    },
                    #[codec(index = 52)]
                    #[doc = "Authenticates a council proposal and dispatches a function call with `Root` origin."]
                    #[doc = "This function does not check the weight of the call, and instead allows the"]
                    #[doc = "user to specify the weight of the call."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be a council majority."]
                    #[doc = ""]
                    #[doc = "## Complexity"]
                    #[doc = "- O(1)."]
                    sudo_unchecked_weight {
                        call: ::std::boxed::Box<runtime_types::node_subtensor_runtime::RuntimeCall>,
                        weight: runtime_types::sp_weights::weight_v2::Weight,
                    },
                    #[codec(index = 55)]
                    vote {
                        hotkey: ::subxt::utils::AccountId32,
                        proposal: ::subxt::utils::H256,
                        #[codec(compact)]
                        index: ::core::primitive::u32,
                        approve: ::core::primitive::bool,
                    },
                    #[codec(index = 59)]
                    register_network,
                    #[codec(index = 60)]
                    faucet {
                        block_number: ::core::primitive::u64,
                        nonce: ::core::primitive::u64,
                        work: ::std::vec::Vec<::core::primitive::u8>,
                    },
                    #[codec(index = 61)]
                    dissolve_network { netuid: ::core::primitive::u16 },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
                pub enum Error {
                    #[codec(index = 0)]
                    NetworkDoesNotExist,
                    #[codec(index = 1)]
                    NetworkExist,
                    #[codec(index = 2)]
                    InvalidModality,
                    #[codec(index = 3)]
                    InvalidIpType,
                    #[codec(index = 4)]
                    InvalidIpAddress,
                    #[codec(index = 5)]
                    InvalidPort,
                    #[codec(index = 6)]
                    NotRegistered,
                    #[codec(index = 7)]
                    NonAssociatedColdKey,
                    #[codec(index = 8)]
                    NotEnoughStaketoWithdraw,
                    #[codec(index = 9)]
                    NotEnoughBalanceToStake,
                    #[codec(index = 10)]
                    BalanceWithdrawalError,
                    #[codec(index = 11)]
                    NoValidatorPermit,
                    #[codec(index = 12)]
                    WeightVecNotEqualSize,
                    #[codec(index = 13)]
                    DuplicateUids,
                    #[codec(index = 14)]
                    InvalidUid,
                    #[codec(index = 15)]
                    NotSettingEnoughWeights,
                    #[codec(index = 16)]
                    TooManyRegistrationsThisBlock,
                    #[codec(index = 17)]
                    AlreadyRegistered,
                    #[codec(index = 18)]
                    InvalidWorkBlock,
                    #[codec(index = 19)]
                    InvalidDifficulty,
                    #[codec(index = 20)]
                    InvalidSeal,
                    #[codec(index = 21)]
                    MaxAllowedUIdsNotAllowed,
                    #[codec(index = 22)]
                    CouldNotConvertToBalance,
                    #[codec(index = 23)]
                    StakeAlreadyAdded,
                    #[codec(index = 24)]
                    MaxWeightExceeded,
                    #[codec(index = 25)]
                    StorageValueOutOfRange,
                    #[codec(index = 26)]
                    TempoHasNotSet,
                    #[codec(index = 27)]
                    InvalidTempo,
                    #[codec(index = 28)]
                    EmissionValuesDoesNotMatchNetworks,
                    #[codec(index = 29)]
                    InvalidEmissionValues,
                    #[codec(index = 30)]
                    AlreadyDelegate,
                    #[codec(index = 31)]
                    SettingWeightsTooFast,
                    #[codec(index = 32)]
                    IncorrectNetworkVersionKey,
                    #[codec(index = 33)]
                    ServingRateLimitExceeded,
                    #[codec(index = 34)]
                    BalanceSetError,
                    #[codec(index = 35)]
                    MaxAllowedUidsExceeded,
                    #[codec(index = 36)]
                    TooManyUids,
                    #[codec(index = 37)]
                    TxRateLimitExceeded,
                    #[codec(index = 38)]
                    RegistrationDisabled,
                    #[codec(index = 39)]
                    TooManyRegistrationsThisInterval,
                    #[codec(index = 40)]
                    BenchmarkingOnly,
                    #[codec(index = 41)]
                    HotkeyOriginMismatch,
                    #[codec(index = 42)]
                    SenateMember,
                    #[codec(index = 43)]
                    NotSenateMember,
                    #[codec(index = 44)]
                    AlreadySenateMember,
                    #[codec(index = 45)]
                    BelowStakeThreshold,
                    #[codec(index = 46)]
                    NotDelegate,
                    #[codec(index = 47)]
                    IncorrectNetuidsLength,
                    #[codec(index = 48)]
                    FaucetDisabled,
                    #[codec(index = 49)]
                    NotSubnetOwner,
                    #[codec(index = 50)]
                    OperationNotPermittedonRootSubnet,
                    #[codec(index = 51)]
                    StakeTooLowForRoot,
                    #[codec(index = 52)]
                    AllNetworksInImmunity,
                    #[codec(index = 53)]
                    NotEnoughBalance,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
                pub enum Event {
                    #[codec(index = 0)]
                    NetworkAdded(::core::primitive::u16, ::core::primitive::u16),
                    #[codec(index = 1)]
                    NetworkRemoved(::core::primitive::u16),
                    #[codec(index = 2)]
                    StakeAdded(::subxt::utils::AccountId32, ::core::primitive::u64),
                    #[codec(index = 3)]
                    StakeRemoved(::subxt::utils::AccountId32, ::core::primitive::u64),
                    #[codec(index = 4)]
                    WeightsSet(::core::primitive::u16, ::core::primitive::u16),
                    #[codec(index = 5)]
                    NeuronRegistered(
                        ::core::primitive::u16,
                        ::core::primitive::u16,
                        ::subxt::utils::AccountId32,
                    ),
                    #[codec(index = 6)]
                    BulkNeuronsRegistered(::core::primitive::u16, ::core::primitive::u16),
                    #[codec(index = 7)]
                    BulkBalancesSet(::core::primitive::u16, ::core::primitive::u16),
                    #[codec(index = 8)]
                    MaxAllowedUidsSet(::core::primitive::u16, ::core::primitive::u16),
                    #[codec(index = 9)]
                    MaxWeightLimitSet(::core::primitive::u16, ::core::primitive::u16),
                    #[codec(index = 10)]
                    DifficultySet(::core::primitive::u16, ::core::primitive::u64),
                    #[codec(index = 11)]
                    AdjustmentIntervalSet(::core::primitive::u16, ::core::primitive::u16),
                    #[codec(index = 12)]
                    RegistrationPerIntervalSet(::core::primitive::u16, ::core::primitive::u16),
                    #[codec(index = 13)]
                    MaxRegistrationsPerBlockSet(::core::primitive::u16, ::core::primitive::u16),
                    #[codec(index = 14)]
                    ActivityCutoffSet(::core::primitive::u16, ::core::primitive::u16),
                    #[codec(index = 15)]
                    RhoSet(::core::primitive::u16, ::core::primitive::u16),
                    #[codec(index = 16)]
                    KappaSet(::core::primitive::u16, ::core::primitive::u16),
                    #[codec(index = 17)]
                    MinAllowedWeightSet(::core::primitive::u16, ::core::primitive::u16),
                    #[codec(index = 18)]
                    ValidatorPruneLenSet(::core::primitive::u16, ::core::primitive::u64),
                    #[codec(index = 19)]
                    ScalingLawPowerSet(::core::primitive::u16, ::core::primitive::u16),
                    #[codec(index = 20)]
                    WeightsSetRateLimitSet(::core::primitive::u16, ::core::primitive::u64),
                    #[codec(index = 21)]
                    ImmunityPeriodSet(::core::primitive::u16, ::core::primitive::u16),
                    #[codec(index = 22)]
                    BondsMovingAverageSet(::core::primitive::u16, ::core::primitive::u64),
                    #[codec(index = 23)]
                    MaxAllowedValidatorsSet(::core::primitive::u16, ::core::primitive::u16),
                    #[codec(index = 24)]
                    AxonServed(::core::primitive::u16, ::subxt::utils::AccountId32),
                    #[codec(index = 25)]
                    PrometheusServed(::core::primitive::u16, ::subxt::utils::AccountId32),
                    #[codec(index = 26)]
                    EmissionValuesSet,
                    #[codec(index = 27)]
                    DelegateAdded(
                        ::subxt::utils::AccountId32,
                        ::subxt::utils::AccountId32,
                        ::core::primitive::u16,
                    ),
                    #[codec(index = 28)]
                    DefaultTakeSet(::core::primitive::u16),
                    #[codec(index = 29)]
                    WeightsVersionKeySet(::core::primitive::u16, ::core::primitive::u64),
                    #[codec(index = 30)]
                    MinDifficultySet(::core::primitive::u16, ::core::primitive::u64),
                    #[codec(index = 31)]
                    MaxDifficultySet(::core::primitive::u16, ::core::primitive::u64),
                    #[codec(index = 32)]
                    ServingRateLimitSet(::core::primitive::u16, ::core::primitive::u64),
                    #[codec(index = 33)]
                    BurnSet(::core::primitive::u16, ::core::primitive::u64),
                    #[codec(index = 34)]
                    MaxBurnSet(::core::primitive::u16, ::core::primitive::u64),
                    #[codec(index = 35)]
                    MinBurnSet(::core::primitive::u16, ::core::primitive::u64),
                    #[codec(index = 36)]
                    TxRateLimitSet(::core::primitive::u64),
                    #[codec(index = 37)]
                    Sudid(::core::result::Result<(), runtime_types::sp_runtime::DispatchError>),
                    #[codec(index = 38)]
                    RegistrationAllowed(::core::primitive::u16, ::core::primitive::bool),
                    #[codec(index = 39)]
                    PowRegistrationAllowed(::core::primitive::u16, ::core::primitive::bool),
                    #[codec(index = 40)]
                    TempoSet(::core::primitive::u16, ::core::primitive::u16),
                    #[codec(index = 41)]
                    RAORecycledForRegistrationSet(::core::primitive::u16, ::core::primitive::u64),
                    #[codec(index = 42)]
                    SenateRequiredStakePercentSet(::core::primitive::u64),
                    #[codec(index = 43)]
                    AdjustmentAlphaSet(::core::primitive::u16, ::core::primitive::u64),
                    #[codec(index = 44)]
                    Faucet(::subxt::utils::AccountId32, ::core::primitive::u64),
                    #[codec(index = 45)]
                    SubnetOwnerCutSet(::core::primitive::u16),
                    #[codec(index = 46)]
                    NetworkRateLimitSet(::core::primitive::u64),
                    #[codec(index = 47)]
                    NetworkImmunityPeriodSet(::core::primitive::u64),
                    #[codec(index = 48)]
                    NetworkMinLockCostSet(::core::primitive::u64),
                    #[codec(index = 49)]
                    SubnetLimitSet(::core::primitive::u16),
                    #[codec(index = 50)]
                    NetworkLockCostReductionIntervalSet(::core::primitive::u64),
                    #[codec(index = 51)]
                    HotkeySwapped {
                        coldkey: ::subxt::utils::AccountId32,
                        old_hotkey: ::subxt::utils::AccountId32,
                        new_hotkey: ::subxt::utils::AccountId32,
                    },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct PrometheusInfo {
                    pub block: ::core::primitive::u64,
                    pub version: ::core::primitive::u32,
                    pub ip: ::core::primitive::u128,
                    pub port: ::core::primitive::u16,
                    pub ip_type: ::core::primitive::u8,
                }
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct SubtensorSignedExtension<_0>(pub ::core::marker::PhantomData<_0>);
        }
        pub mod pallet_sudo {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "Authenticates the sudo key and dispatches a function call with `Root` origin."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be _Signed_."]
                    #[doc = ""]
                    #[doc = "## Complexity"]
                    #[doc = "- O(1)."]
                    sudo {
                        call: ::std::boxed::Box<runtime_types::node_subtensor_runtime::RuntimeCall>,
                    },
                    #[codec(index = 1)]
                    #[doc = "Authenticates the sudo key and dispatches a function call with `Root` origin."]
                    #[doc = "This function does not check the weight of the call, and instead allows the"]
                    #[doc = "Sudo user to specify the weight of the call."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be _Signed_."]
                    #[doc = ""]
                    #[doc = "## Complexity"]
                    #[doc = "- O(1)."]
                    sudo_unchecked_weight {
                        call: ::std::boxed::Box<runtime_types::node_subtensor_runtime::RuntimeCall>,
                        weight: runtime_types::sp_weights::weight_v2::Weight,
                    },
                    #[codec(index = 2)]
                    #[doc = "Authenticates the current sudo key and sets the given AccountId (`new`) as the new sudo"]
                    #[doc = "key."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be _Signed_."]
                    #[doc = ""]
                    #[doc = "## Complexity"]
                    #[doc = "- O(1)."]
                    set_key {
                        new: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                    },
                    #[codec(index = 3)]
                    #[doc = "Authenticates the sudo key and dispatches a function call with `Signed` origin from"]
                    #[doc = "a given account."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be _Signed_."]
                    #[doc = ""]
                    #[doc = "## Complexity"]
                    #[doc = "- O(1)."]
                    sudo_as {
                        who: ::subxt::utils::MultiAddress<::subxt::utils::AccountId32, ()>,
                        call: ::std::boxed::Box<runtime_types::node_subtensor_runtime::RuntimeCall>,
                    },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Error for the Sudo pallet"]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "Sender must be the Sudo account"]
                    RequireSudo,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "A sudo just took place. \\[result\\]"]
                    Sudid {
                        sudo_result:
                            ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
                    },
                    #[codec(index = 1)]
                    #[doc = "The \\[sudoer\\] just switched identity; the old key is supplied if one existed."]
                    KeyChanged {
                        old_sudoer: ::core::option::Option<::subxt::utils::AccountId32>,
                    },
                    #[codec(index = 2)]
                    #[doc = "A sudo just took place. \\[result\\]"]
                    SudoAsDone {
                        sudo_result:
                            ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
                    },
                }
            }
        }
        pub mod pallet_timestamp {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "Set the current time."]
                    #[doc = ""]
                    #[doc = "This call should be invoked exactly once per block. It will panic at the finalization"]
                    #[doc = "phase, if this call hasn't been invoked by that time."]
                    #[doc = ""]
                    #[doc = "The timestamp should be greater than the previous one by the amount specified by"]
                    #[doc = "`MinimumPeriod`."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be `Inherent`."]
                    #[doc = ""]
                    #[doc = "## Complexity"]
                    #[doc = "- `O(1)` (Note that implementations of `OnTimestampSet` must also be `O(1)`)"]
                    #[doc = "- 1 storage read and 1 storage mutation (codec `O(1)`). (because of `DidUpdate::take` in"]
                    #[doc = "  `on_finalize`)"]
                    #[doc = "- 1 event handler `on_timestamp_set`. Must be `O(1)`."]
                    set {
                        #[codec(compact)]
                        now: ::core::primitive::u64,
                    },
                }
            }
        }
        pub mod pallet_transaction_payment {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "A transaction fee `actual_fee`, of which `tip` was added to the minimum inclusion fee,"]
                    #[doc = "has been paid by `who`."]
                    TransactionFeePaid {
                        who: ::subxt::utils::AccountId32,
                        actual_fee: ::core::primitive::u64,
                        tip: ::core::primitive::u64,
                    },
                }
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct ChargeTransactionPayment(#[codec(compact)] pub ::core::primitive::u64);
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub enum Releases {
                #[codec(index = 0)]
                V1Ancient,
                #[codec(index = 1)]
                V2,
            }
        }
        pub mod pallet_utility {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "Send a batch of dispatch calls."]
                    #[doc = ""]
                    #[doc = "May be called from any origin except `None`."]
                    #[doc = ""]
                    #[doc = "- `calls`: The calls to be dispatched from the same origin. The number of call must not"]
                    #[doc = "  exceed the constant: `batched_calls_limit` (available in constant metadata)."]
                    #[doc = ""]
                    #[doc = "If origin is root then the calls are dispatched without checking origin filter. (This"]
                    #[doc = "includes bypassing `frame_system::Config::BaseCallFilter`)."]
                    #[doc = ""]
                    #[doc = "## Complexity"]
                    #[doc = "- O(C) where C is the number of calls to be batched."]
                    #[doc = ""]
                    #[doc = "This will return `Ok` in all circumstances. To determine the success of the batch, an"]
                    #[doc = "event is deposited. If a call failed and the batch was interrupted, then the"]
                    #[doc = "`BatchInterrupted` event is deposited, along with the number of successful calls made"]
                    #[doc = "and the error of the failed call. If all were successful, then the `BatchCompleted`"]
                    #[doc = "event is deposited."]
                    batch {
                        calls: ::std::vec::Vec<runtime_types::node_subtensor_runtime::RuntimeCall>,
                    },
                    #[codec(index = 1)]
                    #[doc = "Send a call through an indexed pseudonym of the sender."]
                    #[doc = ""]
                    #[doc = "Filter from origin are passed along. The call will be dispatched with an origin which"]
                    #[doc = "use the same filter as the origin of this call."]
                    #[doc = ""]
                    #[doc = "NOTE: If you need to ensure that any account-based filtering is not honored (i.e."]
                    #[doc = "because you expect `proxy` to have been used prior in the call stack and you do not want"]
                    #[doc = "the call restrictions to apply to any sub-accounts), then use `as_multi_threshold_1`"]
                    #[doc = "in the Multisig pallet instead."]
                    #[doc = ""]
                    #[doc = "NOTE: Prior to version *12, this was called `as_limited_sub`."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be _Signed_."]
                    as_derivative {
                        index: ::core::primitive::u16,
                        call: ::std::boxed::Box<runtime_types::node_subtensor_runtime::RuntimeCall>,
                    },
                    #[codec(index = 2)]
                    #[doc = "Send a batch of dispatch calls and atomically execute them."]
                    #[doc = "The whole transaction will rollback and fail if any of the calls failed."]
                    #[doc = ""]
                    #[doc = "May be called from any origin except `None`."]
                    #[doc = ""]
                    #[doc = "- `calls`: The calls to be dispatched from the same origin. The number of call must not"]
                    #[doc = "  exceed the constant: `batched_calls_limit` (available in constant metadata)."]
                    #[doc = ""]
                    #[doc = "If origin is root then the calls are dispatched without checking origin filter. (This"]
                    #[doc = "includes bypassing `frame_system::Config::BaseCallFilter`)."]
                    #[doc = ""]
                    #[doc = "## Complexity"]
                    #[doc = "- O(C) where C is the number of calls to be batched."]
                    batch_all {
                        calls: ::std::vec::Vec<runtime_types::node_subtensor_runtime::RuntimeCall>,
                    },
                    #[codec(index = 3)]
                    #[doc = "Dispatches a function call with a provided origin."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be _Root_."]
                    #[doc = ""]
                    #[doc = "## Complexity"]
                    #[doc = "- O(1)."]
                    dispatch_as {
                        as_origin:
                            ::std::boxed::Box<runtime_types::node_subtensor_runtime::OriginCaller>,
                        call: ::std::boxed::Box<runtime_types::node_subtensor_runtime::RuntimeCall>,
                    },
                    #[codec(index = 4)]
                    #[doc = "Send a batch of dispatch calls."]
                    #[doc = "Unlike `batch`, it allows errors and won't interrupt."]
                    #[doc = ""]
                    #[doc = "May be called from any origin except `None`."]
                    #[doc = ""]
                    #[doc = "- `calls`: The calls to be dispatched from the same origin. The number of call must not"]
                    #[doc = "  exceed the constant: `batched_calls_limit` (available in constant metadata)."]
                    #[doc = ""]
                    #[doc = "If origin is root then the calls are dispatch without checking origin filter. (This"]
                    #[doc = "includes bypassing `frame_system::Config::BaseCallFilter`)."]
                    #[doc = ""]
                    #[doc = "## Complexity"]
                    #[doc = "- O(C) where C is the number of calls to be batched."]
                    force_batch {
                        calls: ::std::vec::Vec<runtime_types::node_subtensor_runtime::RuntimeCall>,
                    },
                    #[codec(index = 5)]
                    #[doc = "Dispatch a function call with a specified weight."]
                    #[doc = ""]
                    #[doc = "This function does not check the weight of the call, and instead allows the"]
                    #[doc = "Root origin to specify the weight of the call."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be _Root_."]
                    with_weight {
                        call: ::std::boxed::Box<runtime_types::node_subtensor_runtime::RuntimeCall>,
                        weight: runtime_types::sp_weights::weight_v2::Weight,
                    },
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/main-docs/build/events-errors/)\n\t\t\tof this pallet.\n\t\t\t"]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "Too many calls batched."]
                    TooManyCalls,
                }
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/main-docs/build/events-errors/) emitted\n\t\t\tby this pallet.\n\t\t\t"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "Batch of dispatches did not complete fully. Index of first failing dispatch given, as"]
                    #[doc = "well as the error."]
                    BatchInterrupted {
                        index: ::core::primitive::u32,
                        error: runtime_types::sp_runtime::DispatchError,
                    },
                    #[codec(index = 1)]
                    #[doc = "Batch of dispatches completed fully with no error."]
                    BatchCompleted,
                    #[codec(index = 2)]
                    #[doc = "Batch of dispatches completed but has errors."]
                    BatchCompletedWithErrors,
                    #[codec(index = 3)]
                    #[doc = "A single item within a Batch of dispatches has completed with no error."]
                    ItemCompleted,
                    #[codec(index = 4)]
                    #[doc = "A single item within a Batch of dispatches has completed with error."]
                    ItemFailed {
                        error: runtime_types::sp_runtime::DispatchError,
                    },
                    #[codec(index = 5)]
                    #[doc = "A call was dispatched."]
                    DispatchedAs {
                        result:
                            ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
                    },
                }
            }
        }
        pub mod sp_arithmetic {
            use super::runtime_types;
            pub mod fixed_point {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: CompactAs,
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct FixedU128(pub ::core::primitive::u128);
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub enum ArithmeticError {
                #[codec(index = 0)]
                Underflow,
                #[codec(index = 1)]
                Overflow,
                #[codec(index = 2)]
                DivisionByZero,
            }
        }
        pub mod sp_consensus_aura {
            use super::runtime_types;
            pub mod sr25519 {
                use super::runtime_types;
                pub mod app_sr25519 {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        :: subxt :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: codec)]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub struct Public(pub runtime_types::sp_core::sr25519::Public);
                }
            }
        }
        pub mod sp_consensus_slots {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: CompactAs,
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct Slot(pub ::core::primitive::u64);
        }
        pub mod sp_core {
            use super::runtime_types;
            pub mod ecdsa {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Signature(pub [::core::primitive::u8; 65usize]);
            }
            pub mod ed25519 {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Public(pub [::core::primitive::u8; 32usize]);
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Signature(pub [::core::primitive::u8; 64usize]);
            }
            pub mod sr25519 {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Public(pub [::core::primitive::u8; 32usize]);
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Signature(pub [::core::primitive::u8; 64usize]);
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub enum Void {}
        }
        pub mod sp_finality_grandpa {
            use super::runtime_types;
            pub mod app {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Public(pub runtime_types::sp_core::ed25519::Public);
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Signature(pub runtime_types::sp_core::ed25519::Signature);
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub enum Equivocation<_0, _1> {
                #[codec(index = 0)]
                Prevote(
                    runtime_types::finality_grandpa::Equivocation<
                        runtime_types::sp_finality_grandpa::app::Public,
                        runtime_types::finality_grandpa::Prevote<_0, _1>,
                        runtime_types::sp_finality_grandpa::app::Signature,
                    >,
                ),
                #[codec(index = 1)]
                Precommit(
                    runtime_types::finality_grandpa::Equivocation<
                        runtime_types::sp_finality_grandpa::app::Public,
                        runtime_types::finality_grandpa::Precommit<_0, _1>,
                        runtime_types::sp_finality_grandpa::app::Signature,
                    >,
                ),
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct EquivocationProof<_0, _1> {
                pub set_id: ::core::primitive::u64,
                pub equivocation: runtime_types::sp_finality_grandpa::Equivocation<_0, _1>,
            }
        }
        pub mod sp_runtime {
            use super::runtime_types;
            pub mod generic {
                use super::runtime_types;
                pub mod digest {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        :: subxt :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: codec)]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub struct Digest {
                        pub logs:
                            ::std::vec::Vec<runtime_types::sp_runtime::generic::digest::DigestItem>,
                    }
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        :: subxt :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: codec)]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub enum DigestItem {
                        #[codec(index = 6)]
                        PreRuntime(
                            [::core::primitive::u8; 4usize],
                            ::std::vec::Vec<::core::primitive::u8>,
                        ),
                        #[codec(index = 4)]
                        Consensus(
                            [::core::primitive::u8; 4usize],
                            ::std::vec::Vec<::core::primitive::u8>,
                        ),
                        #[codec(index = 5)]
                        Seal(
                            [::core::primitive::u8; 4usize],
                            ::std::vec::Vec<::core::primitive::u8>,
                        ),
                        #[codec(index = 0)]
                        Other(::std::vec::Vec<::core::primitive::u8>),
                        #[codec(index = 8)]
                        RuntimeEnvironmentUpdated,
                    }
                }
                pub mod era {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: ext :: codec :: Decode,
                        :: subxt :: ext :: codec :: Encode,
                        :: subxt :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: scale_encode :: EncodeAsType,
                        Debug,
                    )]
                    # [codec (crate = :: subxt :: ext :: codec)]
                    #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                    #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                    pub enum Era {
                        #[codec(index = 0)]
                        Immortal,
                        #[codec(index = 1)]
                        Mortal1(::core::primitive::u8),
                        #[codec(index = 2)]
                        Mortal2(::core::primitive::u8),
                        #[codec(index = 3)]
                        Mortal3(::core::primitive::u8),
                        #[codec(index = 4)]
                        Mortal4(::core::primitive::u8),
                        #[codec(index = 5)]
                        Mortal5(::core::primitive::u8),
                        #[codec(index = 6)]
                        Mortal6(::core::primitive::u8),
                        #[codec(index = 7)]
                        Mortal7(::core::primitive::u8),
                        #[codec(index = 8)]
                        Mortal8(::core::primitive::u8),
                        #[codec(index = 9)]
                        Mortal9(::core::primitive::u8),
                        #[codec(index = 10)]
                        Mortal10(::core::primitive::u8),
                        #[codec(index = 11)]
                        Mortal11(::core::primitive::u8),
                        #[codec(index = 12)]
                        Mortal12(::core::primitive::u8),
                        #[codec(index = 13)]
                        Mortal13(::core::primitive::u8),
                        #[codec(index = 14)]
                        Mortal14(::core::primitive::u8),
                        #[codec(index = 15)]
                        Mortal15(::core::primitive::u8),
                        #[codec(index = 16)]
                        Mortal16(::core::primitive::u8),
                        #[codec(index = 17)]
                        Mortal17(::core::primitive::u8),
                        #[codec(index = 18)]
                        Mortal18(::core::primitive::u8),
                        #[codec(index = 19)]
                        Mortal19(::core::primitive::u8),
                        #[codec(index = 20)]
                        Mortal20(::core::primitive::u8),
                        #[codec(index = 21)]
                        Mortal21(::core::primitive::u8),
                        #[codec(index = 22)]
                        Mortal22(::core::primitive::u8),
                        #[codec(index = 23)]
                        Mortal23(::core::primitive::u8),
                        #[codec(index = 24)]
                        Mortal24(::core::primitive::u8),
                        #[codec(index = 25)]
                        Mortal25(::core::primitive::u8),
                        #[codec(index = 26)]
                        Mortal26(::core::primitive::u8),
                        #[codec(index = 27)]
                        Mortal27(::core::primitive::u8),
                        #[codec(index = 28)]
                        Mortal28(::core::primitive::u8),
                        #[codec(index = 29)]
                        Mortal29(::core::primitive::u8),
                        #[codec(index = 30)]
                        Mortal30(::core::primitive::u8),
                        #[codec(index = 31)]
                        Mortal31(::core::primitive::u8),
                        #[codec(index = 32)]
                        Mortal32(::core::primitive::u8),
                        #[codec(index = 33)]
                        Mortal33(::core::primitive::u8),
                        #[codec(index = 34)]
                        Mortal34(::core::primitive::u8),
                        #[codec(index = 35)]
                        Mortal35(::core::primitive::u8),
                        #[codec(index = 36)]
                        Mortal36(::core::primitive::u8),
                        #[codec(index = 37)]
                        Mortal37(::core::primitive::u8),
                        #[codec(index = 38)]
                        Mortal38(::core::primitive::u8),
                        #[codec(index = 39)]
                        Mortal39(::core::primitive::u8),
                        #[codec(index = 40)]
                        Mortal40(::core::primitive::u8),
                        #[codec(index = 41)]
                        Mortal41(::core::primitive::u8),
                        #[codec(index = 42)]
                        Mortal42(::core::primitive::u8),
                        #[codec(index = 43)]
                        Mortal43(::core::primitive::u8),
                        #[codec(index = 44)]
                        Mortal44(::core::primitive::u8),
                        #[codec(index = 45)]
                        Mortal45(::core::primitive::u8),
                        #[codec(index = 46)]
                        Mortal46(::core::primitive::u8),
                        #[codec(index = 47)]
                        Mortal47(::core::primitive::u8),
                        #[codec(index = 48)]
                        Mortal48(::core::primitive::u8),
                        #[codec(index = 49)]
                        Mortal49(::core::primitive::u8),
                        #[codec(index = 50)]
                        Mortal50(::core::primitive::u8),
                        #[codec(index = 51)]
                        Mortal51(::core::primitive::u8),
                        #[codec(index = 52)]
                        Mortal52(::core::primitive::u8),
                        #[codec(index = 53)]
                        Mortal53(::core::primitive::u8),
                        #[codec(index = 54)]
                        Mortal54(::core::primitive::u8),
                        #[codec(index = 55)]
                        Mortal55(::core::primitive::u8),
                        #[codec(index = 56)]
                        Mortal56(::core::primitive::u8),
                        #[codec(index = 57)]
                        Mortal57(::core::primitive::u8),
                        #[codec(index = 58)]
                        Mortal58(::core::primitive::u8),
                        #[codec(index = 59)]
                        Mortal59(::core::primitive::u8),
                        #[codec(index = 60)]
                        Mortal60(::core::primitive::u8),
                        #[codec(index = 61)]
                        Mortal61(::core::primitive::u8),
                        #[codec(index = 62)]
                        Mortal62(::core::primitive::u8),
                        #[codec(index = 63)]
                        Mortal63(::core::primitive::u8),
                        #[codec(index = 64)]
                        Mortal64(::core::primitive::u8),
                        #[codec(index = 65)]
                        Mortal65(::core::primitive::u8),
                        #[codec(index = 66)]
                        Mortal66(::core::primitive::u8),
                        #[codec(index = 67)]
                        Mortal67(::core::primitive::u8),
                        #[codec(index = 68)]
                        Mortal68(::core::primitive::u8),
                        #[codec(index = 69)]
                        Mortal69(::core::primitive::u8),
                        #[codec(index = 70)]
                        Mortal70(::core::primitive::u8),
                        #[codec(index = 71)]
                        Mortal71(::core::primitive::u8),
                        #[codec(index = 72)]
                        Mortal72(::core::primitive::u8),
                        #[codec(index = 73)]
                        Mortal73(::core::primitive::u8),
                        #[codec(index = 74)]
                        Mortal74(::core::primitive::u8),
                        #[codec(index = 75)]
                        Mortal75(::core::primitive::u8),
                        #[codec(index = 76)]
                        Mortal76(::core::primitive::u8),
                        #[codec(index = 77)]
                        Mortal77(::core::primitive::u8),
                        #[codec(index = 78)]
                        Mortal78(::core::primitive::u8),
                        #[codec(index = 79)]
                        Mortal79(::core::primitive::u8),
                        #[codec(index = 80)]
                        Mortal80(::core::primitive::u8),
                        #[codec(index = 81)]
                        Mortal81(::core::primitive::u8),
                        #[codec(index = 82)]
                        Mortal82(::core::primitive::u8),
                        #[codec(index = 83)]
                        Mortal83(::core::primitive::u8),
                        #[codec(index = 84)]
                        Mortal84(::core::primitive::u8),
                        #[codec(index = 85)]
                        Mortal85(::core::primitive::u8),
                        #[codec(index = 86)]
                        Mortal86(::core::primitive::u8),
                        #[codec(index = 87)]
                        Mortal87(::core::primitive::u8),
                        #[codec(index = 88)]
                        Mortal88(::core::primitive::u8),
                        #[codec(index = 89)]
                        Mortal89(::core::primitive::u8),
                        #[codec(index = 90)]
                        Mortal90(::core::primitive::u8),
                        #[codec(index = 91)]
                        Mortal91(::core::primitive::u8),
                        #[codec(index = 92)]
                        Mortal92(::core::primitive::u8),
                        #[codec(index = 93)]
                        Mortal93(::core::primitive::u8),
                        #[codec(index = 94)]
                        Mortal94(::core::primitive::u8),
                        #[codec(index = 95)]
                        Mortal95(::core::primitive::u8),
                        #[codec(index = 96)]
                        Mortal96(::core::primitive::u8),
                        #[codec(index = 97)]
                        Mortal97(::core::primitive::u8),
                        #[codec(index = 98)]
                        Mortal98(::core::primitive::u8),
                        #[codec(index = 99)]
                        Mortal99(::core::primitive::u8),
                        #[codec(index = 100)]
                        Mortal100(::core::primitive::u8),
                        #[codec(index = 101)]
                        Mortal101(::core::primitive::u8),
                        #[codec(index = 102)]
                        Mortal102(::core::primitive::u8),
                        #[codec(index = 103)]
                        Mortal103(::core::primitive::u8),
                        #[codec(index = 104)]
                        Mortal104(::core::primitive::u8),
                        #[codec(index = 105)]
                        Mortal105(::core::primitive::u8),
                        #[codec(index = 106)]
                        Mortal106(::core::primitive::u8),
                        #[codec(index = 107)]
                        Mortal107(::core::primitive::u8),
                        #[codec(index = 108)]
                        Mortal108(::core::primitive::u8),
                        #[codec(index = 109)]
                        Mortal109(::core::primitive::u8),
                        #[codec(index = 110)]
                        Mortal110(::core::primitive::u8),
                        #[codec(index = 111)]
                        Mortal111(::core::primitive::u8),
                        #[codec(index = 112)]
                        Mortal112(::core::primitive::u8),
                        #[codec(index = 113)]
                        Mortal113(::core::primitive::u8),
                        #[codec(index = 114)]
                        Mortal114(::core::primitive::u8),
                        #[codec(index = 115)]
                        Mortal115(::core::primitive::u8),
                        #[codec(index = 116)]
                        Mortal116(::core::primitive::u8),
                        #[codec(index = 117)]
                        Mortal117(::core::primitive::u8),
                        #[codec(index = 118)]
                        Mortal118(::core::primitive::u8),
                        #[codec(index = 119)]
                        Mortal119(::core::primitive::u8),
                        #[codec(index = 120)]
                        Mortal120(::core::primitive::u8),
                        #[codec(index = 121)]
                        Mortal121(::core::primitive::u8),
                        #[codec(index = 122)]
                        Mortal122(::core::primitive::u8),
                        #[codec(index = 123)]
                        Mortal123(::core::primitive::u8),
                        #[codec(index = 124)]
                        Mortal124(::core::primitive::u8),
                        #[codec(index = 125)]
                        Mortal125(::core::primitive::u8),
                        #[codec(index = 126)]
                        Mortal126(::core::primitive::u8),
                        #[codec(index = 127)]
                        Mortal127(::core::primitive::u8),
                        #[codec(index = 128)]
                        Mortal128(::core::primitive::u8),
                        #[codec(index = 129)]
                        Mortal129(::core::primitive::u8),
                        #[codec(index = 130)]
                        Mortal130(::core::primitive::u8),
                        #[codec(index = 131)]
                        Mortal131(::core::primitive::u8),
                        #[codec(index = 132)]
                        Mortal132(::core::primitive::u8),
                        #[codec(index = 133)]
                        Mortal133(::core::primitive::u8),
                        #[codec(index = 134)]
                        Mortal134(::core::primitive::u8),
                        #[codec(index = 135)]
                        Mortal135(::core::primitive::u8),
                        #[codec(index = 136)]
                        Mortal136(::core::primitive::u8),
                        #[codec(index = 137)]
                        Mortal137(::core::primitive::u8),
                        #[codec(index = 138)]
                        Mortal138(::core::primitive::u8),
                        #[codec(index = 139)]
                        Mortal139(::core::primitive::u8),
                        #[codec(index = 140)]
                        Mortal140(::core::primitive::u8),
                        #[codec(index = 141)]
                        Mortal141(::core::primitive::u8),
                        #[codec(index = 142)]
                        Mortal142(::core::primitive::u8),
                        #[codec(index = 143)]
                        Mortal143(::core::primitive::u8),
                        #[codec(index = 144)]
                        Mortal144(::core::primitive::u8),
                        #[codec(index = 145)]
                        Mortal145(::core::primitive::u8),
                        #[codec(index = 146)]
                        Mortal146(::core::primitive::u8),
                        #[codec(index = 147)]
                        Mortal147(::core::primitive::u8),
                        #[codec(index = 148)]
                        Mortal148(::core::primitive::u8),
                        #[codec(index = 149)]
                        Mortal149(::core::primitive::u8),
                        #[codec(index = 150)]
                        Mortal150(::core::primitive::u8),
                        #[codec(index = 151)]
                        Mortal151(::core::primitive::u8),
                        #[codec(index = 152)]
                        Mortal152(::core::primitive::u8),
                        #[codec(index = 153)]
                        Mortal153(::core::primitive::u8),
                        #[codec(index = 154)]
                        Mortal154(::core::primitive::u8),
                        #[codec(index = 155)]
                        Mortal155(::core::primitive::u8),
                        #[codec(index = 156)]
                        Mortal156(::core::primitive::u8),
                        #[codec(index = 157)]
                        Mortal157(::core::primitive::u8),
                        #[codec(index = 158)]
                        Mortal158(::core::primitive::u8),
                        #[codec(index = 159)]
                        Mortal159(::core::primitive::u8),
                        #[codec(index = 160)]
                        Mortal160(::core::primitive::u8),
                        #[codec(index = 161)]
                        Mortal161(::core::primitive::u8),
                        #[codec(index = 162)]
                        Mortal162(::core::primitive::u8),
                        #[codec(index = 163)]
                        Mortal163(::core::primitive::u8),
                        #[codec(index = 164)]
                        Mortal164(::core::primitive::u8),
                        #[codec(index = 165)]
                        Mortal165(::core::primitive::u8),
                        #[codec(index = 166)]
                        Mortal166(::core::primitive::u8),
                        #[codec(index = 167)]
                        Mortal167(::core::primitive::u8),
                        #[codec(index = 168)]
                        Mortal168(::core::primitive::u8),
                        #[codec(index = 169)]
                        Mortal169(::core::primitive::u8),
                        #[codec(index = 170)]
                        Mortal170(::core::primitive::u8),
                        #[codec(index = 171)]
                        Mortal171(::core::primitive::u8),
                        #[codec(index = 172)]
                        Mortal172(::core::primitive::u8),
                        #[codec(index = 173)]
                        Mortal173(::core::primitive::u8),
                        #[codec(index = 174)]
                        Mortal174(::core::primitive::u8),
                        #[codec(index = 175)]
                        Mortal175(::core::primitive::u8),
                        #[codec(index = 176)]
                        Mortal176(::core::primitive::u8),
                        #[codec(index = 177)]
                        Mortal177(::core::primitive::u8),
                        #[codec(index = 178)]
                        Mortal178(::core::primitive::u8),
                        #[codec(index = 179)]
                        Mortal179(::core::primitive::u8),
                        #[codec(index = 180)]
                        Mortal180(::core::primitive::u8),
                        #[codec(index = 181)]
                        Mortal181(::core::primitive::u8),
                        #[codec(index = 182)]
                        Mortal182(::core::primitive::u8),
                        #[codec(index = 183)]
                        Mortal183(::core::primitive::u8),
                        #[codec(index = 184)]
                        Mortal184(::core::primitive::u8),
                        #[codec(index = 185)]
                        Mortal185(::core::primitive::u8),
                        #[codec(index = 186)]
                        Mortal186(::core::primitive::u8),
                        #[codec(index = 187)]
                        Mortal187(::core::primitive::u8),
                        #[codec(index = 188)]
                        Mortal188(::core::primitive::u8),
                        #[codec(index = 189)]
                        Mortal189(::core::primitive::u8),
                        #[codec(index = 190)]
                        Mortal190(::core::primitive::u8),
                        #[codec(index = 191)]
                        Mortal191(::core::primitive::u8),
                        #[codec(index = 192)]
                        Mortal192(::core::primitive::u8),
                        #[codec(index = 193)]
                        Mortal193(::core::primitive::u8),
                        #[codec(index = 194)]
                        Mortal194(::core::primitive::u8),
                        #[codec(index = 195)]
                        Mortal195(::core::primitive::u8),
                        #[codec(index = 196)]
                        Mortal196(::core::primitive::u8),
                        #[codec(index = 197)]
                        Mortal197(::core::primitive::u8),
                        #[codec(index = 198)]
                        Mortal198(::core::primitive::u8),
                        #[codec(index = 199)]
                        Mortal199(::core::primitive::u8),
                        #[codec(index = 200)]
                        Mortal200(::core::primitive::u8),
                        #[codec(index = 201)]
                        Mortal201(::core::primitive::u8),
                        #[codec(index = 202)]
                        Mortal202(::core::primitive::u8),
                        #[codec(index = 203)]
                        Mortal203(::core::primitive::u8),
                        #[codec(index = 204)]
                        Mortal204(::core::primitive::u8),
                        #[codec(index = 205)]
                        Mortal205(::core::primitive::u8),
                        #[codec(index = 206)]
                        Mortal206(::core::primitive::u8),
                        #[codec(index = 207)]
                        Mortal207(::core::primitive::u8),
                        #[codec(index = 208)]
                        Mortal208(::core::primitive::u8),
                        #[codec(index = 209)]
                        Mortal209(::core::primitive::u8),
                        #[codec(index = 210)]
                        Mortal210(::core::primitive::u8),
                        #[codec(index = 211)]
                        Mortal211(::core::primitive::u8),
                        #[codec(index = 212)]
                        Mortal212(::core::primitive::u8),
                        #[codec(index = 213)]
                        Mortal213(::core::primitive::u8),
                        #[codec(index = 214)]
                        Mortal214(::core::primitive::u8),
                        #[codec(index = 215)]
                        Mortal215(::core::primitive::u8),
                        #[codec(index = 216)]
                        Mortal216(::core::primitive::u8),
                        #[codec(index = 217)]
                        Mortal217(::core::primitive::u8),
                        #[codec(index = 218)]
                        Mortal218(::core::primitive::u8),
                        #[codec(index = 219)]
                        Mortal219(::core::primitive::u8),
                        #[codec(index = 220)]
                        Mortal220(::core::primitive::u8),
                        #[codec(index = 221)]
                        Mortal221(::core::primitive::u8),
                        #[codec(index = 222)]
                        Mortal222(::core::primitive::u8),
                        #[codec(index = 223)]
                        Mortal223(::core::primitive::u8),
                        #[codec(index = 224)]
                        Mortal224(::core::primitive::u8),
                        #[codec(index = 225)]
                        Mortal225(::core::primitive::u8),
                        #[codec(index = 226)]
                        Mortal226(::core::primitive::u8),
                        #[codec(index = 227)]
                        Mortal227(::core::primitive::u8),
                        #[codec(index = 228)]
                        Mortal228(::core::primitive::u8),
                        #[codec(index = 229)]
                        Mortal229(::core::primitive::u8),
                        #[codec(index = 230)]
                        Mortal230(::core::primitive::u8),
                        #[codec(index = 231)]
                        Mortal231(::core::primitive::u8),
                        #[codec(index = 232)]
                        Mortal232(::core::primitive::u8),
                        #[codec(index = 233)]
                        Mortal233(::core::primitive::u8),
                        #[codec(index = 234)]
                        Mortal234(::core::primitive::u8),
                        #[codec(index = 235)]
                        Mortal235(::core::primitive::u8),
                        #[codec(index = 236)]
                        Mortal236(::core::primitive::u8),
                        #[codec(index = 237)]
                        Mortal237(::core::primitive::u8),
                        #[codec(index = 238)]
                        Mortal238(::core::primitive::u8),
                        #[codec(index = 239)]
                        Mortal239(::core::primitive::u8),
                        #[codec(index = 240)]
                        Mortal240(::core::primitive::u8),
                        #[codec(index = 241)]
                        Mortal241(::core::primitive::u8),
                        #[codec(index = 242)]
                        Mortal242(::core::primitive::u8),
                        #[codec(index = 243)]
                        Mortal243(::core::primitive::u8),
                        #[codec(index = 244)]
                        Mortal244(::core::primitive::u8),
                        #[codec(index = 245)]
                        Mortal245(::core::primitive::u8),
                        #[codec(index = 246)]
                        Mortal246(::core::primitive::u8),
                        #[codec(index = 247)]
                        Mortal247(::core::primitive::u8),
                        #[codec(index = 248)]
                        Mortal248(::core::primitive::u8),
                        #[codec(index = 249)]
                        Mortal249(::core::primitive::u8),
                        #[codec(index = 250)]
                        Mortal250(::core::primitive::u8),
                        #[codec(index = 251)]
                        Mortal251(::core::primitive::u8),
                        #[codec(index = 252)]
                        Mortal252(::core::primitive::u8),
                        #[codec(index = 253)]
                        Mortal253(::core::primitive::u8),
                        #[codec(index = 254)]
                        Mortal254(::core::primitive::u8),
                        #[codec(index = 255)]
                        Mortal255(::core::primitive::u8),
                    }
                }
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub enum DispatchError {
                #[codec(index = 0)]
                Other,
                #[codec(index = 1)]
                CannotLookup,
                #[codec(index = 2)]
                BadOrigin,
                #[codec(index = 3)]
                Module(runtime_types::sp_runtime::ModuleError),
                #[codec(index = 4)]
                ConsumerRemaining,
                #[codec(index = 5)]
                NoProviders,
                #[codec(index = 6)]
                TooManyConsumers,
                #[codec(index = 7)]
                Token(runtime_types::sp_runtime::TokenError),
                #[codec(index = 8)]
                Arithmetic(runtime_types::sp_arithmetic::ArithmeticError),
                #[codec(index = 9)]
                Transactional(runtime_types::sp_runtime::TransactionalError),
                #[codec(index = 10)]
                Exhausted,
                #[codec(index = 11)]
                Corruption,
                #[codec(index = 12)]
                Unavailable,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct ModuleError {
                pub index: ::core::primitive::u8,
                pub error: [::core::primitive::u8; 4usize],
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub enum MultiSignature {
                #[codec(index = 0)]
                Ed25519(runtime_types::sp_core::ed25519::Signature),
                #[codec(index = 1)]
                Sr25519(runtime_types::sp_core::sr25519::Signature),
                #[codec(index = 2)]
                Ecdsa(runtime_types::sp_core::ecdsa::Signature),
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub enum TokenError {
                #[codec(index = 0)]
                NoFunds,
                #[codec(index = 1)]
                WouldDie,
                #[codec(index = 2)]
                BelowMinimum,
                #[codec(index = 3)]
                CannotCreate,
                #[codec(index = 4)]
                UnknownAsset,
                #[codec(index = 5)]
                Frozen,
                #[codec(index = 6)]
                Unsupported,
            }
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub enum TransactionalError {
                #[codec(index = 0)]
                LimitReached,
                #[codec(index = 1)]
                NoLayer,
            }
        }
        pub mod sp_version {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct RuntimeVersion {
                pub spec_name: ::std::string::String,
                pub impl_name: ::std::string::String,
                pub authoring_version: ::core::primitive::u32,
                pub spec_version: ::core::primitive::u32,
                pub impl_version: ::core::primitive::u32,
                pub apis:
                    ::std::vec::Vec<([::core::primitive::u8; 8usize], ::core::primitive::u32)>,
                pub transaction_version: ::core::primitive::u32,
                pub state_version: ::core::primitive::u8,
            }
        }
        pub mod sp_weights {
            use super::runtime_types;
            pub mod weight_v2 {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: codec :: Decode,
                    :: subxt :: ext :: codec :: Encode,
                    :: subxt :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: scale_encode :: EncodeAsType,
                    Debug,
                )]
                # [codec (crate = :: subxt :: ext :: codec)]
                #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
                #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
                pub struct Weight {
                    #[codec(compact)]
                    pub ref_time: ::core::primitive::u64,
                    #[codec(compact)]
                    pub proof_size: ::core::primitive::u64,
                }
            }
            #[derive(
                :: subxt :: ext :: codec :: CompactAs,
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct OldWeight(pub ::core::primitive::u64);
            #[derive(
                :: subxt :: ext :: codec :: Decode,
                :: subxt :: ext :: codec :: Encode,
                :: subxt :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: scale_encode :: EncodeAsType,
                Debug,
            )]
            # [codec (crate = :: subxt :: ext :: codec)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: scale_encode")]
            pub struct RuntimeDbWeight {
                pub read: ::core::primitive::u64,
                pub write: ::core::primitive::u64,
            }
        }
    }
}
